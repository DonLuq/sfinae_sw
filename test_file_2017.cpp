#include <type_traits>
#include <string>

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
A(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
B(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
C(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
D(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
E(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
F(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
G(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
H(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
I(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
J(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
II(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
III(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BCJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
BJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CCJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
CJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DCJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
DJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ECJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
EJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FCJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
FJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GCJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
GJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HCJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
HJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
ICJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
IJJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JABJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JACJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JADJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JAJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JBJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JCJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JDJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JECJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JEJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JFJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JGJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JHJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JICJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JIJJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJAJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJBJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJCJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJDJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJED(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJEJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJFJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJGJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJHJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJID(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJII(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJIJ(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJA(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJB(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJC(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJD(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJE(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJF(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJG(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJH(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJI(T a)
{
    std::string r = a;
    return r;
}

template <typename T>
std::enable_if_t<std::is_same_v<T, std::string>>
JJJJ(T a)
{
    std::string r = a;
    return r;
}

int main(){
std::string A((std::string)"std::string");
std::string B((std::string)"std::string");
std::string C((std::string)"std::string");
std::string D((std::string)"std::string");
std::string E((std::string)"std::string");
std::string F((std::string)"std::string");
std::string G((std::string)"std::string");
std::string H((std::string)"std::string");
std::string I((std::string)"std::string");
std::string J((std::string)"std::string");
std::string BA((std::string)"std::string");
std::string BB((std::string)"std::string");
std::string BC((std::string)"std::string");
std::string BD((std::string)"std::string");
std::string BE((std::string)"std::string");
std::string BF((std::string)"std::string");
std::string BG((std::string)"std::string");
std::string BH((std::string)"std::string");
std::string BI((std::string)"std::string");
std::string BJ((std::string)"std::string");
std::string CA((std::string)"std::string");
std::string CB((std::string)"std::string");
std::string CC((std::string)"std::string");
std::string CD((std::string)"std::string");
std::string CE((std::string)"std::string");
std::string CF((std::string)"std::string");
std::string CG((std::string)"std::string");
std::string CH((std::string)"std::string");
std::string CI((std::string)"std::string");
std::string CJ((std::string)"std::string");
std::string DA((std::string)"std::string");
std::string DB((std::string)"std::string");
std::string DC((std::string)"std::string");
std::string DD((std::string)"std::string");
std::string DE((std::string)"std::string");
std::string DF((std::string)"std::string");
std::string DG((std::string)"std::string");
std::string DH((std::string)"std::string");
std::string DI((std::string)"std::string");
std::string DJ((std::string)"std::string");
std::string EA((std::string)"std::string");
std::string EB((std::string)"std::string");
std::string EC((std::string)"std::string");
std::string ED((std::string)"std::string");
std::string EE((std::string)"std::string");
std::string EF((std::string)"std::string");
std::string EG((std::string)"std::string");
std::string EH((std::string)"std::string");
std::string EI((std::string)"std::string");
std::string EJ((std::string)"std::string");
std::string FA((std::string)"std::string");
std::string FB((std::string)"std::string");
std::string FC((std::string)"std::string");
std::string FD((std::string)"std::string");
std::string FE((std::string)"std::string");
std::string FF((std::string)"std::string");
std::string FG((std::string)"std::string");
std::string FH((std::string)"std::string");
std::string FI((std::string)"std::string");
std::string FJ((std::string)"std::string");
std::string GA((std::string)"std::string");
std::string GB((std::string)"std::string");
std::string GC((std::string)"std::string");
std::string GD((std::string)"std::string");
std::string GE((std::string)"std::string");
std::string GF((std::string)"std::string");
std::string GG((std::string)"std::string");
std::string GH((std::string)"std::string");
std::string GI((std::string)"std::string");
std::string GJ((std::string)"std::string");
std::string HA((std::string)"std::string");
std::string HB((std::string)"std::string");
std::string HC((std::string)"std::string");
std::string HD((std::string)"std::string");
std::string HE((std::string)"std::string");
std::string HF((std::string)"std::string");
std::string HG((std::string)"std::string");
std::string HH((std::string)"std::string");
std::string HI((std::string)"std::string");
std::string HJ((std::string)"std::string");
std::string IA((std::string)"std::string");
std::string IB((std::string)"std::string");
std::string IC((std::string)"std::string");
std::string ID((std::string)"std::string");
std::string IE((std::string)"std::string");
std::string IF((std::string)"std::string");
std::string IG((std::string)"std::string");
std::string IH((std::string)"std::string");
std::string II((std::string)"std::string");
std::string IJ((std::string)"std::string");
std::string JA((std::string)"std::string");
std::string JB((std::string)"std::string");
std::string JC((std::string)"std::string");
std::string JD((std::string)"std::string");
std::string JE((std::string)"std::string");
std::string JF((std::string)"std::string");
std::string JG((std::string)"std::string");
std::string JH((std::string)"std::string");
std::string JI((std::string)"std::string");
std::string JJ((std::string)"std::string");
std::string BAA((std::string)"std::string");
std::string BAB((std::string)"std::string");
std::string BAC((std::string)"std::string");
std::string BAD((std::string)"std::string");
std::string BAE((std::string)"std::string");
std::string BAF((std::string)"std::string");
std::string BAG((std::string)"std::string");
std::string BAH((std::string)"std::string");
std::string BAI((std::string)"std::string");
std::string BAJ((std::string)"std::string");
std::string BBA((std::string)"std::string");
std::string BBB((std::string)"std::string");
std::string BBC((std::string)"std::string");
std::string BBD((std::string)"std::string");
std::string BBE((std::string)"std::string");
std::string BBF((std::string)"std::string");
std::string BBG((std::string)"std::string");
std::string BBH((std::string)"std::string");
std::string BBI((std::string)"std::string");
std::string BBJ((std::string)"std::string");
std::string BCA((std::string)"std::string");
std::string BCB((std::string)"std::string");
std::string BCC((std::string)"std::string");
std::string BCD((std::string)"std::string");
std::string BCE((std::string)"std::string");
std::string BCF((std::string)"std::string");
std::string BCG((std::string)"std::string");
std::string BCH((std::string)"std::string");
std::string BCI((std::string)"std::string");
std::string BCJ((std::string)"std::string");
std::string BDA((std::string)"std::string");
std::string BDB((std::string)"std::string");
std::string BDC((std::string)"std::string");
std::string BDD((std::string)"std::string");
std::string BDE((std::string)"std::string");
std::string BDF((std::string)"std::string");
std::string BDG((std::string)"std::string");
std::string BDH((std::string)"std::string");
std::string BDI((std::string)"std::string");
std::string BDJ((std::string)"std::string");
std::string BEA((std::string)"std::string");
std::string BEB((std::string)"std::string");
std::string BEC((std::string)"std::string");
std::string BED((std::string)"std::string");
std::string BEE((std::string)"std::string");
std::string BEF((std::string)"std::string");
std::string BEG((std::string)"std::string");
std::string BEH((std::string)"std::string");
std::string BEI((std::string)"std::string");
std::string BEJ((std::string)"std::string");
std::string BFA((std::string)"std::string");
std::string BFB((std::string)"std::string");
std::string BFC((std::string)"std::string");
std::string BFD((std::string)"std::string");
std::string BFE((std::string)"std::string");
std::string BFF((std::string)"std::string");
std::string BFG((std::string)"std::string");
std::string BFH((std::string)"std::string");
std::string BFI((std::string)"std::string");
std::string BFJ((std::string)"std::string");
std::string BGA((std::string)"std::string");
std::string BGB((std::string)"std::string");
std::string BGC((std::string)"std::string");
std::string BGD((std::string)"std::string");
std::string BGE((std::string)"std::string");
std::string BGF((std::string)"std::string");
std::string BGG((std::string)"std::string");
std::string BGH((std::string)"std::string");
std::string BGI((std::string)"std::string");
std::string BGJ((std::string)"std::string");
std::string BHA((std::string)"std::string");
std::string BHB((std::string)"std::string");
std::string BHC((std::string)"std::string");
std::string BHD((std::string)"std::string");
std::string BHE((std::string)"std::string");
std::string BHF((std::string)"std::string");
std::string BHG((std::string)"std::string");
std::string BHH((std::string)"std::string");
std::string BHI((std::string)"std::string");
std::string BHJ((std::string)"std::string");
std::string BIA((std::string)"std::string");
std::string BIB((std::string)"std::string");
std::string BIC((std::string)"std::string");
std::string BID((std::string)"std::string");
std::string BIE((std::string)"std::string");
std::string BIF((std::string)"std::string");
std::string BIG((std::string)"std::string");
std::string BIH((std::string)"std::string");
std::string BII((std::string)"std::string");
std::string BIJ((std::string)"std::string");
std::string BJA((std::string)"std::string");
std::string BJB((std::string)"std::string");
std::string BJC((std::string)"std::string");
std::string BJD((std::string)"std::string");
std::string BJE((std::string)"std::string");
std::string BJF((std::string)"std::string");
std::string BJG((std::string)"std::string");
std::string BJH((std::string)"std::string");
std::string BJI((std::string)"std::string");
std::string BJJ((std::string)"std::string");
std::string CAA((std::string)"std::string");
std::string CAB((std::string)"std::string");
std::string CAC((std::string)"std::string");
std::string CAD((std::string)"std::string");
std::string CAE((std::string)"std::string");
std::string CAF((std::string)"std::string");
std::string CAG((std::string)"std::string");
std::string CAH((std::string)"std::string");
std::string CAI((std::string)"std::string");
std::string CAJ((std::string)"std::string");
std::string CBA((std::string)"std::string");
std::string CBB((std::string)"std::string");
std::string CBC((std::string)"std::string");
std::string CBD((std::string)"std::string");
std::string CBE((std::string)"std::string");
std::string CBF((std::string)"std::string");
std::string CBG((std::string)"std::string");
std::string CBH((std::string)"std::string");
std::string CBI((std::string)"std::string");
std::string CBJ((std::string)"std::string");
std::string CCA((std::string)"std::string");
std::string CCB((std::string)"std::string");
std::string CCC((std::string)"std::string");
std::string CCD((std::string)"std::string");
std::string CCE((std::string)"std::string");
std::string CCF((std::string)"std::string");
std::string CCG((std::string)"std::string");
std::string CCH((std::string)"std::string");
std::string CCI((std::string)"std::string");
std::string CCJ((std::string)"std::string");
std::string CDA((std::string)"std::string");
std::string CDB((std::string)"std::string");
std::string CDC((std::string)"std::string");
std::string CDD((std::string)"std::string");
std::string CDE((std::string)"std::string");
std::string CDF((std::string)"std::string");
std::string CDG((std::string)"std::string");
std::string CDH((std::string)"std::string");
std::string CDI((std::string)"std::string");
std::string CDJ((std::string)"std::string");
std::string CEA((std::string)"std::string");
std::string CEB((std::string)"std::string");
std::string CEC((std::string)"std::string");
std::string CED((std::string)"std::string");
std::string CEE((std::string)"std::string");
std::string CEF((std::string)"std::string");
std::string CEG((std::string)"std::string");
std::string CEH((std::string)"std::string");
std::string CEI((std::string)"std::string");
std::string CEJ((std::string)"std::string");
std::string CFA((std::string)"std::string");
std::string CFB((std::string)"std::string");
std::string CFC((std::string)"std::string");
std::string CFD((std::string)"std::string");
std::string CFE((std::string)"std::string");
std::string CFF((std::string)"std::string");
std::string CFG((std::string)"std::string");
std::string CFH((std::string)"std::string");
std::string CFI((std::string)"std::string");
std::string CFJ((std::string)"std::string");
std::string CGA((std::string)"std::string");
std::string CGB((std::string)"std::string");
std::string CGC((std::string)"std::string");
std::string CGD((std::string)"std::string");
std::string CGE((std::string)"std::string");
std::string CGF((std::string)"std::string");
std::string CGG((std::string)"std::string");
std::string CGH((std::string)"std::string");
std::string CGI((std::string)"std::string");
std::string CGJ((std::string)"std::string");
std::string CHA((std::string)"std::string");
std::string CHB((std::string)"std::string");
std::string CHC((std::string)"std::string");
std::string CHD((std::string)"std::string");
std::string CHE((std::string)"std::string");
std::string CHF((std::string)"std::string");
std::string CHG((std::string)"std::string");
std::string CHH((std::string)"std::string");
std::string CHI((std::string)"std::string");
std::string CHJ((std::string)"std::string");
std::string CIA((std::string)"std::string");
std::string CIB((std::string)"std::string");
std::string CIC((std::string)"std::string");
std::string CID((std::string)"std::string");
std::string CIE((std::string)"std::string");
std::string CIF((std::string)"std::string");
std::string CIG((std::string)"std::string");
std::string CIH((std::string)"std::string");
std::string CII((std::string)"std::string");
std::string CIJ((std::string)"std::string");
std::string CJA((std::string)"std::string");
std::string CJB((std::string)"std::string");
std::string CJC((std::string)"std::string");
std::string CJD((std::string)"std::string");
std::string CJE((std::string)"std::string");
std::string CJF((std::string)"std::string");
std::string CJG((std::string)"std::string");
std::string CJH((std::string)"std::string");
std::string CJI((std::string)"std::string");
std::string CJJ((std::string)"std::string");
std::string DAA((std::string)"std::string");
std::string DAB((std::string)"std::string");
std::string DAC((std::string)"std::string");
std::string DAD((std::string)"std::string");
std::string DAE((std::string)"std::string");
std::string DAF((std::string)"std::string");
std::string DAG((std::string)"std::string");
std::string DAH((std::string)"std::string");
std::string DAI((std::string)"std::string");
std::string DAJ((std::string)"std::string");
std::string DBA((std::string)"std::string");
std::string DBB((std::string)"std::string");
std::string DBC((std::string)"std::string");
std::string DBD((std::string)"std::string");
std::string DBE((std::string)"std::string");
std::string DBF((std::string)"std::string");
std::string DBG((std::string)"std::string");
std::string DBH((std::string)"std::string");
std::string DBI((std::string)"std::string");
std::string DBJ((std::string)"std::string");
std::string DCA((std::string)"std::string");
std::string DCB((std::string)"std::string");
std::string DCC((std::string)"std::string");
std::string DCD((std::string)"std::string");
std::string DCE((std::string)"std::string");
std::string DCF((std::string)"std::string");
std::string DCG((std::string)"std::string");
std::string DCH((std::string)"std::string");
std::string DCI((std::string)"std::string");
std::string DCJ((std::string)"std::string");
std::string DDA((std::string)"std::string");
std::string DDB((std::string)"std::string");
std::string DDC((std::string)"std::string");
std::string DDD((std::string)"std::string");
std::string DDE((std::string)"std::string");
std::string DDF((std::string)"std::string");
std::string DDG((std::string)"std::string");
std::string DDH((std::string)"std::string");
std::string DDI((std::string)"std::string");
std::string DDJ((std::string)"std::string");
std::string DEA((std::string)"std::string");
std::string DEB((std::string)"std::string");
std::string DEC((std::string)"std::string");
std::string DED((std::string)"std::string");
std::string DEE((std::string)"std::string");
std::string DEF((std::string)"std::string");
std::string DEG((std::string)"std::string");
std::string DEH((std::string)"std::string");
std::string DEI((std::string)"std::string");
std::string DEJ((std::string)"std::string");
std::string DFA((std::string)"std::string");
std::string DFB((std::string)"std::string");
std::string DFC((std::string)"std::string");
std::string DFD((std::string)"std::string");
std::string DFE((std::string)"std::string");
std::string DFF((std::string)"std::string");
std::string DFG((std::string)"std::string");
std::string DFH((std::string)"std::string");
std::string DFI((std::string)"std::string");
std::string DFJ((std::string)"std::string");
std::string DGA((std::string)"std::string");
std::string DGB((std::string)"std::string");
std::string DGC((std::string)"std::string");
std::string DGD((std::string)"std::string");
std::string DGE((std::string)"std::string");
std::string DGF((std::string)"std::string");
std::string DGG((std::string)"std::string");
std::string DGH((std::string)"std::string");
std::string DGI((std::string)"std::string");
std::string DGJ((std::string)"std::string");
std::string DHA((std::string)"std::string");
std::string DHB((std::string)"std::string");
std::string DHC((std::string)"std::string");
std::string DHD((std::string)"std::string");
std::string DHE((std::string)"std::string");
std::string DHF((std::string)"std::string");
std::string DHG((std::string)"std::string");
std::string DHH((std::string)"std::string");
std::string DHI((std::string)"std::string");
std::string DHJ((std::string)"std::string");
std::string DIA((std::string)"std::string");
std::string DIB((std::string)"std::string");
std::string DIC((std::string)"std::string");
std::string DID((std::string)"std::string");
std::string DIE((std::string)"std::string");
std::string DIF((std::string)"std::string");
std::string DIG((std::string)"std::string");
std::string DIH((std::string)"std::string");
std::string DII((std::string)"std::string");
std::string DIJ((std::string)"std::string");
std::string DJA((std::string)"std::string");
std::string DJB((std::string)"std::string");
std::string DJC((std::string)"std::string");
std::string DJD((std::string)"std::string");
std::string DJE((std::string)"std::string");
std::string DJF((std::string)"std::string");
std::string DJG((std::string)"std::string");
std::string DJH((std::string)"std::string");
std::string DJI((std::string)"std::string");
std::string DJJ((std::string)"std::string");
std::string EAA((std::string)"std::string");
std::string EAB((std::string)"std::string");
std::string EAC((std::string)"std::string");
std::string EAD((std::string)"std::string");
std::string EAE((std::string)"std::string");
std::string EAF((std::string)"std::string");
std::string EAG((std::string)"std::string");
std::string EAH((std::string)"std::string");
std::string EAI((std::string)"std::string");
std::string EAJ((std::string)"std::string");
std::string EBA((std::string)"std::string");
std::string EBB((std::string)"std::string");
std::string EBC((std::string)"std::string");
std::string EBD((std::string)"std::string");
std::string EBE((std::string)"std::string");
std::string EBF((std::string)"std::string");
std::string EBG((std::string)"std::string");
std::string EBH((std::string)"std::string");
std::string EBI((std::string)"std::string");
std::string EBJ((std::string)"std::string");
std::string ECA((std::string)"std::string");
std::string ECB((std::string)"std::string");
std::string ECC((std::string)"std::string");
std::string ECD((std::string)"std::string");
std::string ECE((std::string)"std::string");
std::string ECF((std::string)"std::string");
std::string ECG((std::string)"std::string");
std::string ECH((std::string)"std::string");
std::string ECI((std::string)"std::string");
std::string ECJ((std::string)"std::string");
std::string EDA((std::string)"std::string");
std::string EDB((std::string)"std::string");
std::string EDC((std::string)"std::string");
std::string EDD((std::string)"std::string");
std::string EDE((std::string)"std::string");
std::string EDF((std::string)"std::string");
std::string EDG((std::string)"std::string");
std::string EDH((std::string)"std::string");
std::string EDI((std::string)"std::string");
std::string EDJ((std::string)"std::string");
std::string EEA((std::string)"std::string");
std::string EEB((std::string)"std::string");
std::string EEC((std::string)"std::string");
std::string EED((std::string)"std::string");
std::string EEE((std::string)"std::string");
std::string EEF((std::string)"std::string");
std::string EEG((std::string)"std::string");
std::string EEH((std::string)"std::string");
std::string EEI((std::string)"std::string");
std::string EEJ((std::string)"std::string");
std::string EFA((std::string)"std::string");
std::string EFB((std::string)"std::string");
std::string EFC((std::string)"std::string");
std::string EFD((std::string)"std::string");
std::string EFE((std::string)"std::string");
std::string EFF((std::string)"std::string");
std::string EFG((std::string)"std::string");
std::string EFH((std::string)"std::string");
std::string EFI((std::string)"std::string");
std::string EFJ((std::string)"std::string");
std::string EGA((std::string)"std::string");
std::string EGB((std::string)"std::string");
std::string EGC((std::string)"std::string");
std::string EGD((std::string)"std::string");
std::string EGE((std::string)"std::string");
std::string EGF((std::string)"std::string");
std::string EGG((std::string)"std::string");
std::string EGH((std::string)"std::string");
std::string EGI((std::string)"std::string");
std::string EGJ((std::string)"std::string");
std::string EHA((std::string)"std::string");
std::string EHB((std::string)"std::string");
std::string EHC((std::string)"std::string");
std::string EHD((std::string)"std::string");
std::string EHE((std::string)"std::string");
std::string EHF((std::string)"std::string");
std::string EHG((std::string)"std::string");
std::string EHH((std::string)"std::string");
std::string EHI((std::string)"std::string");
std::string EHJ((std::string)"std::string");
std::string EIA((std::string)"std::string");
std::string EIB((std::string)"std::string");
std::string EIC((std::string)"std::string");
std::string EID((std::string)"std::string");
std::string EIE((std::string)"std::string");
std::string EIF((std::string)"std::string");
std::string EIG((std::string)"std::string");
std::string EIH((std::string)"std::string");
std::string EII((std::string)"std::string");
std::string EIJ((std::string)"std::string");
std::string EJA((std::string)"std::string");
std::string EJB((std::string)"std::string");
std::string EJC((std::string)"std::string");
std::string EJD((std::string)"std::string");
std::string EJE((std::string)"std::string");
std::string EJF((std::string)"std::string");
std::string EJG((std::string)"std::string");
std::string EJH((std::string)"std::string");
std::string EJI((std::string)"std::string");
std::string EJJ((std::string)"std::string");
std::string FAA((std::string)"std::string");
std::string FAB((std::string)"std::string");
std::string FAC((std::string)"std::string");
std::string FAD((std::string)"std::string");
std::string FAE((std::string)"std::string");
std::string FAF((std::string)"std::string");
std::string FAG((std::string)"std::string");
std::string FAH((std::string)"std::string");
std::string FAI((std::string)"std::string");
std::string FAJ((std::string)"std::string");
std::string FBA((std::string)"std::string");
std::string FBB((std::string)"std::string");
std::string FBC((std::string)"std::string");
std::string FBD((std::string)"std::string");
std::string FBE((std::string)"std::string");
std::string FBF((std::string)"std::string");
std::string FBG((std::string)"std::string");
std::string FBH((std::string)"std::string");
std::string FBI((std::string)"std::string");
std::string FBJ((std::string)"std::string");
std::string FCA((std::string)"std::string");
std::string FCB((std::string)"std::string");
std::string FCC((std::string)"std::string");
std::string FCD((std::string)"std::string");
std::string FCE((std::string)"std::string");
std::string FCF((std::string)"std::string");
std::string FCG((std::string)"std::string");
std::string FCH((std::string)"std::string");
std::string FCI((std::string)"std::string");
std::string FCJ((std::string)"std::string");
std::string FDA((std::string)"std::string");
std::string FDB((std::string)"std::string");
std::string FDC((std::string)"std::string");
std::string FDD((std::string)"std::string");
std::string FDE((std::string)"std::string");
std::string FDF((std::string)"std::string");
std::string FDG((std::string)"std::string");
std::string FDH((std::string)"std::string");
std::string FDI((std::string)"std::string");
std::string FDJ((std::string)"std::string");
std::string FEA((std::string)"std::string");
std::string FEB((std::string)"std::string");
std::string FEC((std::string)"std::string");
std::string FED((std::string)"std::string");
std::string FEE((std::string)"std::string");
std::string FEF((std::string)"std::string");
std::string FEG((std::string)"std::string");
std::string FEH((std::string)"std::string");
std::string FEI((std::string)"std::string");
std::string FEJ((std::string)"std::string");
std::string FFA((std::string)"std::string");
std::string FFB((std::string)"std::string");
std::string FFC((std::string)"std::string");
std::string FFD((std::string)"std::string");
std::string FFE((std::string)"std::string");
std::string FFF((std::string)"std::string");
std::string FFG((std::string)"std::string");
std::string FFH((std::string)"std::string");
std::string FFI((std::string)"std::string");
std::string FFJ((std::string)"std::string");
std::string FGA((std::string)"std::string");
std::string FGB((std::string)"std::string");
std::string FGC((std::string)"std::string");
std::string FGD((std::string)"std::string");
std::string FGE((std::string)"std::string");
std::string FGF((std::string)"std::string");
std::string FGG((std::string)"std::string");
std::string FGH((std::string)"std::string");
std::string FGI((std::string)"std::string");
std::string FGJ((std::string)"std::string");
std::string FHA((std::string)"std::string");
std::string FHB((std::string)"std::string");
std::string FHC((std::string)"std::string");
std::string FHD((std::string)"std::string");
std::string FHE((std::string)"std::string");
std::string FHF((std::string)"std::string");
std::string FHG((std::string)"std::string");
std::string FHH((std::string)"std::string");
std::string FHI((std::string)"std::string");
std::string FHJ((std::string)"std::string");
std::string FIA((std::string)"std::string");
std::string FIB((std::string)"std::string");
std::string FIC((std::string)"std::string");
std::string FID((std::string)"std::string");
std::string FIE((std::string)"std::string");
std::string FIF((std::string)"std::string");
std::string FIG((std::string)"std::string");
std::string FIH((std::string)"std::string");
std::string FII((std::string)"std::string");
std::string FIJ((std::string)"std::string");
std::string FJA((std::string)"std::string");
std::string FJB((std::string)"std::string");
std::string FJC((std::string)"std::string");
std::string FJD((std::string)"std::string");
std::string FJE((std::string)"std::string");
std::string FJF((std::string)"std::string");
std::string FJG((std::string)"std::string");
std::string FJH((std::string)"std::string");
std::string FJI((std::string)"std::string");
std::string FJJ((std::string)"std::string");
std::string GAA((std::string)"std::string");
std::string GAB((std::string)"std::string");
std::string GAC((std::string)"std::string");
std::string GAD((std::string)"std::string");
std::string GAE((std::string)"std::string");
std::string GAF((std::string)"std::string");
std::string GAG((std::string)"std::string");
std::string GAH((std::string)"std::string");
std::string GAI((std::string)"std::string");
std::string GAJ((std::string)"std::string");
std::string GBA((std::string)"std::string");
std::string GBB((std::string)"std::string");
std::string GBC((std::string)"std::string");
std::string GBD((std::string)"std::string");
std::string GBE((std::string)"std::string");
std::string GBF((std::string)"std::string");
std::string GBG((std::string)"std::string");
std::string GBH((std::string)"std::string");
std::string GBI((std::string)"std::string");
std::string GBJ((std::string)"std::string");
std::string GCA((std::string)"std::string");
std::string GCB((std::string)"std::string");
std::string GCC((std::string)"std::string");
std::string GCD((std::string)"std::string");
std::string GCE((std::string)"std::string");
std::string GCF((std::string)"std::string");
std::string GCG((std::string)"std::string");
std::string GCH((std::string)"std::string");
std::string GCI((std::string)"std::string");
std::string GCJ((std::string)"std::string");
std::string GDA((std::string)"std::string");
std::string GDB((std::string)"std::string");
std::string GDC((std::string)"std::string");
std::string GDD((std::string)"std::string");
std::string GDE((std::string)"std::string");
std::string GDF((std::string)"std::string");
std::string GDG((std::string)"std::string");
std::string GDH((std::string)"std::string");
std::string GDI((std::string)"std::string");
std::string GDJ((std::string)"std::string");
std::string GEA((std::string)"std::string");
std::string GEB((std::string)"std::string");
std::string GEC((std::string)"std::string");
std::string GED((std::string)"std::string");
std::string GEE((std::string)"std::string");
std::string GEF((std::string)"std::string");
std::string GEG((std::string)"std::string");
std::string GEH((std::string)"std::string");
std::string GEI((std::string)"std::string");
std::string GEJ((std::string)"std::string");
std::string GFA((std::string)"std::string");
std::string GFB((std::string)"std::string");
std::string GFC((std::string)"std::string");
std::string GFD((std::string)"std::string");
std::string GFE((std::string)"std::string");
std::string GFF((std::string)"std::string");
std::string GFG((std::string)"std::string");
std::string GFH((std::string)"std::string");
std::string GFI((std::string)"std::string");
std::string GFJ((std::string)"std::string");
std::string GGA((std::string)"std::string");
std::string GGB((std::string)"std::string");
std::string GGC((std::string)"std::string");
std::string GGD((std::string)"std::string");
std::string GGE((std::string)"std::string");
std::string GGF((std::string)"std::string");
std::string GGG((std::string)"std::string");
std::string GGH((std::string)"std::string");
std::string GGI((std::string)"std::string");
std::string GGJ((std::string)"std::string");
std::string GHA((std::string)"std::string");
std::string GHB((std::string)"std::string");
std::string GHC((std::string)"std::string");
std::string GHD((std::string)"std::string");
std::string GHE((std::string)"std::string");
std::string GHF((std::string)"std::string");
std::string GHG((std::string)"std::string");
std::string GHH((std::string)"std::string");
std::string GHI((std::string)"std::string");
std::string GHJ((std::string)"std::string");
std::string GIA((std::string)"std::string");
std::string GIB((std::string)"std::string");
std::string GIC((std::string)"std::string");
std::string GID((std::string)"std::string");
std::string GIE((std::string)"std::string");
std::string GIF((std::string)"std::string");
std::string GIG((std::string)"std::string");
std::string GIH((std::string)"std::string");
std::string GII((std::string)"std::string");
std::string GIJ((std::string)"std::string");
std::string GJA((std::string)"std::string");
std::string GJB((std::string)"std::string");
std::string GJC((std::string)"std::string");
std::string GJD((std::string)"std::string");
std::string GJE((std::string)"std::string");
std::string GJF((std::string)"std::string");
std::string GJG((std::string)"std::string");
std::string GJH((std::string)"std::string");
std::string GJI((std::string)"std::string");
std::string GJJ((std::string)"std::string");
std::string HAA((std::string)"std::string");
std::string HAB((std::string)"std::string");
std::string HAC((std::string)"std::string");
std::string HAD((std::string)"std::string");
std::string HAE((std::string)"std::string");
std::string HAF((std::string)"std::string");
std::string HAG((std::string)"std::string");
std::string HAH((std::string)"std::string");
std::string HAI((std::string)"std::string");
std::string HAJ((std::string)"std::string");
std::string HBA((std::string)"std::string");
std::string HBB((std::string)"std::string");
std::string HBC((std::string)"std::string");
std::string HBD((std::string)"std::string");
std::string HBE((std::string)"std::string");
std::string HBF((std::string)"std::string");
std::string HBG((std::string)"std::string");
std::string HBH((std::string)"std::string");
std::string HBI((std::string)"std::string");
std::string HBJ((std::string)"std::string");
std::string HCA((std::string)"std::string");
std::string HCB((std::string)"std::string");
std::string HCC((std::string)"std::string");
std::string HCD((std::string)"std::string");
std::string HCE((std::string)"std::string");
std::string HCF((std::string)"std::string");
std::string HCG((std::string)"std::string");
std::string HCH((std::string)"std::string");
std::string HCI((std::string)"std::string");
std::string HCJ((std::string)"std::string");
std::string HDA((std::string)"std::string");
std::string HDB((std::string)"std::string");
std::string HDC((std::string)"std::string");
std::string HDD((std::string)"std::string");
std::string HDE((std::string)"std::string");
std::string HDF((std::string)"std::string");
std::string HDG((std::string)"std::string");
std::string HDH((std::string)"std::string");
std::string HDI((std::string)"std::string");
std::string HDJ((std::string)"std::string");
std::string HEA((std::string)"std::string");
std::string HEB((std::string)"std::string");
std::string HEC((std::string)"std::string");
std::string HED((std::string)"std::string");
std::string HEE((std::string)"std::string");
std::string HEF((std::string)"std::string");
std::string HEG((std::string)"std::string");
std::string HEH((std::string)"std::string");
std::string HEI((std::string)"std::string");
std::string HEJ((std::string)"std::string");
std::string HFA((std::string)"std::string");
std::string HFB((std::string)"std::string");
std::string HFC((std::string)"std::string");
std::string HFD((std::string)"std::string");
std::string HFE((std::string)"std::string");
std::string HFF((std::string)"std::string");
std::string HFG((std::string)"std::string");
std::string HFH((std::string)"std::string");
std::string HFI((std::string)"std::string");
std::string HFJ((std::string)"std::string");
std::string HGA((std::string)"std::string");
std::string HGB((std::string)"std::string");
std::string HGC((std::string)"std::string");
std::string HGD((std::string)"std::string");
std::string HGE((std::string)"std::string");
std::string HGF((std::string)"std::string");
std::string HGG((std::string)"std::string");
std::string HGH((std::string)"std::string");
std::string HGI((std::string)"std::string");
std::string HGJ((std::string)"std::string");
std::string HHA((std::string)"std::string");
std::string HHB((std::string)"std::string");
std::string HHC((std::string)"std::string");
std::string HHD((std::string)"std::string");
std::string HHE((std::string)"std::string");
std::string HHF((std::string)"std::string");
std::string HHG((std::string)"std::string");
std::string HHH((std::string)"std::string");
std::string HHI((std::string)"std::string");
std::string HHJ((std::string)"std::string");
std::string HIA((std::string)"std::string");
std::string HIB((std::string)"std::string");
std::string HIC((std::string)"std::string");
std::string HID((std::string)"std::string");
std::string HIE((std::string)"std::string");
std::string HIF((std::string)"std::string");
std::string HIG((std::string)"std::string");
std::string HIH((std::string)"std::string");
std::string HII((std::string)"std::string");
std::string HIJ((std::string)"std::string");
std::string HJA((std::string)"std::string");
std::string HJB((std::string)"std::string");
std::string HJC((std::string)"std::string");
std::string HJD((std::string)"std::string");
std::string HJE((std::string)"std::string");
std::string HJF((std::string)"std::string");
std::string HJG((std::string)"std::string");
std::string HJH((std::string)"std::string");
std::string HJI((std::string)"std::string");
std::string HJJ((std::string)"std::string");
std::string IAA((std::string)"std::string");
std::string IAB((std::string)"std::string");
std::string IAC((std::string)"std::string");
std::string IAD((std::string)"std::string");
std::string IAE((std::string)"std::string");
std::string IAF((std::string)"std::string");
std::string IAG((std::string)"std::string");
std::string IAH((std::string)"std::string");
std::string IAI((std::string)"std::string");
std::string IAJ((std::string)"std::string");
std::string IBA((std::string)"std::string");
std::string IBB((std::string)"std::string");
std::string IBC((std::string)"std::string");
std::string IBD((std::string)"std::string");
std::string IBE((std::string)"std::string");
std::string IBF((std::string)"std::string");
std::string IBG((std::string)"std::string");
std::string IBH((std::string)"std::string");
std::string IBI((std::string)"std::string");
std::string IBJ((std::string)"std::string");
std::string ICA((std::string)"std::string");
std::string ICB((std::string)"std::string");
std::string ICC((std::string)"std::string");
std::string ICD((std::string)"std::string");
std::string ICE((std::string)"std::string");
std::string ICF((std::string)"std::string");
std::string ICG((std::string)"std::string");
std::string ICH((std::string)"std::string");
std::string ICI((std::string)"std::string");
std::string ICJ((std::string)"std::string");
std::string IDA((std::string)"std::string");
std::string IDB((std::string)"std::string");
std::string IDC((std::string)"std::string");
std::string IDD((std::string)"std::string");
std::string IDE((std::string)"std::string");
std::string IDF((std::string)"std::string");
std::string IDG((std::string)"std::string");
std::string IDH((std::string)"std::string");
std::string IDI((std::string)"std::string");
std::string IDJ((std::string)"std::string");
std::string IEA((std::string)"std::string");
std::string IEB((std::string)"std::string");
std::string IEC((std::string)"std::string");
std::string IED((std::string)"std::string");
std::string IEE((std::string)"std::string");
std::string IEF((std::string)"std::string");
std::string IEG((std::string)"std::string");
std::string IEH((std::string)"std::string");
std::string IEI((std::string)"std::string");
std::string IEJ((std::string)"std::string");
std::string IFA((std::string)"std::string");
std::string IFB((std::string)"std::string");
std::string IFC((std::string)"std::string");
std::string IFD((std::string)"std::string");
std::string IFE((std::string)"std::string");
std::string IFF((std::string)"std::string");
std::string IFG((std::string)"std::string");
std::string IFH((std::string)"std::string");
std::string IFI((std::string)"std::string");
std::string IFJ((std::string)"std::string");
std::string IGA((std::string)"std::string");
std::string IGB((std::string)"std::string");
std::string IGC((std::string)"std::string");
std::string IGD((std::string)"std::string");
std::string IGE((std::string)"std::string");
std::string IGF((std::string)"std::string");
std::string IGG((std::string)"std::string");
std::string IGH((std::string)"std::string");
std::string IGI((std::string)"std::string");
std::string IGJ((std::string)"std::string");
std::string IHA((std::string)"std::string");
std::string IHB((std::string)"std::string");
std::string IHC((std::string)"std::string");
std::string IHD((std::string)"std::string");
std::string IHE((std::string)"std::string");
std::string IHF((std::string)"std::string");
std::string IHG((std::string)"std::string");
std::string IHH((std::string)"std::string");
std::string IHI((std::string)"std::string");
std::string IHJ((std::string)"std::string");
std::string IIA((std::string)"std::string");
std::string IIB((std::string)"std::string");
std::string IIC((std::string)"std::string");
std::string IID((std::string)"std::string");
std::string IIE((std::string)"std::string");
std::string IIF((std::string)"std::string");
std::string IIG((std::string)"std::string");
std::string IIH((std::string)"std::string");
std::string III((std::string)"std::string");
std::string IIJ((std::string)"std::string");
std::string IJA((std::string)"std::string");
std::string IJB((std::string)"std::string");
std::string IJC((std::string)"std::string");
std::string IJD((std::string)"std::string");
std::string IJE((std::string)"std::string");
std::string IJF((std::string)"std::string");
std::string IJG((std::string)"std::string");
std::string IJH((std::string)"std::string");
std::string IJI((std::string)"std::string");
std::string IJJ((std::string)"std::string");
std::string JAA((std::string)"std::string");
std::string JAB((std::string)"std::string");
std::string JAC((std::string)"std::string");
std::string JAD((std::string)"std::string");
std::string JAE((std::string)"std::string");
std::string JAF((std::string)"std::string");
std::string JAG((std::string)"std::string");
std::string JAH((std::string)"std::string");
std::string JAI((std::string)"std::string");
std::string JAJ((std::string)"std::string");
std::string JBA((std::string)"std::string");
std::string JBB((std::string)"std::string");
std::string JBC((std::string)"std::string");
std::string JBD((std::string)"std::string");
std::string JBE((std::string)"std::string");
std::string JBF((std::string)"std::string");
std::string JBG((std::string)"std::string");
std::string JBH((std::string)"std::string");
std::string JBI((std::string)"std::string");
std::string JBJ((std::string)"std::string");
std::string JCA((std::string)"std::string");
std::string JCB((std::string)"std::string");
std::string JCC((std::string)"std::string");
std::string JCD((std::string)"std::string");
std::string JCE((std::string)"std::string");
std::string JCF((std::string)"std::string");
std::string JCG((std::string)"std::string");
std::string JCH((std::string)"std::string");
std::string JCI((std::string)"std::string");
std::string JCJ((std::string)"std::string");
std::string JDA((std::string)"std::string");
std::string JDB((std::string)"std::string");
std::string JDC((std::string)"std::string");
std::string JDD((std::string)"std::string");
std::string JDE((std::string)"std::string");
std::string JDF((std::string)"std::string");
std::string JDG((std::string)"std::string");
std::string JDH((std::string)"std::string");
std::string JDI((std::string)"std::string");
std::string JDJ((std::string)"std::string");
std::string JEA((std::string)"std::string");
std::string JEB((std::string)"std::string");
std::string JEC((std::string)"std::string");
std::string JED((std::string)"std::string");
std::string JEE((std::string)"std::string");
std::string JEF((std::string)"std::string");
std::string JEG((std::string)"std::string");
std::string JEH((std::string)"std::string");
std::string JEI((std::string)"std::string");
std::string JEJ((std::string)"std::string");
std::string JFA((std::string)"std::string");
std::string JFB((std::string)"std::string");
std::string JFC((std::string)"std::string");
std::string JFD((std::string)"std::string");
std::string JFE((std::string)"std::string");
std::string JFF((std::string)"std::string");
std::string JFG((std::string)"std::string");
std::string JFH((std::string)"std::string");
std::string JFI((std::string)"std::string");
std::string JFJ((std::string)"std::string");
std::string JGA((std::string)"std::string");
std::string JGB((std::string)"std::string");
std::string JGC((std::string)"std::string");
std::string JGD((std::string)"std::string");
std::string JGE((std::string)"std::string");
std::string JGF((std::string)"std::string");
std::string JGG((std::string)"std::string");
std::string JGH((std::string)"std::string");
std::string JGI((std::string)"std::string");
std::string JGJ((std::string)"std::string");
std::string JHA((std::string)"std::string");
std::string JHB((std::string)"std::string");
std::string JHC((std::string)"std::string");
std::string JHD((std::string)"std::string");
std::string JHE((std::string)"std::string");
std::string JHF((std::string)"std::string");
std::string JHG((std::string)"std::string");
std::string JHH((std::string)"std::string");
std::string JHI((std::string)"std::string");
std::string JHJ((std::string)"std::string");
std::string JIA((std::string)"std::string");
std::string JIB((std::string)"std::string");
std::string JIC((std::string)"std::string");
std::string JID((std::string)"std::string");
std::string JIE((std::string)"std::string");
std::string JIF((std::string)"std::string");
std::string JIG((std::string)"std::string");
std::string JIH((std::string)"std::string");
std::string JII((std::string)"std::string");
std::string JIJ((std::string)"std::string");
std::string JJA((std::string)"std::string");
std::string JJB((std::string)"std::string");
std::string JJC((std::string)"std::string");
std::string JJD((std::string)"std::string");
std::string JJE((std::string)"std::string");
std::string JJF((std::string)"std::string");
std::string JJG((std::string)"std::string");
std::string JJH((std::string)"std::string");
std::string JJI((std::string)"std::string");
std::string JJJ((std::string)"std::string");
std::string BAAA((std::string)"std::string");
std::string BAAB((std::string)"std::string");
std::string BAAC((std::string)"std::string");
std::string BAAD((std::string)"std::string");
std::string BAAE((std::string)"std::string");
std::string BAAF((std::string)"std::string");
std::string BAAG((std::string)"std::string");
std::string BAAH((std::string)"std::string");
std::string BAAI((std::string)"std::string");
std::string BAAJ((std::string)"std::string");
std::string BABA((std::string)"std::string");
std::string BABB((std::string)"std::string");
std::string BABC((std::string)"std::string");
std::string BABD((std::string)"std::string");
std::string BABE((std::string)"std::string");
std::string BABF((std::string)"std::string");
std::string BABG((std::string)"std::string");
std::string BABH((std::string)"std::string");
std::string BABI((std::string)"std::string");
std::string BABJ((std::string)"std::string");
std::string BACA((std::string)"std::string");
std::string BACB((std::string)"std::string");
std::string BACC((std::string)"std::string");
std::string BACD((std::string)"std::string");
std::string BACE((std::string)"std::string");
std::string BACF((std::string)"std::string");
std::string BACG((std::string)"std::string");
std::string BACH((std::string)"std::string");
std::string BACI((std::string)"std::string");
std::string BACJ((std::string)"std::string");
std::string BADA((std::string)"std::string");
std::string BADB((std::string)"std::string");
std::string BADC((std::string)"std::string");
std::string BADD((std::string)"std::string");
std::string BADE((std::string)"std::string");
std::string BADF((std::string)"std::string");
std::string BADG((std::string)"std::string");
std::string BADH((std::string)"std::string");
std::string BADI((std::string)"std::string");
std::string BADJ((std::string)"std::string");
std::string BAEA((std::string)"std::string");
std::string BAEB((std::string)"std::string");
std::string BAEC((std::string)"std::string");
std::string BAED((std::string)"std::string");
std::string BAEE((std::string)"std::string");
std::string BAEF((std::string)"std::string");
std::string BAEG((std::string)"std::string");
std::string BAEH((std::string)"std::string");
std::string BAEI((std::string)"std::string");
std::string BAEJ((std::string)"std::string");
std::string BAFA((std::string)"std::string");
std::string BAFB((std::string)"std::string");
std::string BAFC((std::string)"std::string");
std::string BAFD((std::string)"std::string");
std::string BAFE((std::string)"std::string");
std::string BAFF((std::string)"std::string");
std::string BAFG((std::string)"std::string");
std::string BAFH((std::string)"std::string");
std::string BAFI((std::string)"std::string");
std::string BAFJ((std::string)"std::string");
std::string BAGA((std::string)"std::string");
std::string BAGB((std::string)"std::string");
std::string BAGC((std::string)"std::string");
std::string BAGD((std::string)"std::string");
std::string BAGE((std::string)"std::string");
std::string BAGF((std::string)"std::string");
std::string BAGG((std::string)"std::string");
std::string BAGH((std::string)"std::string");
std::string BAGI((std::string)"std::string");
std::string BAGJ((std::string)"std::string");
std::string BAHA((std::string)"std::string");
std::string BAHB((std::string)"std::string");
std::string BAHC((std::string)"std::string");
std::string BAHD((std::string)"std::string");
std::string BAHE((std::string)"std::string");
std::string BAHF((std::string)"std::string");
std::string BAHG((std::string)"std::string");
std::string BAHH((std::string)"std::string");
std::string BAHI((std::string)"std::string");
std::string BAHJ((std::string)"std::string");
std::string BAIA((std::string)"std::string");
std::string BAIB((std::string)"std::string");
std::string BAIC((std::string)"std::string");
std::string BAID((std::string)"std::string");
std::string BAIE((std::string)"std::string");
std::string BAIF((std::string)"std::string");
std::string BAIG((std::string)"std::string");
std::string BAIH((std::string)"std::string");
std::string BAII((std::string)"std::string");
std::string BAIJ((std::string)"std::string");
std::string BAJA((std::string)"std::string");
std::string BAJB((std::string)"std::string");
std::string BAJC((std::string)"std::string");
std::string BAJD((std::string)"std::string");
std::string BAJE((std::string)"std::string");
std::string BAJF((std::string)"std::string");
std::string BAJG((std::string)"std::string");
std::string BAJH((std::string)"std::string");
std::string BAJI((std::string)"std::string");
std::string BAJJ((std::string)"std::string");
std::string BBAA((std::string)"std::string");
std::string BBAB((std::string)"std::string");
std::string BBAC((std::string)"std::string");
std::string BBAD((std::string)"std::string");
std::string BBAE((std::string)"std::string");
std::string BBAF((std::string)"std::string");
std::string BBAG((std::string)"std::string");
std::string BBAH((std::string)"std::string");
std::string BBAI((std::string)"std::string");
std::string BBAJ((std::string)"std::string");
std::string BBBA((std::string)"std::string");
std::string BBBB((std::string)"std::string");
std::string BBBC((std::string)"std::string");
std::string BBBD((std::string)"std::string");
std::string BBBE((std::string)"std::string");
std::string BBBF((std::string)"std::string");
std::string BBBG((std::string)"std::string");
std::string BBBH((std::string)"std::string");
std::string BBBI((std::string)"std::string");
std::string BBBJ((std::string)"std::string");
std::string BBCA((std::string)"std::string");
std::string BBCB((std::string)"std::string");
std::string BBCC((std::string)"std::string");
std::string BBCD((std::string)"std::string");
std::string BBCE((std::string)"std::string");
std::string BBCF((std::string)"std::string");
std::string BBCG((std::string)"std::string");
std::string BBCH((std::string)"std::string");
std::string BBCI((std::string)"std::string");
std::string BBCJ((std::string)"std::string");
std::string BBDA((std::string)"std::string");
std::string BBDB((std::string)"std::string");
std::string BBDC((std::string)"std::string");
std::string BBDD((std::string)"std::string");
std::string BBDE((std::string)"std::string");
std::string BBDF((std::string)"std::string");
std::string BBDG((std::string)"std::string");
std::string BBDH((std::string)"std::string");
std::string BBDI((std::string)"std::string");
std::string BBDJ((std::string)"std::string");
std::string BBEA((std::string)"std::string");
std::string BBEB((std::string)"std::string");
std::string BBEC((std::string)"std::string");
std::string BBED((std::string)"std::string");
std::string BBEE((std::string)"std::string");
std::string BBEF((std::string)"std::string");
std::string BBEG((std::string)"std::string");
std::string BBEH((std::string)"std::string");
std::string BBEI((std::string)"std::string");
std::string BBEJ((std::string)"std::string");
std::string BBFA((std::string)"std::string");
std::string BBFB((std::string)"std::string");
std::string BBFC((std::string)"std::string");
std::string BBFD((std::string)"std::string");
std::string BBFE((std::string)"std::string");
std::string BBFF((std::string)"std::string");
std::string BBFG((std::string)"std::string");
std::string BBFH((std::string)"std::string");
std::string BBFI((std::string)"std::string");
std::string BBFJ((std::string)"std::string");
std::string BBGA((std::string)"std::string");
std::string BBGB((std::string)"std::string");
std::string BBGC((std::string)"std::string");
std::string BBGD((std::string)"std::string");
std::string BBGE((std::string)"std::string");
std::string BBGF((std::string)"std::string");
std::string BBGG((std::string)"std::string");
std::string BBGH((std::string)"std::string");
std::string BBGI((std::string)"std::string");
std::string BBGJ((std::string)"std::string");
std::string BBHA((std::string)"std::string");
std::string BBHB((std::string)"std::string");
std::string BBHC((std::string)"std::string");
std::string BBHD((std::string)"std::string");
std::string BBHE((std::string)"std::string");
std::string BBHF((std::string)"std::string");
std::string BBHG((std::string)"std::string");
std::string BBHH((std::string)"std::string");
std::string BBHI((std::string)"std::string");
std::string BBHJ((std::string)"std::string");
std::string BBIA((std::string)"std::string");
std::string BBIB((std::string)"std::string");
std::string BBIC((std::string)"std::string");
std::string BBID((std::string)"std::string");
std::string BBIE((std::string)"std::string");
std::string BBIF((std::string)"std::string");
std::string BBIG((std::string)"std::string");
std::string BBIH((std::string)"std::string");
std::string BBII((std::string)"std::string");
std::string BBIJ((std::string)"std::string");
std::string BBJA((std::string)"std::string");
std::string BBJB((std::string)"std::string");
std::string BBJC((std::string)"std::string");
std::string BBJD((std::string)"std::string");
std::string BBJE((std::string)"std::string");
std::string BBJF((std::string)"std::string");
std::string BBJG((std::string)"std::string");
std::string BBJH((std::string)"std::string");
std::string BBJI((std::string)"std::string");
std::string BBJJ((std::string)"std::string");
std::string BCAA((std::string)"std::string");
std::string BCAB((std::string)"std::string");
std::string BCAC((std::string)"std::string");
std::string BCAD((std::string)"std::string");
std::string BCAE((std::string)"std::string");
std::string BCAF((std::string)"std::string");
std::string BCAG((std::string)"std::string");
std::string BCAH((std::string)"std::string");
std::string BCAI((std::string)"std::string");
std::string BCAJ((std::string)"std::string");
std::string BCBA((std::string)"std::string");
std::string BCBB((std::string)"std::string");
std::string BCBC((std::string)"std::string");
std::string BCBD((std::string)"std::string");
std::string BCBE((std::string)"std::string");
std::string BCBF((std::string)"std::string");
std::string BCBG((std::string)"std::string");
std::string BCBH((std::string)"std::string");
std::string BCBI((std::string)"std::string");
std::string BCBJ((std::string)"std::string");
std::string BCCA((std::string)"std::string");
std::string BCCB((std::string)"std::string");
std::string BCCC((std::string)"std::string");
std::string BCCD((std::string)"std::string");
std::string BCCE((std::string)"std::string");
std::string BCCF((std::string)"std::string");
std::string BCCG((std::string)"std::string");
std::string BCCH((std::string)"std::string");
std::string BCCI((std::string)"std::string");
std::string BCCJ((std::string)"std::string");
std::string BCDA((std::string)"std::string");
std::string BCDB((std::string)"std::string");
std::string BCDC((std::string)"std::string");
std::string BCDD((std::string)"std::string");
std::string BCDE((std::string)"std::string");
std::string BCDF((std::string)"std::string");
std::string BCDG((std::string)"std::string");
std::string BCDH((std::string)"std::string");
std::string BCDI((std::string)"std::string");
std::string BCDJ((std::string)"std::string");
std::string BCEA((std::string)"std::string");
std::string BCEB((std::string)"std::string");
std::string BCEC((std::string)"std::string");
std::string BCED((std::string)"std::string");
std::string BCEE((std::string)"std::string");
std::string BCEF((std::string)"std::string");
std::string BCEG((std::string)"std::string");
std::string BCEH((std::string)"std::string");
std::string BCEI((std::string)"std::string");
std::string BCEJ((std::string)"std::string");
std::string BCFA((std::string)"std::string");
std::string BCFB((std::string)"std::string");
std::string BCFC((std::string)"std::string");
std::string BCFD((std::string)"std::string");
std::string BCFE((std::string)"std::string");
std::string BCFF((std::string)"std::string");
std::string BCFG((std::string)"std::string");
std::string BCFH((std::string)"std::string");
std::string BCFI((std::string)"std::string");
std::string BCFJ((std::string)"std::string");
std::string BCGA((std::string)"std::string");
std::string BCGB((std::string)"std::string");
std::string BCGC((std::string)"std::string");
std::string BCGD((std::string)"std::string");
std::string BCGE((std::string)"std::string");
std::string BCGF((std::string)"std::string");
std::string BCGG((std::string)"std::string");
std::string BCGH((std::string)"std::string");
std::string BCGI((std::string)"std::string");
std::string BCGJ((std::string)"std::string");
std::string BCHA((std::string)"std::string");
std::string BCHB((std::string)"std::string");
std::string BCHC((std::string)"std::string");
std::string BCHD((std::string)"std::string");
std::string BCHE((std::string)"std::string");
std::string BCHF((std::string)"std::string");
std::string BCHG((std::string)"std::string");
std::string BCHH((std::string)"std::string");
std::string BCHI((std::string)"std::string");
std::string BCHJ((std::string)"std::string");
std::string BCIA((std::string)"std::string");
std::string BCIB((std::string)"std::string");
std::string BCIC((std::string)"std::string");
std::string BCID((std::string)"std::string");
std::string BCIE((std::string)"std::string");
std::string BCIF((std::string)"std::string");
std::string BCIG((std::string)"std::string");
std::string BCIH((std::string)"std::string");
std::string BCII((std::string)"std::string");
std::string BCIJ((std::string)"std::string");
std::string BCJA((std::string)"std::string");
std::string BCJB((std::string)"std::string");
std::string BCJC((std::string)"std::string");
std::string BCJD((std::string)"std::string");
std::string BCJE((std::string)"std::string");
std::string BCJF((std::string)"std::string");
std::string BCJG((std::string)"std::string");
std::string BCJH((std::string)"std::string");
std::string BCJI((std::string)"std::string");
std::string BCJJ((std::string)"std::string");
std::string BDAA((std::string)"std::string");
std::string BDAB((std::string)"std::string");
std::string BDAC((std::string)"std::string");
std::string BDAD((std::string)"std::string");
std::string BDAE((std::string)"std::string");
std::string BDAF((std::string)"std::string");
std::string BDAG((std::string)"std::string");
std::string BDAH((std::string)"std::string");
std::string BDAI((std::string)"std::string");
std::string BDAJ((std::string)"std::string");
std::string BDBA((std::string)"std::string");
std::string BDBB((std::string)"std::string");
std::string BDBC((std::string)"std::string");
std::string BDBD((std::string)"std::string");
std::string BDBE((std::string)"std::string");
std::string BDBF((std::string)"std::string");
std::string BDBG((std::string)"std::string");
std::string BDBH((std::string)"std::string");
std::string BDBI((std::string)"std::string");
std::string BDBJ((std::string)"std::string");
std::string BDCA((std::string)"std::string");
std::string BDCB((std::string)"std::string");
std::string BDCC((std::string)"std::string");
std::string BDCD((std::string)"std::string");
std::string BDCE((std::string)"std::string");
std::string BDCF((std::string)"std::string");
std::string BDCG((std::string)"std::string");
std::string BDCH((std::string)"std::string");
std::string BDCI((std::string)"std::string");
std::string BDCJ((std::string)"std::string");
std::string BDDA((std::string)"std::string");
std::string BDDB((std::string)"std::string");
std::string BDDC((std::string)"std::string");
std::string BDDD((std::string)"std::string");
std::string BDDE((std::string)"std::string");
std::string BDDF((std::string)"std::string");
std::string BDDG((std::string)"std::string");
std::string BDDH((std::string)"std::string");
std::string BDDI((std::string)"std::string");
std::string BDDJ((std::string)"std::string");
std::string BDEA((std::string)"std::string");
std::string BDEB((std::string)"std::string");
std::string BDEC((std::string)"std::string");
std::string BDED((std::string)"std::string");
std::string BDEE((std::string)"std::string");
std::string BDEF((std::string)"std::string");
std::string BDEG((std::string)"std::string");
std::string BDEH((std::string)"std::string");
std::string BDEI((std::string)"std::string");
std::string BDEJ((std::string)"std::string");
std::string BDFA((std::string)"std::string");
std::string BDFB((std::string)"std::string");
std::string BDFC((std::string)"std::string");
std::string BDFD((std::string)"std::string");
std::string BDFE((std::string)"std::string");
std::string BDFF((std::string)"std::string");
std::string BDFG((std::string)"std::string");
std::string BDFH((std::string)"std::string");
std::string BDFI((std::string)"std::string");
std::string BDFJ((std::string)"std::string");
std::string BDGA((std::string)"std::string");
std::string BDGB((std::string)"std::string");
std::string BDGC((std::string)"std::string");
std::string BDGD((std::string)"std::string");
std::string BDGE((std::string)"std::string");
std::string BDGF((std::string)"std::string");
std::string BDGG((std::string)"std::string");
std::string BDGH((std::string)"std::string");
std::string BDGI((std::string)"std::string");
std::string BDGJ((std::string)"std::string");
std::string BDHA((std::string)"std::string");
std::string BDHB((std::string)"std::string");
std::string BDHC((std::string)"std::string");
std::string BDHD((std::string)"std::string");
std::string BDHE((std::string)"std::string");
std::string BDHF((std::string)"std::string");
std::string BDHG((std::string)"std::string");
std::string BDHH((std::string)"std::string");
std::string BDHI((std::string)"std::string");
std::string BDHJ((std::string)"std::string");
std::string BDIA((std::string)"std::string");
std::string BDIB((std::string)"std::string");
std::string BDIC((std::string)"std::string");
std::string BDID((std::string)"std::string");
std::string BDIE((std::string)"std::string");
std::string BDIF((std::string)"std::string");
std::string BDIG((std::string)"std::string");
std::string BDIH((std::string)"std::string");
std::string BDII((std::string)"std::string");
std::string BDIJ((std::string)"std::string");
std::string BDJA((std::string)"std::string");
std::string BDJB((std::string)"std::string");
std::string BDJC((std::string)"std::string");
std::string BDJD((std::string)"std::string");
std::string BDJE((std::string)"std::string");
std::string BDJF((std::string)"std::string");
std::string BDJG((std::string)"std::string");
std::string BDJH((std::string)"std::string");
std::string BDJI((std::string)"std::string");
std::string BDJJ((std::string)"std::string");
std::string BEAA((std::string)"std::string");
std::string BEAB((std::string)"std::string");
std::string BEAC((std::string)"std::string");
std::string BEAD((std::string)"std::string");
std::string BEAE((std::string)"std::string");
std::string BEAF((std::string)"std::string");
std::string BEAG((std::string)"std::string");
std::string BEAH((std::string)"std::string");
std::string BEAI((std::string)"std::string");
std::string BEAJ((std::string)"std::string");
std::string BEBA((std::string)"std::string");
std::string BEBB((std::string)"std::string");
std::string BEBC((std::string)"std::string");
std::string BEBD((std::string)"std::string");
std::string BEBE((std::string)"std::string");
std::string BEBF((std::string)"std::string");
std::string BEBG((std::string)"std::string");
std::string BEBH((std::string)"std::string");
std::string BEBI((std::string)"std::string");
std::string BEBJ((std::string)"std::string");
std::string BECA((std::string)"std::string");
std::string BECB((std::string)"std::string");
std::string BECC((std::string)"std::string");
std::string BECD((std::string)"std::string");
std::string BECE((std::string)"std::string");
std::string BECF((std::string)"std::string");
std::string BECG((std::string)"std::string");
std::string BECH((std::string)"std::string");
std::string BECI((std::string)"std::string");
std::string BECJ((std::string)"std::string");
std::string BEDA((std::string)"std::string");
std::string BEDB((std::string)"std::string");
std::string BEDC((std::string)"std::string");
std::string BEDD((std::string)"std::string");
std::string BEDE((std::string)"std::string");
std::string BEDF((std::string)"std::string");
std::string BEDG((std::string)"std::string");
std::string BEDH((std::string)"std::string");
std::string BEDI((std::string)"std::string");
std::string BEDJ((std::string)"std::string");
std::string BEEA((std::string)"std::string");
std::string BEEB((std::string)"std::string");
std::string BEEC((std::string)"std::string");
std::string BEED((std::string)"std::string");
std::string BEEE((std::string)"std::string");
std::string BEEF((std::string)"std::string");
std::string BEEG((std::string)"std::string");
std::string BEEH((std::string)"std::string");
std::string BEEI((std::string)"std::string");
std::string BEEJ((std::string)"std::string");
std::string BEFA((std::string)"std::string");
std::string BEFB((std::string)"std::string");
std::string BEFC((std::string)"std::string");
std::string BEFD((std::string)"std::string");
std::string BEFE((std::string)"std::string");
std::string BEFF((std::string)"std::string");
std::string BEFG((std::string)"std::string");
std::string BEFH((std::string)"std::string");
std::string BEFI((std::string)"std::string");
std::string BEFJ((std::string)"std::string");
std::string BEGA((std::string)"std::string");
std::string BEGB((std::string)"std::string");
std::string BEGC((std::string)"std::string");
std::string BEGD((std::string)"std::string");
std::string BEGE((std::string)"std::string");
std::string BEGF((std::string)"std::string");
std::string BEGG((std::string)"std::string");
std::string BEGH((std::string)"std::string");
std::string BEGI((std::string)"std::string");
std::string BEGJ((std::string)"std::string");
std::string BEHA((std::string)"std::string");
std::string BEHB((std::string)"std::string");
std::string BEHC((std::string)"std::string");
std::string BEHD((std::string)"std::string");
std::string BEHE((std::string)"std::string");
std::string BEHF((std::string)"std::string");
std::string BEHG((std::string)"std::string");
std::string BEHH((std::string)"std::string");
std::string BEHI((std::string)"std::string");
std::string BEHJ((std::string)"std::string");
std::string BEIA((std::string)"std::string");
std::string BEIB((std::string)"std::string");
std::string BEIC((std::string)"std::string");
std::string BEID((std::string)"std::string");
std::string BEIE((std::string)"std::string");
std::string BEIF((std::string)"std::string");
std::string BEIG((std::string)"std::string");
std::string BEIH((std::string)"std::string");
std::string BEII((std::string)"std::string");
std::string BEIJ((std::string)"std::string");
std::string BEJA((std::string)"std::string");
std::string BEJB((std::string)"std::string");
std::string BEJC((std::string)"std::string");
std::string BEJD((std::string)"std::string");
std::string BEJE((std::string)"std::string");
std::string BEJF((std::string)"std::string");
std::string BEJG((std::string)"std::string");
std::string BEJH((std::string)"std::string");
std::string BEJI((std::string)"std::string");
std::string BEJJ((std::string)"std::string");
std::string BFAA((std::string)"std::string");
std::string BFAB((std::string)"std::string");
std::string BFAC((std::string)"std::string");
std::string BFAD((std::string)"std::string");
std::string BFAE((std::string)"std::string");
std::string BFAF((std::string)"std::string");
std::string BFAG((std::string)"std::string");
std::string BFAH((std::string)"std::string");
std::string BFAI((std::string)"std::string");
std::string BFAJ((std::string)"std::string");
std::string BFBA((std::string)"std::string");
std::string BFBB((std::string)"std::string");
std::string BFBC((std::string)"std::string");
std::string BFBD((std::string)"std::string");
std::string BFBE((std::string)"std::string");
std::string BFBF((std::string)"std::string");
std::string BFBG((std::string)"std::string");
std::string BFBH((std::string)"std::string");
std::string BFBI((std::string)"std::string");
std::string BFBJ((std::string)"std::string");
std::string BFCA((std::string)"std::string");
std::string BFCB((std::string)"std::string");
std::string BFCC((std::string)"std::string");
std::string BFCD((std::string)"std::string");
std::string BFCE((std::string)"std::string");
std::string BFCF((std::string)"std::string");
std::string BFCG((std::string)"std::string");
std::string BFCH((std::string)"std::string");
std::string BFCI((std::string)"std::string");
std::string BFCJ((std::string)"std::string");
std::string BFDA((std::string)"std::string");
std::string BFDB((std::string)"std::string");
std::string BFDC((std::string)"std::string");
std::string BFDD((std::string)"std::string");
std::string BFDE((std::string)"std::string");
std::string BFDF((std::string)"std::string");
std::string BFDG((std::string)"std::string");
std::string BFDH((std::string)"std::string");
std::string BFDI((std::string)"std::string");
std::string BFDJ((std::string)"std::string");
std::string BFEA((std::string)"std::string");
std::string BFEB((std::string)"std::string");
std::string BFEC((std::string)"std::string");
std::string BFED((std::string)"std::string");
std::string BFEE((std::string)"std::string");
std::string BFEF((std::string)"std::string");
std::string BFEG((std::string)"std::string");
std::string BFEH((std::string)"std::string");
std::string BFEI((std::string)"std::string");
std::string BFEJ((std::string)"std::string");
std::string BFFA((std::string)"std::string");
std::string BFFB((std::string)"std::string");
std::string BFFC((std::string)"std::string");
std::string BFFD((std::string)"std::string");
std::string BFFE((std::string)"std::string");
std::string BFFF((std::string)"std::string");
std::string BFFG((std::string)"std::string");
std::string BFFH((std::string)"std::string");
std::string BFFI((std::string)"std::string");
std::string BFFJ((std::string)"std::string");
std::string BFGA((std::string)"std::string");
std::string BFGB((std::string)"std::string");
std::string BFGC((std::string)"std::string");
std::string BFGD((std::string)"std::string");
std::string BFGE((std::string)"std::string");
std::string BFGF((std::string)"std::string");
std::string BFGG((std::string)"std::string");
std::string BFGH((std::string)"std::string");
std::string BFGI((std::string)"std::string");
std::string BFGJ((std::string)"std::string");
std::string BFHA((std::string)"std::string");
std::string BFHB((std::string)"std::string");
std::string BFHC((std::string)"std::string");
std::string BFHD((std::string)"std::string");
std::string BFHE((std::string)"std::string");
std::string BFHF((std::string)"std::string");
std::string BFHG((std::string)"std::string");
std::string BFHH((std::string)"std::string");
std::string BFHI((std::string)"std::string");
std::string BFHJ((std::string)"std::string");
std::string BFIA((std::string)"std::string");
std::string BFIB((std::string)"std::string");
std::string BFIC((std::string)"std::string");
std::string BFID((std::string)"std::string");
std::string BFIE((std::string)"std::string");
std::string BFIF((std::string)"std::string");
std::string BFIG((std::string)"std::string");
std::string BFIH((std::string)"std::string");
std::string BFII((std::string)"std::string");
std::string BFIJ((std::string)"std::string");
std::string BFJA((std::string)"std::string");
std::string BFJB((std::string)"std::string");
std::string BFJC((std::string)"std::string");
std::string BFJD((std::string)"std::string");
std::string BFJE((std::string)"std::string");
std::string BFJF((std::string)"std::string");
std::string BFJG((std::string)"std::string");
std::string BFJH((std::string)"std::string");
std::string BFJI((std::string)"std::string");
std::string BFJJ((std::string)"std::string");
std::string BGAA((std::string)"std::string");
std::string BGAB((std::string)"std::string");
std::string BGAC((std::string)"std::string");
std::string BGAD((std::string)"std::string");
std::string BGAE((std::string)"std::string");
std::string BGAF((std::string)"std::string");
std::string BGAG((std::string)"std::string");
std::string BGAH((std::string)"std::string");
std::string BGAI((std::string)"std::string");
std::string BGAJ((std::string)"std::string");
std::string BGBA((std::string)"std::string");
std::string BGBB((std::string)"std::string");
std::string BGBC((std::string)"std::string");
std::string BGBD((std::string)"std::string");
std::string BGBE((std::string)"std::string");
std::string BGBF((std::string)"std::string");
std::string BGBG((std::string)"std::string");
std::string BGBH((std::string)"std::string");
std::string BGBI((std::string)"std::string");
std::string BGBJ((std::string)"std::string");
std::string BGCA((std::string)"std::string");
std::string BGCB((std::string)"std::string");
std::string BGCC((std::string)"std::string");
std::string BGCD((std::string)"std::string");
std::string BGCE((std::string)"std::string");
std::string BGCF((std::string)"std::string");
std::string BGCG((std::string)"std::string");
std::string BGCH((std::string)"std::string");
std::string BGCI((std::string)"std::string");
std::string BGCJ((std::string)"std::string");
std::string BGDA((std::string)"std::string");
std::string BGDB((std::string)"std::string");
std::string BGDC((std::string)"std::string");
std::string BGDD((std::string)"std::string");
std::string BGDE((std::string)"std::string");
std::string BGDF((std::string)"std::string");
std::string BGDG((std::string)"std::string");
std::string BGDH((std::string)"std::string");
std::string BGDI((std::string)"std::string");
std::string BGDJ((std::string)"std::string");
std::string BGEA((std::string)"std::string");
std::string BGEB((std::string)"std::string");
std::string BGEC((std::string)"std::string");
std::string BGED((std::string)"std::string");
std::string BGEE((std::string)"std::string");
std::string BGEF((std::string)"std::string");
std::string BGEG((std::string)"std::string");
std::string BGEH((std::string)"std::string");
std::string BGEI((std::string)"std::string");
std::string BGEJ((std::string)"std::string");
std::string BGFA((std::string)"std::string");
std::string BGFB((std::string)"std::string");
std::string BGFC((std::string)"std::string");
std::string BGFD((std::string)"std::string");
std::string BGFE((std::string)"std::string");
std::string BGFF((std::string)"std::string");
std::string BGFG((std::string)"std::string");
std::string BGFH((std::string)"std::string");
std::string BGFI((std::string)"std::string");
std::string BGFJ((std::string)"std::string");
std::string BGGA((std::string)"std::string");
std::string BGGB((std::string)"std::string");
std::string BGGC((std::string)"std::string");
std::string BGGD((std::string)"std::string");
std::string BGGE((std::string)"std::string");
std::string BGGF((std::string)"std::string");
std::string BGGG((std::string)"std::string");
std::string BGGH((std::string)"std::string");
std::string BGGI((std::string)"std::string");
std::string BGGJ((std::string)"std::string");
std::string BGHA((std::string)"std::string");
std::string BGHB((std::string)"std::string");
std::string BGHC((std::string)"std::string");
std::string BGHD((std::string)"std::string");
std::string BGHE((std::string)"std::string");
std::string BGHF((std::string)"std::string");
std::string BGHG((std::string)"std::string");
std::string BGHH((std::string)"std::string");
std::string BGHI((std::string)"std::string");
std::string BGHJ((std::string)"std::string");
std::string BGIA((std::string)"std::string");
std::string BGIB((std::string)"std::string");
std::string BGIC((std::string)"std::string");
std::string BGID((std::string)"std::string");
std::string BGIE((std::string)"std::string");
std::string BGIF((std::string)"std::string");
std::string BGIG((std::string)"std::string");
std::string BGIH((std::string)"std::string");
std::string BGII((std::string)"std::string");
std::string BGIJ((std::string)"std::string");
std::string BGJA((std::string)"std::string");
std::string BGJB((std::string)"std::string");
std::string BGJC((std::string)"std::string");
std::string BGJD((std::string)"std::string");
std::string BGJE((std::string)"std::string");
std::string BGJF((std::string)"std::string");
std::string BGJG((std::string)"std::string");
std::string BGJH((std::string)"std::string");
std::string BGJI((std::string)"std::string");
std::string BGJJ((std::string)"std::string");
std::string BHAA((std::string)"std::string");
std::string BHAB((std::string)"std::string");
std::string BHAC((std::string)"std::string");
std::string BHAD((std::string)"std::string");
std::string BHAE((std::string)"std::string");
std::string BHAF((std::string)"std::string");
std::string BHAG((std::string)"std::string");
std::string BHAH((std::string)"std::string");
std::string BHAI((std::string)"std::string");
std::string BHAJ((std::string)"std::string");
std::string BHBA((std::string)"std::string");
std::string BHBB((std::string)"std::string");
std::string BHBC((std::string)"std::string");
std::string BHBD((std::string)"std::string");
std::string BHBE((std::string)"std::string");
std::string BHBF((std::string)"std::string");
std::string BHBG((std::string)"std::string");
std::string BHBH((std::string)"std::string");
std::string BHBI((std::string)"std::string");
std::string BHBJ((std::string)"std::string");
std::string BHCA((std::string)"std::string");
std::string BHCB((std::string)"std::string");
std::string BHCC((std::string)"std::string");
std::string BHCD((std::string)"std::string");
std::string BHCE((std::string)"std::string");
std::string BHCF((std::string)"std::string");
std::string BHCG((std::string)"std::string");
std::string BHCH((std::string)"std::string");
std::string BHCI((std::string)"std::string");
std::string BHCJ((std::string)"std::string");
std::string BHDA((std::string)"std::string");
std::string BHDB((std::string)"std::string");
std::string BHDC((std::string)"std::string");
std::string BHDD((std::string)"std::string");
std::string BHDE((std::string)"std::string");
std::string BHDF((std::string)"std::string");
std::string BHDG((std::string)"std::string");
std::string BHDH((std::string)"std::string");
std::string BHDI((std::string)"std::string");
std::string BHDJ((std::string)"std::string");
std::string BHEA((std::string)"std::string");
std::string BHEB((std::string)"std::string");
std::string BHEC((std::string)"std::string");
std::string BHED((std::string)"std::string");
std::string BHEE((std::string)"std::string");
std::string BHEF((std::string)"std::string");
std::string BHEG((std::string)"std::string");
std::string BHEH((std::string)"std::string");
std::string BHEI((std::string)"std::string");
std::string BHEJ((std::string)"std::string");
std::string BHFA((std::string)"std::string");
std::string BHFB((std::string)"std::string");
std::string BHFC((std::string)"std::string");
std::string BHFD((std::string)"std::string");
std::string BHFE((std::string)"std::string");
std::string BHFF((std::string)"std::string");
std::string BHFG((std::string)"std::string");
std::string BHFH((std::string)"std::string");
std::string BHFI((std::string)"std::string");
std::string BHFJ((std::string)"std::string");
std::string BHGA((std::string)"std::string");
std::string BHGB((std::string)"std::string");
std::string BHGC((std::string)"std::string");
std::string BHGD((std::string)"std::string");
std::string BHGE((std::string)"std::string");
std::string BHGF((std::string)"std::string");
std::string BHGG((std::string)"std::string");
std::string BHGH((std::string)"std::string");
std::string BHGI((std::string)"std::string");
std::string BHGJ((std::string)"std::string");
std::string BHHA((std::string)"std::string");
std::string BHHB((std::string)"std::string");
std::string BHHC((std::string)"std::string");
std::string BHHD((std::string)"std::string");
std::string BHHE((std::string)"std::string");
std::string BHHF((std::string)"std::string");
std::string BHHG((std::string)"std::string");
std::string BHHH((std::string)"std::string");
std::string BHHI((std::string)"std::string");
std::string BHHJ((std::string)"std::string");
std::string BHIA((std::string)"std::string");
std::string BHIB((std::string)"std::string");
std::string BHIC((std::string)"std::string");
std::string BHID((std::string)"std::string");
std::string BHIE((std::string)"std::string");
std::string BHIF((std::string)"std::string");
std::string BHIG((std::string)"std::string");
std::string BHIH((std::string)"std::string");
std::string BHII((std::string)"std::string");
std::string BHIJ((std::string)"std::string");
std::string BHJA((std::string)"std::string");
std::string BHJB((std::string)"std::string");
std::string BHJC((std::string)"std::string");
std::string BHJD((std::string)"std::string");
std::string BHJE((std::string)"std::string");
std::string BHJF((std::string)"std::string");
std::string BHJG((std::string)"std::string");
std::string BHJH((std::string)"std::string");
std::string BHJI((std::string)"std::string");
std::string BHJJ((std::string)"std::string");
std::string BIAA((std::string)"std::string");
std::string BIAB((std::string)"std::string");
std::string BIAC((std::string)"std::string");
std::string BIAD((std::string)"std::string");
std::string BIAE((std::string)"std::string");
std::string BIAF((std::string)"std::string");
std::string BIAG((std::string)"std::string");
std::string BIAH((std::string)"std::string");
std::string BIAI((std::string)"std::string");
std::string BIAJ((std::string)"std::string");
std::string BIBA((std::string)"std::string");
std::string BIBB((std::string)"std::string");
std::string BIBC((std::string)"std::string");
std::string BIBD((std::string)"std::string");
std::string BIBE((std::string)"std::string");
std::string BIBF((std::string)"std::string");
std::string BIBG((std::string)"std::string");
std::string BIBH((std::string)"std::string");
std::string BIBI((std::string)"std::string");
std::string BIBJ((std::string)"std::string");
std::string BICA((std::string)"std::string");
std::string BICB((std::string)"std::string");
std::string BICC((std::string)"std::string");
std::string BICD((std::string)"std::string");
std::string BICE((std::string)"std::string");
std::string BICF((std::string)"std::string");
std::string BICG((std::string)"std::string");
std::string BICH((std::string)"std::string");
std::string BICI((std::string)"std::string");
std::string BICJ((std::string)"std::string");
std::string BIDA((std::string)"std::string");
std::string BIDB((std::string)"std::string");
std::string BIDC((std::string)"std::string");
std::string BIDD((std::string)"std::string");
std::string BIDE((std::string)"std::string");
std::string BIDF((std::string)"std::string");
std::string BIDG((std::string)"std::string");
std::string BIDH((std::string)"std::string");
std::string BIDI((std::string)"std::string");
std::string BIDJ((std::string)"std::string");
std::string BIEA((std::string)"std::string");
std::string BIEB((std::string)"std::string");
std::string BIEC((std::string)"std::string");
std::string BIED((std::string)"std::string");
std::string BIEE((std::string)"std::string");
std::string BIEF((std::string)"std::string");
std::string BIEG((std::string)"std::string");
std::string BIEH((std::string)"std::string");
std::string BIEI((std::string)"std::string");
std::string BIEJ((std::string)"std::string");
std::string BIFA((std::string)"std::string");
std::string BIFB((std::string)"std::string");
std::string BIFC((std::string)"std::string");
std::string BIFD((std::string)"std::string");
std::string BIFE((std::string)"std::string");
std::string BIFF((std::string)"std::string");
std::string BIFG((std::string)"std::string");
std::string BIFH((std::string)"std::string");
std::string BIFI((std::string)"std::string");
std::string BIFJ((std::string)"std::string");
std::string BIGA((std::string)"std::string");
std::string BIGB((std::string)"std::string");
std::string BIGC((std::string)"std::string");
std::string BIGD((std::string)"std::string");
std::string BIGE((std::string)"std::string");
std::string BIGF((std::string)"std::string");
std::string BIGG((std::string)"std::string");
std::string BIGH((std::string)"std::string");
std::string BIGI((std::string)"std::string");
std::string BIGJ((std::string)"std::string");
std::string BIHA((std::string)"std::string");
std::string BIHB((std::string)"std::string");
std::string BIHC((std::string)"std::string");
std::string BIHD((std::string)"std::string");
std::string BIHE((std::string)"std::string");
std::string BIHF((std::string)"std::string");
std::string BIHG((std::string)"std::string");
std::string BIHH((std::string)"std::string");
std::string BIHI((std::string)"std::string");
std::string BIHJ((std::string)"std::string");
std::string BIIA((std::string)"std::string");
std::string BIIB((std::string)"std::string");
std::string BIIC((std::string)"std::string");
std::string BIID((std::string)"std::string");
std::string BIIE((std::string)"std::string");
std::string BIIF((std::string)"std::string");
std::string BIIG((std::string)"std::string");
std::string BIIH((std::string)"std::string");
std::string BIII((std::string)"std::string");
std::string BIIJ((std::string)"std::string");
std::string BIJA((std::string)"std::string");
std::string BIJB((std::string)"std::string");
std::string BIJC((std::string)"std::string");
std::string BIJD((std::string)"std::string");
std::string BIJE((std::string)"std::string");
std::string BIJF((std::string)"std::string");
std::string BIJG((std::string)"std::string");
std::string BIJH((std::string)"std::string");
std::string BIJI((std::string)"std::string");
std::string BIJJ((std::string)"std::string");
std::string BJAA((std::string)"std::string");
std::string BJAB((std::string)"std::string");
std::string BJAC((std::string)"std::string");
std::string BJAD((std::string)"std::string");
std::string BJAE((std::string)"std::string");
std::string BJAF((std::string)"std::string");
std::string BJAG((std::string)"std::string");
std::string BJAH((std::string)"std::string");
std::string BJAI((std::string)"std::string");
std::string BJAJ((std::string)"std::string");
std::string BJBA((std::string)"std::string");
std::string BJBB((std::string)"std::string");
std::string BJBC((std::string)"std::string");
std::string BJBD((std::string)"std::string");
std::string BJBE((std::string)"std::string");
std::string BJBF((std::string)"std::string");
std::string BJBG((std::string)"std::string");
std::string BJBH((std::string)"std::string");
std::string BJBI((std::string)"std::string");
std::string BJBJ((std::string)"std::string");
std::string BJCA((std::string)"std::string");
std::string BJCB((std::string)"std::string");
std::string BJCC((std::string)"std::string");
std::string BJCD((std::string)"std::string");
std::string BJCE((std::string)"std::string");
std::string BJCF((std::string)"std::string");
std::string BJCG((std::string)"std::string");
std::string BJCH((std::string)"std::string");
std::string BJCI((std::string)"std::string");
std::string BJCJ((std::string)"std::string");
std::string BJDA((std::string)"std::string");
std::string BJDB((std::string)"std::string");
std::string BJDC((std::string)"std::string");
std::string BJDD((std::string)"std::string");
std::string BJDE((std::string)"std::string");
std::string BJDF((std::string)"std::string");
std::string BJDG((std::string)"std::string");
std::string BJDH((std::string)"std::string");
std::string BJDI((std::string)"std::string");
std::string BJDJ((std::string)"std::string");
std::string BJEA((std::string)"std::string");
std::string BJEB((std::string)"std::string");
std::string BJEC((std::string)"std::string");
std::string BJED((std::string)"std::string");
std::string BJEE((std::string)"std::string");
std::string BJEF((std::string)"std::string");
std::string BJEG((std::string)"std::string");
std::string BJEH((std::string)"std::string");
std::string BJEI((std::string)"std::string");
std::string BJEJ((std::string)"std::string");
std::string BJFA((std::string)"std::string");
std::string BJFB((std::string)"std::string");
std::string BJFC((std::string)"std::string");
std::string BJFD((std::string)"std::string");
std::string BJFE((std::string)"std::string");
std::string BJFF((std::string)"std::string");
std::string BJFG((std::string)"std::string");
std::string BJFH((std::string)"std::string");
std::string BJFI((std::string)"std::string");
std::string BJFJ((std::string)"std::string");
std::string BJGA((std::string)"std::string");
std::string BJGB((std::string)"std::string");
std::string BJGC((std::string)"std::string");
std::string BJGD((std::string)"std::string");
std::string BJGE((std::string)"std::string");
std::string BJGF((std::string)"std::string");
std::string BJGG((std::string)"std::string");
std::string BJGH((std::string)"std::string");
std::string BJGI((std::string)"std::string");
std::string BJGJ((std::string)"std::string");
std::string BJHA((std::string)"std::string");
std::string BJHB((std::string)"std::string");
std::string BJHC((std::string)"std::string");
std::string BJHD((std::string)"std::string");
std::string BJHE((std::string)"std::string");
std::string BJHF((std::string)"std::string");
std::string BJHG((std::string)"std::string");
std::string BJHH((std::string)"std::string");
std::string BJHI((std::string)"std::string");
std::string BJHJ((std::string)"std::string");
std::string BJIA((std::string)"std::string");
std::string BJIB((std::string)"std::string");
std::string BJIC((std::string)"std::string");
std::string BJID((std::string)"std::string");
std::string BJIE((std::string)"std::string");
std::string BJIF((std::string)"std::string");
std::string BJIG((std::string)"std::string");
std::string BJIH((std::string)"std::string");
std::string BJII((std::string)"std::string");
std::string BJIJ((std::string)"std::string");
std::string BJJA((std::string)"std::string");
std::string BJJB((std::string)"std::string");
std::string BJJC((std::string)"std::string");
std::string BJJD((std::string)"std::string");
std::string BJJE((std::string)"std::string");
std::string BJJF((std::string)"std::string");
std::string BJJG((std::string)"std::string");
std::string BJJH((std::string)"std::string");
std::string BJJI((std::string)"std::string");
std::string BJJJ((std::string)"std::string");
std::string CAAA((std::string)"std::string");
std::string CAAB((std::string)"std::string");
std::string CAAC((std::string)"std::string");
std::string CAAD((std::string)"std::string");
std::string CAAE((std::string)"std::string");
std::string CAAF((std::string)"std::string");
std::string CAAG((std::string)"std::string");
std::string CAAH((std::string)"std::string");
std::string CAAI((std::string)"std::string");
std::string CAAJ((std::string)"std::string");
std::string CABA((std::string)"std::string");
std::string CABB((std::string)"std::string");
std::string CABC((std::string)"std::string");
std::string CABD((std::string)"std::string");
std::string CABE((std::string)"std::string");
std::string CABF((std::string)"std::string");
std::string CABG((std::string)"std::string");
std::string CABH((std::string)"std::string");
std::string CABI((std::string)"std::string");
std::string CABJ((std::string)"std::string");
std::string CACA((std::string)"std::string");
std::string CACB((std::string)"std::string");
std::string CACC((std::string)"std::string");
std::string CACD((std::string)"std::string");
std::string CACE((std::string)"std::string");
std::string CACF((std::string)"std::string");
std::string CACG((std::string)"std::string");
std::string CACH((std::string)"std::string");
std::string CACI((std::string)"std::string");
std::string CACJ((std::string)"std::string");
std::string CADA((std::string)"std::string");
std::string CADB((std::string)"std::string");
std::string CADC((std::string)"std::string");
std::string CADD((std::string)"std::string");
std::string CADE((std::string)"std::string");
std::string CADF((std::string)"std::string");
std::string CADG((std::string)"std::string");
std::string CADH((std::string)"std::string");
std::string CADI((std::string)"std::string");
std::string CADJ((std::string)"std::string");
std::string CAEA((std::string)"std::string");
std::string CAEB((std::string)"std::string");
std::string CAEC((std::string)"std::string");
std::string CAED((std::string)"std::string");
std::string CAEE((std::string)"std::string");
std::string CAEF((std::string)"std::string");
std::string CAEG((std::string)"std::string");
std::string CAEH((std::string)"std::string");
std::string CAEI((std::string)"std::string");
std::string CAEJ((std::string)"std::string");
std::string CAFA((std::string)"std::string");
std::string CAFB((std::string)"std::string");
std::string CAFC((std::string)"std::string");
std::string CAFD((std::string)"std::string");
std::string CAFE((std::string)"std::string");
std::string CAFF((std::string)"std::string");
std::string CAFG((std::string)"std::string");
std::string CAFH((std::string)"std::string");
std::string CAFI((std::string)"std::string");
std::string CAFJ((std::string)"std::string");
std::string CAGA((std::string)"std::string");
std::string CAGB((std::string)"std::string");
std::string CAGC((std::string)"std::string");
std::string CAGD((std::string)"std::string");
std::string CAGE((std::string)"std::string");
std::string CAGF((std::string)"std::string");
std::string CAGG((std::string)"std::string");
std::string CAGH((std::string)"std::string");
std::string CAGI((std::string)"std::string");
std::string CAGJ((std::string)"std::string");
std::string CAHA((std::string)"std::string");
std::string CAHB((std::string)"std::string");
std::string CAHC((std::string)"std::string");
std::string CAHD((std::string)"std::string");
std::string CAHE((std::string)"std::string");
std::string CAHF((std::string)"std::string");
std::string CAHG((std::string)"std::string");
std::string CAHH((std::string)"std::string");
std::string CAHI((std::string)"std::string");
std::string CAHJ((std::string)"std::string");
std::string CAIA((std::string)"std::string");
std::string CAIB((std::string)"std::string");
std::string CAIC((std::string)"std::string");
std::string CAID((std::string)"std::string");
std::string CAIE((std::string)"std::string");
std::string CAIF((std::string)"std::string");
std::string CAIG((std::string)"std::string");
std::string CAIH((std::string)"std::string");
std::string CAII((std::string)"std::string");
std::string CAIJ((std::string)"std::string");
std::string CAJA((std::string)"std::string");
std::string CAJB((std::string)"std::string");
std::string CAJC((std::string)"std::string");
std::string CAJD((std::string)"std::string");
std::string CAJE((std::string)"std::string");
std::string CAJF((std::string)"std::string");
std::string CAJG((std::string)"std::string");
std::string CAJH((std::string)"std::string");
std::string CAJI((std::string)"std::string");
std::string CAJJ((std::string)"std::string");
std::string CBAA((std::string)"std::string");
std::string CBAB((std::string)"std::string");
std::string CBAC((std::string)"std::string");
std::string CBAD((std::string)"std::string");
std::string CBAE((std::string)"std::string");
std::string CBAF((std::string)"std::string");
std::string CBAG((std::string)"std::string");
std::string CBAH((std::string)"std::string");
std::string CBAI((std::string)"std::string");
std::string CBAJ((std::string)"std::string");
std::string CBBA((std::string)"std::string");
std::string CBBB((std::string)"std::string");
std::string CBBC((std::string)"std::string");
std::string CBBD((std::string)"std::string");
std::string CBBE((std::string)"std::string");
std::string CBBF((std::string)"std::string");
std::string CBBG((std::string)"std::string");
std::string CBBH((std::string)"std::string");
std::string CBBI((std::string)"std::string");
std::string CBBJ((std::string)"std::string");
std::string CBCA((std::string)"std::string");
std::string CBCB((std::string)"std::string");
std::string CBCC((std::string)"std::string");
std::string CBCD((std::string)"std::string");
std::string CBCE((std::string)"std::string");
std::string CBCF((std::string)"std::string");
std::string CBCG((std::string)"std::string");
std::string CBCH((std::string)"std::string");
std::string CBCI((std::string)"std::string");
std::string CBCJ((std::string)"std::string");
std::string CBDA((std::string)"std::string");
std::string CBDB((std::string)"std::string");
std::string CBDC((std::string)"std::string");
std::string CBDD((std::string)"std::string");
std::string CBDE((std::string)"std::string");
std::string CBDF((std::string)"std::string");
std::string CBDG((std::string)"std::string");
std::string CBDH((std::string)"std::string");
std::string CBDI((std::string)"std::string");
std::string CBDJ((std::string)"std::string");
std::string CBEA((std::string)"std::string");
std::string CBEB((std::string)"std::string");
std::string CBEC((std::string)"std::string");
std::string CBED((std::string)"std::string");
std::string CBEE((std::string)"std::string");
std::string CBEF((std::string)"std::string");
std::string CBEG((std::string)"std::string");
std::string CBEH((std::string)"std::string");
std::string CBEI((std::string)"std::string");
std::string CBEJ((std::string)"std::string");
std::string CBFA((std::string)"std::string");
std::string CBFB((std::string)"std::string");
std::string CBFC((std::string)"std::string");
std::string CBFD((std::string)"std::string");
std::string CBFE((std::string)"std::string");
std::string CBFF((std::string)"std::string");
std::string CBFG((std::string)"std::string");
std::string CBFH((std::string)"std::string");
std::string CBFI((std::string)"std::string");
std::string CBFJ((std::string)"std::string");
std::string CBGA((std::string)"std::string");
std::string CBGB((std::string)"std::string");
std::string CBGC((std::string)"std::string");
std::string CBGD((std::string)"std::string");
std::string CBGE((std::string)"std::string");
std::string CBGF((std::string)"std::string");
std::string CBGG((std::string)"std::string");
std::string CBGH((std::string)"std::string");
std::string CBGI((std::string)"std::string");
std::string CBGJ((std::string)"std::string");
std::string CBHA((std::string)"std::string");
std::string CBHB((std::string)"std::string");
std::string CBHC((std::string)"std::string");
std::string CBHD((std::string)"std::string");
std::string CBHE((std::string)"std::string");
std::string CBHF((std::string)"std::string");
std::string CBHG((std::string)"std::string");
std::string CBHH((std::string)"std::string");
std::string CBHI((std::string)"std::string");
std::string CBHJ((std::string)"std::string");
std::string CBIA((std::string)"std::string");
std::string CBIB((std::string)"std::string");
std::string CBIC((std::string)"std::string");
std::string CBID((std::string)"std::string");
std::string CBIE((std::string)"std::string");
std::string CBIF((std::string)"std::string");
std::string CBIG((std::string)"std::string");
std::string CBIH((std::string)"std::string");
std::string CBII((std::string)"std::string");
std::string CBIJ((std::string)"std::string");
std::string CBJA((std::string)"std::string");
std::string CBJB((std::string)"std::string");
std::string CBJC((std::string)"std::string");
std::string CBJD((std::string)"std::string");
std::string CBJE((std::string)"std::string");
std::string CBJF((std::string)"std::string");
std::string CBJG((std::string)"std::string");
std::string CBJH((std::string)"std::string");
std::string CBJI((std::string)"std::string");
std::string CBJJ((std::string)"std::string");
std::string CCAA((std::string)"std::string");
std::string CCAB((std::string)"std::string");
std::string CCAC((std::string)"std::string");
std::string CCAD((std::string)"std::string");
std::string CCAE((std::string)"std::string");
std::string CCAF((std::string)"std::string");
std::string CCAG((std::string)"std::string");
std::string CCAH((std::string)"std::string");
std::string CCAI((std::string)"std::string");
std::string CCAJ((std::string)"std::string");
std::string CCBA((std::string)"std::string");
std::string CCBB((std::string)"std::string");
std::string CCBC((std::string)"std::string");
std::string CCBD((std::string)"std::string");
std::string CCBE((std::string)"std::string");
std::string CCBF((std::string)"std::string");
std::string CCBG((std::string)"std::string");
std::string CCBH((std::string)"std::string");
std::string CCBI((std::string)"std::string");
std::string CCBJ((std::string)"std::string");
std::string CCCA((std::string)"std::string");
std::string CCCB((std::string)"std::string");
std::string CCCC((std::string)"std::string");
std::string CCCD((std::string)"std::string");
std::string CCCE((std::string)"std::string");
std::string CCCF((std::string)"std::string");
std::string CCCG((std::string)"std::string");
std::string CCCH((std::string)"std::string");
std::string CCCI((std::string)"std::string");
std::string CCCJ((std::string)"std::string");
std::string CCDA((std::string)"std::string");
std::string CCDB((std::string)"std::string");
std::string CCDC((std::string)"std::string");
std::string CCDD((std::string)"std::string");
std::string CCDE((std::string)"std::string");
std::string CCDF((std::string)"std::string");
std::string CCDG((std::string)"std::string");
std::string CCDH((std::string)"std::string");
std::string CCDI((std::string)"std::string");
std::string CCDJ((std::string)"std::string");
std::string CCEA((std::string)"std::string");
std::string CCEB((std::string)"std::string");
std::string CCEC((std::string)"std::string");
std::string CCED((std::string)"std::string");
std::string CCEE((std::string)"std::string");
std::string CCEF((std::string)"std::string");
std::string CCEG((std::string)"std::string");
std::string CCEH((std::string)"std::string");
std::string CCEI((std::string)"std::string");
std::string CCEJ((std::string)"std::string");
std::string CCFA((std::string)"std::string");
std::string CCFB((std::string)"std::string");
std::string CCFC((std::string)"std::string");
std::string CCFD((std::string)"std::string");
std::string CCFE((std::string)"std::string");
std::string CCFF((std::string)"std::string");
std::string CCFG((std::string)"std::string");
std::string CCFH((std::string)"std::string");
std::string CCFI((std::string)"std::string");
std::string CCFJ((std::string)"std::string");
std::string CCGA((std::string)"std::string");
std::string CCGB((std::string)"std::string");
std::string CCGC((std::string)"std::string");
std::string CCGD((std::string)"std::string");
std::string CCGE((std::string)"std::string");
std::string CCGF((std::string)"std::string");
std::string CCGG((std::string)"std::string");
std::string CCGH((std::string)"std::string");
std::string CCGI((std::string)"std::string");
std::string CCGJ((std::string)"std::string");
std::string CCHA((std::string)"std::string");
std::string CCHB((std::string)"std::string");
std::string CCHC((std::string)"std::string");
std::string CCHD((std::string)"std::string");
std::string CCHE((std::string)"std::string");
std::string CCHF((std::string)"std::string");
std::string CCHG((std::string)"std::string");
std::string CCHH((std::string)"std::string");
std::string CCHI((std::string)"std::string");
std::string CCHJ((std::string)"std::string");
std::string CCIA((std::string)"std::string");
std::string CCIB((std::string)"std::string");
std::string CCIC((std::string)"std::string");
std::string CCID((std::string)"std::string");
std::string CCIE((std::string)"std::string");
std::string CCIF((std::string)"std::string");
std::string CCIG((std::string)"std::string");
std::string CCIH((std::string)"std::string");
std::string CCII((std::string)"std::string");
std::string CCIJ((std::string)"std::string");
std::string CCJA((std::string)"std::string");
std::string CCJB((std::string)"std::string");
std::string CCJC((std::string)"std::string");
std::string CCJD((std::string)"std::string");
std::string CCJE((std::string)"std::string");
std::string CCJF((std::string)"std::string");
std::string CCJG((std::string)"std::string");
std::string CCJH((std::string)"std::string");
std::string CCJI((std::string)"std::string");
std::string CCJJ((std::string)"std::string");
std::string CDAA((std::string)"std::string");
std::string CDAB((std::string)"std::string");
std::string CDAC((std::string)"std::string");
std::string CDAD((std::string)"std::string");
std::string CDAE((std::string)"std::string");
std::string CDAF((std::string)"std::string");
std::string CDAG((std::string)"std::string");
std::string CDAH((std::string)"std::string");
std::string CDAI((std::string)"std::string");
std::string CDAJ((std::string)"std::string");
std::string CDBA((std::string)"std::string");
std::string CDBB((std::string)"std::string");
std::string CDBC((std::string)"std::string");
std::string CDBD((std::string)"std::string");
std::string CDBE((std::string)"std::string");
std::string CDBF((std::string)"std::string");
std::string CDBG((std::string)"std::string");
std::string CDBH((std::string)"std::string");
std::string CDBI((std::string)"std::string");
std::string CDBJ((std::string)"std::string");
std::string CDCA((std::string)"std::string");
std::string CDCB((std::string)"std::string");
std::string CDCC((std::string)"std::string");
std::string CDCD((std::string)"std::string");
std::string CDCE((std::string)"std::string");
std::string CDCF((std::string)"std::string");
std::string CDCG((std::string)"std::string");
std::string CDCH((std::string)"std::string");
std::string CDCI((std::string)"std::string");
std::string CDCJ((std::string)"std::string");
std::string CDDA((std::string)"std::string");
std::string CDDB((std::string)"std::string");
std::string CDDC((std::string)"std::string");
std::string CDDD((std::string)"std::string");
std::string CDDE((std::string)"std::string");
std::string CDDF((std::string)"std::string");
std::string CDDG((std::string)"std::string");
std::string CDDH((std::string)"std::string");
std::string CDDI((std::string)"std::string");
std::string CDDJ((std::string)"std::string");
std::string CDEA((std::string)"std::string");
std::string CDEB((std::string)"std::string");
std::string CDEC((std::string)"std::string");
std::string CDED((std::string)"std::string");
std::string CDEE((std::string)"std::string");
std::string CDEF((std::string)"std::string");
std::string CDEG((std::string)"std::string");
std::string CDEH((std::string)"std::string");
std::string CDEI((std::string)"std::string");
std::string CDEJ((std::string)"std::string");
std::string CDFA((std::string)"std::string");
std::string CDFB((std::string)"std::string");
std::string CDFC((std::string)"std::string");
std::string CDFD((std::string)"std::string");
std::string CDFE((std::string)"std::string");
std::string CDFF((std::string)"std::string");
std::string CDFG((std::string)"std::string");
std::string CDFH((std::string)"std::string");
std::string CDFI((std::string)"std::string");
std::string CDFJ((std::string)"std::string");
std::string CDGA((std::string)"std::string");
std::string CDGB((std::string)"std::string");
std::string CDGC((std::string)"std::string");
std::string CDGD((std::string)"std::string");
std::string CDGE((std::string)"std::string");
std::string CDGF((std::string)"std::string");
std::string CDGG((std::string)"std::string");
std::string CDGH((std::string)"std::string");
std::string CDGI((std::string)"std::string");
std::string CDGJ((std::string)"std::string");
std::string CDHA((std::string)"std::string");
std::string CDHB((std::string)"std::string");
std::string CDHC((std::string)"std::string");
std::string CDHD((std::string)"std::string");
std::string CDHE((std::string)"std::string");
std::string CDHF((std::string)"std::string");
std::string CDHG((std::string)"std::string");
std::string CDHH((std::string)"std::string");
std::string CDHI((std::string)"std::string");
std::string CDHJ((std::string)"std::string");
std::string CDIA((std::string)"std::string");
std::string CDIB((std::string)"std::string");
std::string CDIC((std::string)"std::string");
std::string CDID((std::string)"std::string");
std::string CDIE((std::string)"std::string");
std::string CDIF((std::string)"std::string");
std::string CDIG((std::string)"std::string");
std::string CDIH((std::string)"std::string");
std::string CDII((std::string)"std::string");
std::string CDIJ((std::string)"std::string");
std::string CDJA((std::string)"std::string");
std::string CDJB((std::string)"std::string");
std::string CDJC((std::string)"std::string");
std::string CDJD((std::string)"std::string");
std::string CDJE((std::string)"std::string");
std::string CDJF((std::string)"std::string");
std::string CDJG((std::string)"std::string");
std::string CDJH((std::string)"std::string");
std::string CDJI((std::string)"std::string");
std::string CDJJ((std::string)"std::string");
std::string CEAA((std::string)"std::string");
std::string CEAB((std::string)"std::string");
std::string CEAC((std::string)"std::string");
std::string CEAD((std::string)"std::string");
std::string CEAE((std::string)"std::string");
std::string CEAF((std::string)"std::string");
std::string CEAG((std::string)"std::string");
std::string CEAH((std::string)"std::string");
std::string CEAI((std::string)"std::string");
std::string CEAJ((std::string)"std::string");
std::string CEBA((std::string)"std::string");
std::string CEBB((std::string)"std::string");
std::string CEBC((std::string)"std::string");
std::string CEBD((std::string)"std::string");
std::string CEBE((std::string)"std::string");
std::string CEBF((std::string)"std::string");
std::string CEBG((std::string)"std::string");
std::string CEBH((std::string)"std::string");
std::string CEBI((std::string)"std::string");
std::string CEBJ((std::string)"std::string");
std::string CECA((std::string)"std::string");
std::string CECB((std::string)"std::string");
std::string CECC((std::string)"std::string");
std::string CECD((std::string)"std::string");
std::string CECE((std::string)"std::string");
std::string CECF((std::string)"std::string");
std::string CECG((std::string)"std::string");
std::string CECH((std::string)"std::string");
std::string CECI((std::string)"std::string");
std::string CECJ((std::string)"std::string");
std::string CEDA((std::string)"std::string");
std::string CEDB((std::string)"std::string");
std::string CEDC((std::string)"std::string");
std::string CEDD((std::string)"std::string");
std::string CEDE((std::string)"std::string");
std::string CEDF((std::string)"std::string");
std::string CEDG((std::string)"std::string");
std::string CEDH((std::string)"std::string");
std::string CEDI((std::string)"std::string");
std::string CEDJ((std::string)"std::string");
std::string CEEA((std::string)"std::string");
std::string CEEB((std::string)"std::string");
std::string CEEC((std::string)"std::string");
std::string CEED((std::string)"std::string");
std::string CEEE((std::string)"std::string");
std::string CEEF((std::string)"std::string");
std::string CEEG((std::string)"std::string");
std::string CEEH((std::string)"std::string");
std::string CEEI((std::string)"std::string");
std::string CEEJ((std::string)"std::string");
std::string CEFA((std::string)"std::string");
std::string CEFB((std::string)"std::string");
std::string CEFC((std::string)"std::string");
std::string CEFD((std::string)"std::string");
std::string CEFE((std::string)"std::string");
std::string CEFF((std::string)"std::string");
std::string CEFG((std::string)"std::string");
std::string CEFH((std::string)"std::string");
std::string CEFI((std::string)"std::string");
std::string CEFJ((std::string)"std::string");
std::string CEGA((std::string)"std::string");
std::string CEGB((std::string)"std::string");
std::string CEGC((std::string)"std::string");
std::string CEGD((std::string)"std::string");
std::string CEGE((std::string)"std::string");
std::string CEGF((std::string)"std::string");
std::string CEGG((std::string)"std::string");
std::string CEGH((std::string)"std::string");
std::string CEGI((std::string)"std::string");
std::string CEGJ((std::string)"std::string");
std::string CEHA((std::string)"std::string");
std::string CEHB((std::string)"std::string");
std::string CEHC((std::string)"std::string");
std::string CEHD((std::string)"std::string");
std::string CEHE((std::string)"std::string");
std::string CEHF((std::string)"std::string");
std::string CEHG((std::string)"std::string");
std::string CEHH((std::string)"std::string");
std::string CEHI((std::string)"std::string");
std::string CEHJ((std::string)"std::string");
std::string CEIA((std::string)"std::string");
std::string CEIB((std::string)"std::string");
std::string CEIC((std::string)"std::string");
std::string CEID((std::string)"std::string");
std::string CEIE((std::string)"std::string");
std::string CEIF((std::string)"std::string");
std::string CEIG((std::string)"std::string");
std::string CEIH((std::string)"std::string");
std::string CEII((std::string)"std::string");
std::string CEIJ((std::string)"std::string");
std::string CEJA((std::string)"std::string");
std::string CEJB((std::string)"std::string");
std::string CEJC((std::string)"std::string");
std::string CEJD((std::string)"std::string");
std::string CEJE((std::string)"std::string");
std::string CEJF((std::string)"std::string");
std::string CEJG((std::string)"std::string");
std::string CEJH((std::string)"std::string");
std::string CEJI((std::string)"std::string");
std::string CEJJ((std::string)"std::string");
std::string CFAA((std::string)"std::string");
std::string CFAB((std::string)"std::string");
std::string CFAC((std::string)"std::string");
std::string CFAD((std::string)"std::string");
std::string CFAE((std::string)"std::string");
std::string CFAF((std::string)"std::string");
std::string CFAG((std::string)"std::string");
std::string CFAH((std::string)"std::string");
std::string CFAI((std::string)"std::string");
std::string CFAJ((std::string)"std::string");
std::string CFBA((std::string)"std::string");
std::string CFBB((std::string)"std::string");
std::string CFBC((std::string)"std::string");
std::string CFBD((std::string)"std::string");
std::string CFBE((std::string)"std::string");
std::string CFBF((std::string)"std::string");
std::string CFBG((std::string)"std::string");
std::string CFBH((std::string)"std::string");
std::string CFBI((std::string)"std::string");
std::string CFBJ((std::string)"std::string");
std::string CFCA((std::string)"std::string");
std::string CFCB((std::string)"std::string");
std::string CFCC((std::string)"std::string");
std::string CFCD((std::string)"std::string");
std::string CFCE((std::string)"std::string");
std::string CFCF((std::string)"std::string");
std::string CFCG((std::string)"std::string");
std::string CFCH((std::string)"std::string");
std::string CFCI((std::string)"std::string");
std::string CFCJ((std::string)"std::string");
std::string CFDA((std::string)"std::string");
std::string CFDB((std::string)"std::string");
std::string CFDC((std::string)"std::string");
std::string CFDD((std::string)"std::string");
std::string CFDE((std::string)"std::string");
std::string CFDF((std::string)"std::string");
std::string CFDG((std::string)"std::string");
std::string CFDH((std::string)"std::string");
std::string CFDI((std::string)"std::string");
std::string CFDJ((std::string)"std::string");
std::string CFEA((std::string)"std::string");
std::string CFEB((std::string)"std::string");
std::string CFEC((std::string)"std::string");
std::string CFED((std::string)"std::string");
std::string CFEE((std::string)"std::string");
std::string CFEF((std::string)"std::string");
std::string CFEG((std::string)"std::string");
std::string CFEH((std::string)"std::string");
std::string CFEI((std::string)"std::string");
std::string CFEJ((std::string)"std::string");
std::string CFFA((std::string)"std::string");
std::string CFFB((std::string)"std::string");
std::string CFFC((std::string)"std::string");
std::string CFFD((std::string)"std::string");
std::string CFFE((std::string)"std::string");
std::string CFFF((std::string)"std::string");
std::string CFFG((std::string)"std::string");
std::string CFFH((std::string)"std::string");
std::string CFFI((std::string)"std::string");
std::string CFFJ((std::string)"std::string");
std::string CFGA((std::string)"std::string");
std::string CFGB((std::string)"std::string");
std::string CFGC((std::string)"std::string");
std::string CFGD((std::string)"std::string");
std::string CFGE((std::string)"std::string");
std::string CFGF((std::string)"std::string");
std::string CFGG((std::string)"std::string");
std::string CFGH((std::string)"std::string");
std::string CFGI((std::string)"std::string");
std::string CFGJ((std::string)"std::string");
std::string CFHA((std::string)"std::string");
std::string CFHB((std::string)"std::string");
std::string CFHC((std::string)"std::string");
std::string CFHD((std::string)"std::string");
std::string CFHE((std::string)"std::string");
std::string CFHF((std::string)"std::string");
std::string CFHG((std::string)"std::string");
std::string CFHH((std::string)"std::string");
std::string CFHI((std::string)"std::string");
std::string CFHJ((std::string)"std::string");
std::string CFIA((std::string)"std::string");
std::string CFIB((std::string)"std::string");
std::string CFIC((std::string)"std::string");
std::string CFID((std::string)"std::string");
std::string CFIE((std::string)"std::string");
std::string CFIF((std::string)"std::string");
std::string CFIG((std::string)"std::string");
std::string CFIH((std::string)"std::string");
std::string CFII((std::string)"std::string");
std::string CFIJ((std::string)"std::string");
std::string CFJA((std::string)"std::string");
std::string CFJB((std::string)"std::string");
std::string CFJC((std::string)"std::string");
std::string CFJD((std::string)"std::string");
std::string CFJE((std::string)"std::string");
std::string CFJF((std::string)"std::string");
std::string CFJG((std::string)"std::string");
std::string CFJH((std::string)"std::string");
std::string CFJI((std::string)"std::string");
std::string CFJJ((std::string)"std::string");
std::string CGAA((std::string)"std::string");
std::string CGAB((std::string)"std::string");
std::string CGAC((std::string)"std::string");
std::string CGAD((std::string)"std::string");
std::string CGAE((std::string)"std::string");
std::string CGAF((std::string)"std::string");
std::string CGAG((std::string)"std::string");
std::string CGAH((std::string)"std::string");
std::string CGAI((std::string)"std::string");
std::string CGAJ((std::string)"std::string");
std::string CGBA((std::string)"std::string");
std::string CGBB((std::string)"std::string");
std::string CGBC((std::string)"std::string");
std::string CGBD((std::string)"std::string");
std::string CGBE((std::string)"std::string");
std::string CGBF((std::string)"std::string");
std::string CGBG((std::string)"std::string");
std::string CGBH((std::string)"std::string");
std::string CGBI((std::string)"std::string");
std::string CGBJ((std::string)"std::string");
std::string CGCA((std::string)"std::string");
std::string CGCB((std::string)"std::string");
std::string CGCC((std::string)"std::string");
std::string CGCD((std::string)"std::string");
std::string CGCE((std::string)"std::string");
std::string CGCF((std::string)"std::string");
std::string CGCG((std::string)"std::string");
std::string CGCH((std::string)"std::string");
std::string CGCI((std::string)"std::string");
std::string CGCJ((std::string)"std::string");
std::string CGDA((std::string)"std::string");
std::string CGDB((std::string)"std::string");
std::string CGDC((std::string)"std::string");
std::string CGDD((std::string)"std::string");
std::string CGDE((std::string)"std::string");
std::string CGDF((std::string)"std::string");
std::string CGDG((std::string)"std::string");
std::string CGDH((std::string)"std::string");
std::string CGDI((std::string)"std::string");
std::string CGDJ((std::string)"std::string");
std::string CGEA((std::string)"std::string");
std::string CGEB((std::string)"std::string");
std::string CGEC((std::string)"std::string");
std::string CGED((std::string)"std::string");
std::string CGEE((std::string)"std::string");
std::string CGEF((std::string)"std::string");
std::string CGEG((std::string)"std::string");
std::string CGEH((std::string)"std::string");
std::string CGEI((std::string)"std::string");
std::string CGEJ((std::string)"std::string");
std::string CGFA((std::string)"std::string");
std::string CGFB((std::string)"std::string");
std::string CGFC((std::string)"std::string");
std::string CGFD((std::string)"std::string");
std::string CGFE((std::string)"std::string");
std::string CGFF((std::string)"std::string");
std::string CGFG((std::string)"std::string");
std::string CGFH((std::string)"std::string");
std::string CGFI((std::string)"std::string");
std::string CGFJ((std::string)"std::string");
std::string CGGA((std::string)"std::string");
std::string CGGB((std::string)"std::string");
std::string CGGC((std::string)"std::string");
std::string CGGD((std::string)"std::string");
std::string CGGE((std::string)"std::string");
std::string CGGF((std::string)"std::string");
std::string CGGG((std::string)"std::string");
std::string CGGH((std::string)"std::string");
std::string CGGI((std::string)"std::string");
std::string CGGJ((std::string)"std::string");
std::string CGHA((std::string)"std::string");
std::string CGHB((std::string)"std::string");
std::string CGHC((std::string)"std::string");
std::string CGHD((std::string)"std::string");
std::string CGHE((std::string)"std::string");
std::string CGHF((std::string)"std::string");
std::string CGHG((std::string)"std::string");
std::string CGHH((std::string)"std::string");
std::string CGHI((std::string)"std::string");
std::string CGHJ((std::string)"std::string");
std::string CGIA((std::string)"std::string");
std::string CGIB((std::string)"std::string");
std::string CGIC((std::string)"std::string");
std::string CGID((std::string)"std::string");
std::string CGIE((std::string)"std::string");
std::string CGIF((std::string)"std::string");
std::string CGIG((std::string)"std::string");
std::string CGIH((std::string)"std::string");
std::string CGII((std::string)"std::string");
std::string CGIJ((std::string)"std::string");
std::string CGJA((std::string)"std::string");
std::string CGJB((std::string)"std::string");
std::string CGJC((std::string)"std::string");
std::string CGJD((std::string)"std::string");
std::string CGJE((std::string)"std::string");
std::string CGJF((std::string)"std::string");
std::string CGJG((std::string)"std::string");
std::string CGJH((std::string)"std::string");
std::string CGJI((std::string)"std::string");
std::string CGJJ((std::string)"std::string");
std::string CHAA((std::string)"std::string");
std::string CHAB((std::string)"std::string");
std::string CHAC((std::string)"std::string");
std::string CHAD((std::string)"std::string");
std::string CHAE((std::string)"std::string");
std::string CHAF((std::string)"std::string");
std::string CHAG((std::string)"std::string");
std::string CHAH((std::string)"std::string");
std::string CHAI((std::string)"std::string");
std::string CHAJ((std::string)"std::string");
std::string CHBA((std::string)"std::string");
std::string CHBB((std::string)"std::string");
std::string CHBC((std::string)"std::string");
std::string CHBD((std::string)"std::string");
std::string CHBE((std::string)"std::string");
std::string CHBF((std::string)"std::string");
std::string CHBG((std::string)"std::string");
std::string CHBH((std::string)"std::string");
std::string CHBI((std::string)"std::string");
std::string CHBJ((std::string)"std::string");
std::string CHCA((std::string)"std::string");
std::string CHCB((std::string)"std::string");
std::string CHCC((std::string)"std::string");
std::string CHCD((std::string)"std::string");
std::string CHCE((std::string)"std::string");
std::string CHCF((std::string)"std::string");
std::string CHCG((std::string)"std::string");
std::string CHCH((std::string)"std::string");
std::string CHCI((std::string)"std::string");
std::string CHCJ((std::string)"std::string");
std::string CHDA((std::string)"std::string");
std::string CHDB((std::string)"std::string");
std::string CHDC((std::string)"std::string");
std::string CHDD((std::string)"std::string");
std::string CHDE((std::string)"std::string");
std::string CHDF((std::string)"std::string");
std::string CHDG((std::string)"std::string");
std::string CHDH((std::string)"std::string");
std::string CHDI((std::string)"std::string");
std::string CHDJ((std::string)"std::string");
std::string CHEA((std::string)"std::string");
std::string CHEB((std::string)"std::string");
std::string CHEC((std::string)"std::string");
std::string CHED((std::string)"std::string");
std::string CHEE((std::string)"std::string");
std::string CHEF((std::string)"std::string");
std::string CHEG((std::string)"std::string");
std::string CHEH((std::string)"std::string");
std::string CHEI((std::string)"std::string");
std::string CHEJ((std::string)"std::string");
std::string CHFA((std::string)"std::string");
std::string CHFB((std::string)"std::string");
std::string CHFC((std::string)"std::string");
std::string CHFD((std::string)"std::string");
std::string CHFE((std::string)"std::string");
std::string CHFF((std::string)"std::string");
std::string CHFG((std::string)"std::string");
std::string CHFH((std::string)"std::string");
std::string CHFI((std::string)"std::string");
std::string CHFJ((std::string)"std::string");
std::string CHGA((std::string)"std::string");
std::string CHGB((std::string)"std::string");
std::string CHGC((std::string)"std::string");
std::string CHGD((std::string)"std::string");
std::string CHGE((std::string)"std::string");
std::string CHGF((std::string)"std::string");
std::string CHGG((std::string)"std::string");
std::string CHGH((std::string)"std::string");
std::string CHGI((std::string)"std::string");
std::string CHGJ((std::string)"std::string");
std::string CHHA((std::string)"std::string");
std::string CHHB((std::string)"std::string");
std::string CHHC((std::string)"std::string");
std::string CHHD((std::string)"std::string");
std::string CHHE((std::string)"std::string");
std::string CHHF((std::string)"std::string");
std::string CHHG((std::string)"std::string");
std::string CHHH((std::string)"std::string");
std::string CHHI((std::string)"std::string");
std::string CHHJ((std::string)"std::string");
std::string CHIA((std::string)"std::string");
std::string CHIB((std::string)"std::string");
std::string CHIC((std::string)"std::string");
std::string CHID((std::string)"std::string");
std::string CHIE((std::string)"std::string");
std::string CHIF((std::string)"std::string");
std::string CHIG((std::string)"std::string");
std::string CHIH((std::string)"std::string");
std::string CHII((std::string)"std::string");
std::string CHIJ((std::string)"std::string");
std::string CHJA((std::string)"std::string");
std::string CHJB((std::string)"std::string");
std::string CHJC((std::string)"std::string");
std::string CHJD((std::string)"std::string");
std::string CHJE((std::string)"std::string");
std::string CHJF((std::string)"std::string");
std::string CHJG((std::string)"std::string");
std::string CHJH((std::string)"std::string");
std::string CHJI((std::string)"std::string");
std::string CHJJ((std::string)"std::string");
std::string CIAA((std::string)"std::string");
std::string CIAB((std::string)"std::string");
std::string CIAC((std::string)"std::string");
std::string CIAD((std::string)"std::string");
std::string CIAE((std::string)"std::string");
std::string CIAF((std::string)"std::string");
std::string CIAG((std::string)"std::string");
std::string CIAH((std::string)"std::string");
std::string CIAI((std::string)"std::string");
std::string CIAJ((std::string)"std::string");
std::string CIBA((std::string)"std::string");
std::string CIBB((std::string)"std::string");
std::string CIBC((std::string)"std::string");
std::string CIBD((std::string)"std::string");
std::string CIBE((std::string)"std::string");
std::string CIBF((std::string)"std::string");
std::string CIBG((std::string)"std::string");
std::string CIBH((std::string)"std::string");
std::string CIBI((std::string)"std::string");
std::string CIBJ((std::string)"std::string");
std::string CICA((std::string)"std::string");
std::string CICB((std::string)"std::string");
std::string CICC((std::string)"std::string");
std::string CICD((std::string)"std::string");
std::string CICE((std::string)"std::string");
std::string CICF((std::string)"std::string");
std::string CICG((std::string)"std::string");
std::string CICH((std::string)"std::string");
std::string CICI((std::string)"std::string");
std::string CICJ((std::string)"std::string");
std::string CIDA((std::string)"std::string");
std::string CIDB((std::string)"std::string");
std::string CIDC((std::string)"std::string");
std::string CIDD((std::string)"std::string");
std::string CIDE((std::string)"std::string");
std::string CIDF((std::string)"std::string");
std::string CIDG((std::string)"std::string");
std::string CIDH((std::string)"std::string");
std::string CIDI((std::string)"std::string");
std::string CIDJ((std::string)"std::string");
std::string CIEA((std::string)"std::string");
std::string CIEB((std::string)"std::string");
std::string CIEC((std::string)"std::string");
std::string CIED((std::string)"std::string");
std::string CIEE((std::string)"std::string");
std::string CIEF((std::string)"std::string");
std::string CIEG((std::string)"std::string");
std::string CIEH((std::string)"std::string");
std::string CIEI((std::string)"std::string");
std::string CIEJ((std::string)"std::string");
std::string CIFA((std::string)"std::string");
std::string CIFB((std::string)"std::string");
std::string CIFC((std::string)"std::string");
std::string CIFD((std::string)"std::string");
std::string CIFE((std::string)"std::string");
std::string CIFF((std::string)"std::string");
std::string CIFG((std::string)"std::string");
std::string CIFH((std::string)"std::string");
std::string CIFI((std::string)"std::string");
std::string CIFJ((std::string)"std::string");
std::string CIGA((std::string)"std::string");
std::string CIGB((std::string)"std::string");
std::string CIGC((std::string)"std::string");
std::string CIGD((std::string)"std::string");
std::string CIGE((std::string)"std::string");
std::string CIGF((std::string)"std::string");
std::string CIGG((std::string)"std::string");
std::string CIGH((std::string)"std::string");
std::string CIGI((std::string)"std::string");
std::string CIGJ((std::string)"std::string");
std::string CIHA((std::string)"std::string");
std::string CIHB((std::string)"std::string");
std::string CIHC((std::string)"std::string");
std::string CIHD((std::string)"std::string");
std::string CIHE((std::string)"std::string");
std::string CIHF((std::string)"std::string");
std::string CIHG((std::string)"std::string");
std::string CIHH((std::string)"std::string");
std::string CIHI((std::string)"std::string");
std::string CIHJ((std::string)"std::string");
std::string CIIA((std::string)"std::string");
std::string CIIB((std::string)"std::string");
std::string CIIC((std::string)"std::string");
std::string CIID((std::string)"std::string");
std::string CIIE((std::string)"std::string");
std::string CIIF((std::string)"std::string");
std::string CIIG((std::string)"std::string");
std::string CIIH((std::string)"std::string");
std::string CIII((std::string)"std::string");
std::string CIIJ((std::string)"std::string");
std::string CIJA((std::string)"std::string");
std::string CIJB((std::string)"std::string");
std::string CIJC((std::string)"std::string");
std::string CIJD((std::string)"std::string");
std::string CIJE((std::string)"std::string");
std::string CIJF((std::string)"std::string");
std::string CIJG((std::string)"std::string");
std::string CIJH((std::string)"std::string");
std::string CIJI((std::string)"std::string");
std::string CIJJ((std::string)"std::string");
std::string CJAA((std::string)"std::string");
std::string CJAB((std::string)"std::string");
std::string CJAC((std::string)"std::string");
std::string CJAD((std::string)"std::string");
std::string CJAE((std::string)"std::string");
std::string CJAF((std::string)"std::string");
std::string CJAG((std::string)"std::string");
std::string CJAH((std::string)"std::string");
std::string CJAI((std::string)"std::string");
std::string CJAJ((std::string)"std::string");
std::string CJBA((std::string)"std::string");
std::string CJBB((std::string)"std::string");
std::string CJBC((std::string)"std::string");
std::string CJBD((std::string)"std::string");
std::string CJBE((std::string)"std::string");
std::string CJBF((std::string)"std::string");
std::string CJBG((std::string)"std::string");
std::string CJBH((std::string)"std::string");
std::string CJBI((std::string)"std::string");
std::string CJBJ((std::string)"std::string");
std::string CJCA((std::string)"std::string");
std::string CJCB((std::string)"std::string");
std::string CJCC((std::string)"std::string");
std::string CJCD((std::string)"std::string");
std::string CJCE((std::string)"std::string");
std::string CJCF((std::string)"std::string");
std::string CJCG((std::string)"std::string");
std::string CJCH((std::string)"std::string");
std::string CJCI((std::string)"std::string");
std::string CJCJ((std::string)"std::string");
std::string CJDA((std::string)"std::string");
std::string CJDB((std::string)"std::string");
std::string CJDC((std::string)"std::string");
std::string CJDD((std::string)"std::string");
std::string CJDE((std::string)"std::string");
std::string CJDF((std::string)"std::string");
std::string CJDG((std::string)"std::string");
std::string CJDH((std::string)"std::string");
std::string CJDI((std::string)"std::string");
std::string CJDJ((std::string)"std::string");
std::string CJEA((std::string)"std::string");
std::string CJEB((std::string)"std::string");
std::string CJEC((std::string)"std::string");
std::string CJED((std::string)"std::string");
std::string CJEE((std::string)"std::string");
std::string CJEF((std::string)"std::string");
std::string CJEG((std::string)"std::string");
std::string CJEH((std::string)"std::string");
std::string CJEI((std::string)"std::string");
std::string CJEJ((std::string)"std::string");
std::string CJFA((std::string)"std::string");
std::string CJFB((std::string)"std::string");
std::string CJFC((std::string)"std::string");
std::string CJFD((std::string)"std::string");
std::string CJFE((std::string)"std::string");
std::string CJFF((std::string)"std::string");
std::string CJFG((std::string)"std::string");
std::string CJFH((std::string)"std::string");
std::string CJFI((std::string)"std::string");
std::string CJFJ((std::string)"std::string");
std::string CJGA((std::string)"std::string");
std::string CJGB((std::string)"std::string");
std::string CJGC((std::string)"std::string");
std::string CJGD((std::string)"std::string");
std::string CJGE((std::string)"std::string");
std::string CJGF((std::string)"std::string");
std::string CJGG((std::string)"std::string");
std::string CJGH((std::string)"std::string");
std::string CJGI((std::string)"std::string");
std::string CJGJ((std::string)"std::string");
std::string CJHA((std::string)"std::string");
std::string CJHB((std::string)"std::string");
std::string CJHC((std::string)"std::string");
std::string CJHD((std::string)"std::string");
std::string CJHE((std::string)"std::string");
std::string CJHF((std::string)"std::string");
std::string CJHG((std::string)"std::string");
std::string CJHH((std::string)"std::string");
std::string CJHI((std::string)"std::string");
std::string CJHJ((std::string)"std::string");
std::string CJIA((std::string)"std::string");
std::string CJIB((std::string)"std::string");
std::string CJIC((std::string)"std::string");
std::string CJID((std::string)"std::string");
std::string CJIE((std::string)"std::string");
std::string CJIF((std::string)"std::string");
std::string CJIG((std::string)"std::string");
std::string CJIH((std::string)"std::string");
std::string CJII((std::string)"std::string");
std::string CJIJ((std::string)"std::string");
std::string CJJA((std::string)"std::string");
std::string CJJB((std::string)"std::string");
std::string CJJC((std::string)"std::string");
std::string CJJD((std::string)"std::string");
std::string CJJE((std::string)"std::string");
std::string CJJF((std::string)"std::string");
std::string CJJG((std::string)"std::string");
std::string CJJH((std::string)"std::string");
std::string CJJI((std::string)"std::string");
std::string CJJJ((std::string)"std::string");
std::string DAAA((std::string)"std::string");
std::string DAAB((std::string)"std::string");
std::string DAAC((std::string)"std::string");
std::string DAAD((std::string)"std::string");
std::string DAAE((std::string)"std::string");
std::string DAAF((std::string)"std::string");
std::string DAAG((std::string)"std::string");
std::string DAAH((std::string)"std::string");
std::string DAAI((std::string)"std::string");
std::string DAAJ((std::string)"std::string");
std::string DABA((std::string)"std::string");
std::string DABB((std::string)"std::string");
std::string DABC((std::string)"std::string");
std::string DABD((std::string)"std::string");
std::string DABE((std::string)"std::string");
std::string DABF((std::string)"std::string");
std::string DABG((std::string)"std::string");
std::string DABH((std::string)"std::string");
std::string DABI((std::string)"std::string");
std::string DABJ((std::string)"std::string");
std::string DACA((std::string)"std::string");
std::string DACB((std::string)"std::string");
std::string DACC((std::string)"std::string");
std::string DACD((std::string)"std::string");
std::string DACE((std::string)"std::string");
std::string DACF((std::string)"std::string");
std::string DACG((std::string)"std::string");
std::string DACH((std::string)"std::string");
std::string DACI((std::string)"std::string");
std::string DACJ((std::string)"std::string");
std::string DADA((std::string)"std::string");
std::string DADB((std::string)"std::string");
std::string DADC((std::string)"std::string");
std::string DADD((std::string)"std::string");
std::string DADE((std::string)"std::string");
std::string DADF((std::string)"std::string");
std::string DADG((std::string)"std::string");
std::string DADH((std::string)"std::string");
std::string DADI((std::string)"std::string");
std::string DADJ((std::string)"std::string");
std::string DAEA((std::string)"std::string");
std::string DAEB((std::string)"std::string");
std::string DAEC((std::string)"std::string");
std::string DAED((std::string)"std::string");
std::string DAEE((std::string)"std::string");
std::string DAEF((std::string)"std::string");
std::string DAEG((std::string)"std::string");
std::string DAEH((std::string)"std::string");
std::string DAEI((std::string)"std::string");
std::string DAEJ((std::string)"std::string");
std::string DAFA((std::string)"std::string");
std::string DAFB((std::string)"std::string");
std::string DAFC((std::string)"std::string");
std::string DAFD((std::string)"std::string");
std::string DAFE((std::string)"std::string");
std::string DAFF((std::string)"std::string");
std::string DAFG((std::string)"std::string");
std::string DAFH((std::string)"std::string");
std::string DAFI((std::string)"std::string");
std::string DAFJ((std::string)"std::string");
std::string DAGA((std::string)"std::string");
std::string DAGB((std::string)"std::string");
std::string DAGC((std::string)"std::string");
std::string DAGD((std::string)"std::string");
std::string DAGE((std::string)"std::string");
std::string DAGF((std::string)"std::string");
std::string DAGG((std::string)"std::string");
std::string DAGH((std::string)"std::string");
std::string DAGI((std::string)"std::string");
std::string DAGJ((std::string)"std::string");
std::string DAHA((std::string)"std::string");
std::string DAHB((std::string)"std::string");
std::string DAHC((std::string)"std::string");
std::string DAHD((std::string)"std::string");
std::string DAHE((std::string)"std::string");
std::string DAHF((std::string)"std::string");
std::string DAHG((std::string)"std::string");
std::string DAHH((std::string)"std::string");
std::string DAHI((std::string)"std::string");
std::string DAHJ((std::string)"std::string");
std::string DAIA((std::string)"std::string");
std::string DAIB((std::string)"std::string");
std::string DAIC((std::string)"std::string");
std::string DAID((std::string)"std::string");
std::string DAIE((std::string)"std::string");
std::string DAIF((std::string)"std::string");
std::string DAIG((std::string)"std::string");
std::string DAIH((std::string)"std::string");
std::string DAII((std::string)"std::string");
std::string DAIJ((std::string)"std::string");
std::string DAJA((std::string)"std::string");
std::string DAJB((std::string)"std::string");
std::string DAJC((std::string)"std::string");
std::string DAJD((std::string)"std::string");
std::string DAJE((std::string)"std::string");
std::string DAJF((std::string)"std::string");
std::string DAJG((std::string)"std::string");
std::string DAJH((std::string)"std::string");
std::string DAJI((std::string)"std::string");
std::string DAJJ((std::string)"std::string");
std::string DBAA((std::string)"std::string");
std::string DBAB((std::string)"std::string");
std::string DBAC((std::string)"std::string");
std::string DBAD((std::string)"std::string");
std::string DBAE((std::string)"std::string");
std::string DBAF((std::string)"std::string");
std::string DBAG((std::string)"std::string");
std::string DBAH((std::string)"std::string");
std::string DBAI((std::string)"std::string");
std::string DBAJ((std::string)"std::string");
std::string DBBA((std::string)"std::string");
std::string DBBB((std::string)"std::string");
std::string DBBC((std::string)"std::string");
std::string DBBD((std::string)"std::string");
std::string DBBE((std::string)"std::string");
std::string DBBF((std::string)"std::string");
std::string DBBG((std::string)"std::string");
std::string DBBH((std::string)"std::string");
std::string DBBI((std::string)"std::string");
std::string DBBJ((std::string)"std::string");
std::string DBCA((std::string)"std::string");
std::string DBCB((std::string)"std::string");
std::string DBCC((std::string)"std::string");
std::string DBCD((std::string)"std::string");
std::string DBCE((std::string)"std::string");
std::string DBCF((std::string)"std::string");
std::string DBCG((std::string)"std::string");
std::string DBCH((std::string)"std::string");
std::string DBCI((std::string)"std::string");
std::string DBCJ((std::string)"std::string");
std::string DBDA((std::string)"std::string");
std::string DBDB((std::string)"std::string");
std::string DBDC((std::string)"std::string");
std::string DBDD((std::string)"std::string");
std::string DBDE((std::string)"std::string");
std::string DBDF((std::string)"std::string");
std::string DBDG((std::string)"std::string");
std::string DBDH((std::string)"std::string");
std::string DBDI((std::string)"std::string");
std::string DBDJ((std::string)"std::string");
std::string DBEA((std::string)"std::string");
std::string DBEB((std::string)"std::string");
std::string DBEC((std::string)"std::string");
std::string DBED((std::string)"std::string");
std::string DBEE((std::string)"std::string");
std::string DBEF((std::string)"std::string");
std::string DBEG((std::string)"std::string");
std::string DBEH((std::string)"std::string");
std::string DBEI((std::string)"std::string");
std::string DBEJ((std::string)"std::string");
std::string DBFA((std::string)"std::string");
std::string DBFB((std::string)"std::string");
std::string DBFC((std::string)"std::string");
std::string DBFD((std::string)"std::string");
std::string DBFE((std::string)"std::string");
std::string DBFF((std::string)"std::string");
std::string DBFG((std::string)"std::string");
std::string DBFH((std::string)"std::string");
std::string DBFI((std::string)"std::string");
std::string DBFJ((std::string)"std::string");
std::string DBGA((std::string)"std::string");
std::string DBGB((std::string)"std::string");
std::string DBGC((std::string)"std::string");
std::string DBGD((std::string)"std::string");
std::string DBGE((std::string)"std::string");
std::string DBGF((std::string)"std::string");
std::string DBGG((std::string)"std::string");
std::string DBGH((std::string)"std::string");
std::string DBGI((std::string)"std::string");
std::string DBGJ((std::string)"std::string");
std::string DBHA((std::string)"std::string");
std::string DBHB((std::string)"std::string");
std::string DBHC((std::string)"std::string");
std::string DBHD((std::string)"std::string");
std::string DBHE((std::string)"std::string");
std::string DBHF((std::string)"std::string");
std::string DBHG((std::string)"std::string");
std::string DBHH((std::string)"std::string");
std::string DBHI((std::string)"std::string");
std::string DBHJ((std::string)"std::string");
std::string DBIA((std::string)"std::string");
std::string DBIB((std::string)"std::string");
std::string DBIC((std::string)"std::string");
std::string DBID((std::string)"std::string");
std::string DBIE((std::string)"std::string");
std::string DBIF((std::string)"std::string");
std::string DBIG((std::string)"std::string");
std::string DBIH((std::string)"std::string");
std::string DBII((std::string)"std::string");
std::string DBIJ((std::string)"std::string");
std::string DBJA((std::string)"std::string");
std::string DBJB((std::string)"std::string");
std::string DBJC((std::string)"std::string");
std::string DBJD((std::string)"std::string");
std::string DBJE((std::string)"std::string");
std::string DBJF((std::string)"std::string");
std::string DBJG((std::string)"std::string");
std::string DBJH((std::string)"std::string");
std::string DBJI((std::string)"std::string");
std::string DBJJ((std::string)"std::string");
std::string DCAA((std::string)"std::string");
std::string DCAB((std::string)"std::string");
std::string DCAC((std::string)"std::string");
std::string DCAD((std::string)"std::string");
std::string DCAE((std::string)"std::string");
std::string DCAF((std::string)"std::string");
std::string DCAG((std::string)"std::string");
std::string DCAH((std::string)"std::string");
std::string DCAI((std::string)"std::string");
std::string DCAJ((std::string)"std::string");
std::string DCBA((std::string)"std::string");
std::string DCBB((std::string)"std::string");
std::string DCBC((std::string)"std::string");
std::string DCBD((std::string)"std::string");
std::string DCBE((std::string)"std::string");
std::string DCBF((std::string)"std::string");
std::string DCBG((std::string)"std::string");
std::string DCBH((std::string)"std::string");
std::string DCBI((std::string)"std::string");
std::string DCBJ((std::string)"std::string");
std::string DCCA((std::string)"std::string");
std::string DCCB((std::string)"std::string");
std::string DCCC((std::string)"std::string");
std::string DCCD((std::string)"std::string");
std::string DCCE((std::string)"std::string");
std::string DCCF((std::string)"std::string");
std::string DCCG((std::string)"std::string");
std::string DCCH((std::string)"std::string");
std::string DCCI((std::string)"std::string");
std::string DCCJ((std::string)"std::string");
std::string DCDA((std::string)"std::string");
std::string DCDB((std::string)"std::string");
std::string DCDC((std::string)"std::string");
std::string DCDD((std::string)"std::string");
std::string DCDE((std::string)"std::string");
std::string DCDF((std::string)"std::string");
std::string DCDG((std::string)"std::string");
std::string DCDH((std::string)"std::string");
std::string DCDI((std::string)"std::string");
std::string DCDJ((std::string)"std::string");
std::string DCEA((std::string)"std::string");
std::string DCEB((std::string)"std::string");
std::string DCEC((std::string)"std::string");
std::string DCED((std::string)"std::string");
std::string DCEE((std::string)"std::string");
std::string DCEF((std::string)"std::string");
std::string DCEG((std::string)"std::string");
std::string DCEH((std::string)"std::string");
std::string DCEI((std::string)"std::string");
std::string DCEJ((std::string)"std::string");
std::string DCFA((std::string)"std::string");
std::string DCFB((std::string)"std::string");
std::string DCFC((std::string)"std::string");
std::string DCFD((std::string)"std::string");
std::string DCFE((std::string)"std::string");
std::string DCFF((std::string)"std::string");
std::string DCFG((std::string)"std::string");
std::string DCFH((std::string)"std::string");
std::string DCFI((std::string)"std::string");
std::string DCFJ((std::string)"std::string");
std::string DCGA((std::string)"std::string");
std::string DCGB((std::string)"std::string");
std::string DCGC((std::string)"std::string");
std::string DCGD((std::string)"std::string");
std::string DCGE((std::string)"std::string");
std::string DCGF((std::string)"std::string");
std::string DCGG((std::string)"std::string");
std::string DCGH((std::string)"std::string");
std::string DCGI((std::string)"std::string");
std::string DCGJ((std::string)"std::string");
std::string DCHA((std::string)"std::string");
std::string DCHB((std::string)"std::string");
std::string DCHC((std::string)"std::string");
std::string DCHD((std::string)"std::string");
std::string DCHE((std::string)"std::string");
std::string DCHF((std::string)"std::string");
std::string DCHG((std::string)"std::string");
std::string DCHH((std::string)"std::string");
std::string DCHI((std::string)"std::string");
std::string DCHJ((std::string)"std::string");
std::string DCIA((std::string)"std::string");
std::string DCIB((std::string)"std::string");
std::string DCIC((std::string)"std::string");
std::string DCID((std::string)"std::string");
std::string DCIE((std::string)"std::string");
std::string DCIF((std::string)"std::string");
std::string DCIG((std::string)"std::string");
std::string DCIH((std::string)"std::string");
std::string DCII((std::string)"std::string");
std::string DCIJ((std::string)"std::string");
std::string DCJA((std::string)"std::string");
std::string DCJB((std::string)"std::string");
std::string DCJC((std::string)"std::string");
std::string DCJD((std::string)"std::string");
std::string DCJE((std::string)"std::string");
std::string DCJF((std::string)"std::string");
std::string DCJG((std::string)"std::string");
std::string DCJH((std::string)"std::string");
std::string DCJI((std::string)"std::string");
std::string DCJJ((std::string)"std::string");
std::string DDAA((std::string)"std::string");
std::string DDAB((std::string)"std::string");
std::string DDAC((std::string)"std::string");
std::string DDAD((std::string)"std::string");
std::string DDAE((std::string)"std::string");
std::string DDAF((std::string)"std::string");
std::string DDAG((std::string)"std::string");
std::string DDAH((std::string)"std::string");
std::string DDAI((std::string)"std::string");
std::string DDAJ((std::string)"std::string");
std::string DDBA((std::string)"std::string");
std::string DDBB((std::string)"std::string");
std::string DDBC((std::string)"std::string");
std::string DDBD((std::string)"std::string");
std::string DDBE((std::string)"std::string");
std::string DDBF((std::string)"std::string");
std::string DDBG((std::string)"std::string");
std::string DDBH((std::string)"std::string");
std::string DDBI((std::string)"std::string");
std::string DDBJ((std::string)"std::string");
std::string DDCA((std::string)"std::string");
std::string DDCB((std::string)"std::string");
std::string DDCC((std::string)"std::string");
std::string DDCD((std::string)"std::string");
std::string DDCE((std::string)"std::string");
std::string DDCF((std::string)"std::string");
std::string DDCG((std::string)"std::string");
std::string DDCH((std::string)"std::string");
std::string DDCI((std::string)"std::string");
std::string DDCJ((std::string)"std::string");
std::string DDDA((std::string)"std::string");
std::string DDDB((std::string)"std::string");
std::string DDDC((std::string)"std::string");
std::string DDDD((std::string)"std::string");
std::string DDDE((std::string)"std::string");
std::string DDDF((std::string)"std::string");
std::string DDDG((std::string)"std::string");
std::string DDDH((std::string)"std::string");
std::string DDDI((std::string)"std::string");
std::string DDDJ((std::string)"std::string");
std::string DDEA((std::string)"std::string");
std::string DDEB((std::string)"std::string");
std::string DDEC((std::string)"std::string");
std::string DDED((std::string)"std::string");
std::string DDEE((std::string)"std::string");
std::string DDEF((std::string)"std::string");
std::string DDEG((std::string)"std::string");
std::string DDEH((std::string)"std::string");
std::string DDEI((std::string)"std::string");
std::string DDEJ((std::string)"std::string");
std::string DDFA((std::string)"std::string");
std::string DDFB((std::string)"std::string");
std::string DDFC((std::string)"std::string");
std::string DDFD((std::string)"std::string");
std::string DDFE((std::string)"std::string");
std::string DDFF((std::string)"std::string");
std::string DDFG((std::string)"std::string");
std::string DDFH((std::string)"std::string");
std::string DDFI((std::string)"std::string");
std::string DDFJ((std::string)"std::string");
std::string DDGA((std::string)"std::string");
std::string DDGB((std::string)"std::string");
std::string DDGC((std::string)"std::string");
std::string DDGD((std::string)"std::string");
std::string DDGE((std::string)"std::string");
std::string DDGF((std::string)"std::string");
std::string DDGG((std::string)"std::string");
std::string DDGH((std::string)"std::string");
std::string DDGI((std::string)"std::string");
std::string DDGJ((std::string)"std::string");
std::string DDHA((std::string)"std::string");
std::string DDHB((std::string)"std::string");
std::string DDHC((std::string)"std::string");
std::string DDHD((std::string)"std::string");
std::string DDHE((std::string)"std::string");
std::string DDHF((std::string)"std::string");
std::string DDHG((std::string)"std::string");
std::string DDHH((std::string)"std::string");
std::string DDHI((std::string)"std::string");
std::string DDHJ((std::string)"std::string");
std::string DDIA((std::string)"std::string");
std::string DDIB((std::string)"std::string");
std::string DDIC((std::string)"std::string");
std::string DDID((std::string)"std::string");
std::string DDIE((std::string)"std::string");
std::string DDIF((std::string)"std::string");
std::string DDIG((std::string)"std::string");
std::string DDIH((std::string)"std::string");
std::string DDII((std::string)"std::string");
std::string DDIJ((std::string)"std::string");
std::string DDJA((std::string)"std::string");
std::string DDJB((std::string)"std::string");
std::string DDJC((std::string)"std::string");
std::string DDJD((std::string)"std::string");
std::string DDJE((std::string)"std::string");
std::string DDJF((std::string)"std::string");
std::string DDJG((std::string)"std::string");
std::string DDJH((std::string)"std::string");
std::string DDJI((std::string)"std::string");
std::string DDJJ((std::string)"std::string");
std::string DEAA((std::string)"std::string");
std::string DEAB((std::string)"std::string");
std::string DEAC((std::string)"std::string");
std::string DEAD((std::string)"std::string");
std::string DEAE((std::string)"std::string");
std::string DEAF((std::string)"std::string");
std::string DEAG((std::string)"std::string");
std::string DEAH((std::string)"std::string");
std::string DEAI((std::string)"std::string");
std::string DEAJ((std::string)"std::string");
std::string DEBA((std::string)"std::string");
std::string DEBB((std::string)"std::string");
std::string DEBC((std::string)"std::string");
std::string DEBD((std::string)"std::string");
std::string DEBE((std::string)"std::string");
std::string DEBF((std::string)"std::string");
std::string DEBG((std::string)"std::string");
std::string DEBH((std::string)"std::string");
std::string DEBI((std::string)"std::string");
std::string DEBJ((std::string)"std::string");
std::string DECA((std::string)"std::string");
std::string DECB((std::string)"std::string");
std::string DECC((std::string)"std::string");
std::string DECD((std::string)"std::string");
std::string DECE((std::string)"std::string");
std::string DECF((std::string)"std::string");
std::string DECG((std::string)"std::string");
std::string DECH((std::string)"std::string");
std::string DECI((std::string)"std::string");
std::string DECJ((std::string)"std::string");
std::string DEDA((std::string)"std::string");
std::string DEDB((std::string)"std::string");
std::string DEDC((std::string)"std::string");
std::string DEDD((std::string)"std::string");
std::string DEDE((std::string)"std::string");
std::string DEDF((std::string)"std::string");
std::string DEDG((std::string)"std::string");
std::string DEDH((std::string)"std::string");
std::string DEDI((std::string)"std::string");
std::string DEDJ((std::string)"std::string");
std::string DEEA((std::string)"std::string");
std::string DEEB((std::string)"std::string");
std::string DEEC((std::string)"std::string");
std::string DEED((std::string)"std::string");
std::string DEEE((std::string)"std::string");
std::string DEEF((std::string)"std::string");
std::string DEEG((std::string)"std::string");
std::string DEEH((std::string)"std::string");
std::string DEEI((std::string)"std::string");
std::string DEEJ((std::string)"std::string");
std::string DEFA((std::string)"std::string");
std::string DEFB((std::string)"std::string");
std::string DEFC((std::string)"std::string");
std::string DEFD((std::string)"std::string");
std::string DEFE((std::string)"std::string");
std::string DEFF((std::string)"std::string");
std::string DEFG((std::string)"std::string");
std::string DEFH((std::string)"std::string");
std::string DEFI((std::string)"std::string");
std::string DEFJ((std::string)"std::string");
std::string DEGA((std::string)"std::string");
std::string DEGB((std::string)"std::string");
std::string DEGC((std::string)"std::string");
std::string DEGD((std::string)"std::string");
std::string DEGE((std::string)"std::string");
std::string DEGF((std::string)"std::string");
std::string DEGG((std::string)"std::string");
std::string DEGH((std::string)"std::string");
std::string DEGI((std::string)"std::string");
std::string DEGJ((std::string)"std::string");
std::string DEHA((std::string)"std::string");
std::string DEHB((std::string)"std::string");
std::string DEHC((std::string)"std::string");
std::string DEHD((std::string)"std::string");
std::string DEHE((std::string)"std::string");
std::string DEHF((std::string)"std::string");
std::string DEHG((std::string)"std::string");
std::string DEHH((std::string)"std::string");
std::string DEHI((std::string)"std::string");
std::string DEHJ((std::string)"std::string");
std::string DEIA((std::string)"std::string");
std::string DEIB((std::string)"std::string");
std::string DEIC((std::string)"std::string");
std::string DEID((std::string)"std::string");
std::string DEIE((std::string)"std::string");
std::string DEIF((std::string)"std::string");
std::string DEIG((std::string)"std::string");
std::string DEIH((std::string)"std::string");
std::string DEII((std::string)"std::string");
std::string DEIJ((std::string)"std::string");
std::string DEJA((std::string)"std::string");
std::string DEJB((std::string)"std::string");
std::string DEJC((std::string)"std::string");
std::string DEJD((std::string)"std::string");
std::string DEJE((std::string)"std::string");
std::string DEJF((std::string)"std::string");
std::string DEJG((std::string)"std::string");
std::string DEJH((std::string)"std::string");
std::string DEJI((std::string)"std::string");
std::string DEJJ((std::string)"std::string");
std::string DFAA((std::string)"std::string");
std::string DFAB((std::string)"std::string");
std::string DFAC((std::string)"std::string");
std::string DFAD((std::string)"std::string");
std::string DFAE((std::string)"std::string");
std::string DFAF((std::string)"std::string");
std::string DFAG((std::string)"std::string");
std::string DFAH((std::string)"std::string");
std::string DFAI((std::string)"std::string");
std::string DFAJ((std::string)"std::string");
std::string DFBA((std::string)"std::string");
std::string DFBB((std::string)"std::string");
std::string DFBC((std::string)"std::string");
std::string DFBD((std::string)"std::string");
std::string DFBE((std::string)"std::string");
std::string DFBF((std::string)"std::string");
std::string DFBG((std::string)"std::string");
std::string DFBH((std::string)"std::string");
std::string DFBI((std::string)"std::string");
std::string DFBJ((std::string)"std::string");
std::string DFCA((std::string)"std::string");
std::string DFCB((std::string)"std::string");
std::string DFCC((std::string)"std::string");
std::string DFCD((std::string)"std::string");
std::string DFCE((std::string)"std::string");
std::string DFCF((std::string)"std::string");
std::string DFCG((std::string)"std::string");
std::string DFCH((std::string)"std::string");
std::string DFCI((std::string)"std::string");
std::string DFCJ((std::string)"std::string");
std::string DFDA((std::string)"std::string");
std::string DFDB((std::string)"std::string");
std::string DFDC((std::string)"std::string");
std::string DFDD((std::string)"std::string");
std::string DFDE((std::string)"std::string");
std::string DFDF((std::string)"std::string");
std::string DFDG((std::string)"std::string");
std::string DFDH((std::string)"std::string");
std::string DFDI((std::string)"std::string");
std::string DFDJ((std::string)"std::string");
std::string DFEA((std::string)"std::string");
std::string DFEB((std::string)"std::string");
std::string DFEC((std::string)"std::string");
std::string DFED((std::string)"std::string");
std::string DFEE((std::string)"std::string");
std::string DFEF((std::string)"std::string");
std::string DFEG((std::string)"std::string");
std::string DFEH((std::string)"std::string");
std::string DFEI((std::string)"std::string");
std::string DFEJ((std::string)"std::string");
std::string DFFA((std::string)"std::string");
std::string DFFB((std::string)"std::string");
std::string DFFC((std::string)"std::string");
std::string DFFD((std::string)"std::string");
std::string DFFE((std::string)"std::string");
std::string DFFF((std::string)"std::string");
std::string DFFG((std::string)"std::string");
std::string DFFH((std::string)"std::string");
std::string DFFI((std::string)"std::string");
std::string DFFJ((std::string)"std::string");
std::string DFGA((std::string)"std::string");
std::string DFGB((std::string)"std::string");
std::string DFGC((std::string)"std::string");
std::string DFGD((std::string)"std::string");
std::string DFGE((std::string)"std::string");
std::string DFGF((std::string)"std::string");
std::string DFGG((std::string)"std::string");
std::string DFGH((std::string)"std::string");
std::string DFGI((std::string)"std::string");
std::string DFGJ((std::string)"std::string");
std::string DFHA((std::string)"std::string");
std::string DFHB((std::string)"std::string");
std::string DFHC((std::string)"std::string");
std::string DFHD((std::string)"std::string");
std::string DFHE((std::string)"std::string");
std::string DFHF((std::string)"std::string");
std::string DFHG((std::string)"std::string");
std::string DFHH((std::string)"std::string");
std::string DFHI((std::string)"std::string");
std::string DFHJ((std::string)"std::string");
std::string DFIA((std::string)"std::string");
std::string DFIB((std::string)"std::string");
std::string DFIC((std::string)"std::string");
std::string DFID((std::string)"std::string");
std::string DFIE((std::string)"std::string");
std::string DFIF((std::string)"std::string");
std::string DFIG((std::string)"std::string");
std::string DFIH((std::string)"std::string");
std::string DFII((std::string)"std::string");
std::string DFIJ((std::string)"std::string");
std::string DFJA((std::string)"std::string");
std::string DFJB((std::string)"std::string");
std::string DFJC((std::string)"std::string");
std::string DFJD((std::string)"std::string");
std::string DFJE((std::string)"std::string");
std::string DFJF((std::string)"std::string");
std::string DFJG((std::string)"std::string");
std::string DFJH((std::string)"std::string");
std::string DFJI((std::string)"std::string");
std::string DFJJ((std::string)"std::string");
std::string DGAA((std::string)"std::string");
std::string DGAB((std::string)"std::string");
std::string DGAC((std::string)"std::string");
std::string DGAD((std::string)"std::string");
std::string DGAE((std::string)"std::string");
std::string DGAF((std::string)"std::string");
std::string DGAG((std::string)"std::string");
std::string DGAH((std::string)"std::string");
std::string DGAI((std::string)"std::string");
std::string DGAJ((std::string)"std::string");
std::string DGBA((std::string)"std::string");
std::string DGBB((std::string)"std::string");
std::string DGBC((std::string)"std::string");
std::string DGBD((std::string)"std::string");
std::string DGBE((std::string)"std::string");
std::string DGBF((std::string)"std::string");
std::string DGBG((std::string)"std::string");
std::string DGBH((std::string)"std::string");
std::string DGBI((std::string)"std::string");
std::string DGBJ((std::string)"std::string");
std::string DGCA((std::string)"std::string");
std::string DGCB((std::string)"std::string");
std::string DGCC((std::string)"std::string");
std::string DGCD((std::string)"std::string");
std::string DGCE((std::string)"std::string");
std::string DGCF((std::string)"std::string");
std::string DGCG((std::string)"std::string");
std::string DGCH((std::string)"std::string");
std::string DGCI((std::string)"std::string");
std::string DGCJ((std::string)"std::string");
std::string DGDA((std::string)"std::string");
std::string DGDB((std::string)"std::string");
std::string DGDC((std::string)"std::string");
std::string DGDD((std::string)"std::string");
std::string DGDE((std::string)"std::string");
std::string DGDF((std::string)"std::string");
std::string DGDG((std::string)"std::string");
std::string DGDH((std::string)"std::string");
std::string DGDI((std::string)"std::string");
std::string DGDJ((std::string)"std::string");
std::string DGEA((std::string)"std::string");
std::string DGEB((std::string)"std::string");
std::string DGEC((std::string)"std::string");
std::string DGED((std::string)"std::string");
std::string DGEE((std::string)"std::string");
std::string DGEF((std::string)"std::string");
std::string DGEG((std::string)"std::string");
std::string DGEH((std::string)"std::string");
std::string DGEI((std::string)"std::string");
std::string DGEJ((std::string)"std::string");
std::string DGFA((std::string)"std::string");
std::string DGFB((std::string)"std::string");
std::string DGFC((std::string)"std::string");
std::string DGFD((std::string)"std::string");
std::string DGFE((std::string)"std::string");
std::string DGFF((std::string)"std::string");
std::string DGFG((std::string)"std::string");
std::string DGFH((std::string)"std::string");
std::string DGFI((std::string)"std::string");
std::string DGFJ((std::string)"std::string");
std::string DGGA((std::string)"std::string");
std::string DGGB((std::string)"std::string");
std::string DGGC((std::string)"std::string");
std::string DGGD((std::string)"std::string");
std::string DGGE((std::string)"std::string");
std::string DGGF((std::string)"std::string");
std::string DGGG((std::string)"std::string");
std::string DGGH((std::string)"std::string");
std::string DGGI((std::string)"std::string");
std::string DGGJ((std::string)"std::string");
std::string DGHA((std::string)"std::string");
std::string DGHB((std::string)"std::string");
std::string DGHC((std::string)"std::string");
std::string DGHD((std::string)"std::string");
std::string DGHE((std::string)"std::string");
std::string DGHF((std::string)"std::string");
std::string DGHG((std::string)"std::string");
std::string DGHH((std::string)"std::string");
std::string DGHI((std::string)"std::string");
std::string DGHJ((std::string)"std::string");
std::string DGIA((std::string)"std::string");
std::string DGIB((std::string)"std::string");
std::string DGIC((std::string)"std::string");
std::string DGID((std::string)"std::string");
std::string DGIE((std::string)"std::string");
std::string DGIF((std::string)"std::string");
std::string DGIG((std::string)"std::string");
std::string DGIH((std::string)"std::string");
std::string DGII((std::string)"std::string");
std::string DGIJ((std::string)"std::string");
std::string DGJA((std::string)"std::string");
std::string DGJB((std::string)"std::string");
std::string DGJC((std::string)"std::string");
std::string DGJD((std::string)"std::string");
std::string DGJE((std::string)"std::string");
std::string DGJF((std::string)"std::string");
std::string DGJG((std::string)"std::string");
std::string DGJH((std::string)"std::string");
std::string DGJI((std::string)"std::string");
std::string DGJJ((std::string)"std::string");
std::string DHAA((std::string)"std::string");
std::string DHAB((std::string)"std::string");
std::string DHAC((std::string)"std::string");
std::string DHAD((std::string)"std::string");
std::string DHAE((std::string)"std::string");
std::string DHAF((std::string)"std::string");
std::string DHAG((std::string)"std::string");
std::string DHAH((std::string)"std::string");
std::string DHAI((std::string)"std::string");
std::string DHAJ((std::string)"std::string");
std::string DHBA((std::string)"std::string");
std::string DHBB((std::string)"std::string");
std::string DHBC((std::string)"std::string");
std::string DHBD((std::string)"std::string");
std::string DHBE((std::string)"std::string");
std::string DHBF((std::string)"std::string");
std::string DHBG((std::string)"std::string");
std::string DHBH((std::string)"std::string");
std::string DHBI((std::string)"std::string");
std::string DHBJ((std::string)"std::string");
std::string DHCA((std::string)"std::string");
std::string DHCB((std::string)"std::string");
std::string DHCC((std::string)"std::string");
std::string DHCD((std::string)"std::string");
std::string DHCE((std::string)"std::string");
std::string DHCF((std::string)"std::string");
std::string DHCG((std::string)"std::string");
std::string DHCH((std::string)"std::string");
std::string DHCI((std::string)"std::string");
std::string DHCJ((std::string)"std::string");
std::string DHDA((std::string)"std::string");
std::string DHDB((std::string)"std::string");
std::string DHDC((std::string)"std::string");
std::string DHDD((std::string)"std::string");
std::string DHDE((std::string)"std::string");
std::string DHDF((std::string)"std::string");
std::string DHDG((std::string)"std::string");
std::string DHDH((std::string)"std::string");
std::string DHDI((std::string)"std::string");
std::string DHDJ((std::string)"std::string");
std::string DHEA((std::string)"std::string");
std::string DHEB((std::string)"std::string");
std::string DHEC((std::string)"std::string");
std::string DHED((std::string)"std::string");
std::string DHEE((std::string)"std::string");
std::string DHEF((std::string)"std::string");
std::string DHEG((std::string)"std::string");
std::string DHEH((std::string)"std::string");
std::string DHEI((std::string)"std::string");
std::string DHEJ((std::string)"std::string");
std::string DHFA((std::string)"std::string");
std::string DHFB((std::string)"std::string");
std::string DHFC((std::string)"std::string");
std::string DHFD((std::string)"std::string");
std::string DHFE((std::string)"std::string");
std::string DHFF((std::string)"std::string");
std::string DHFG((std::string)"std::string");
std::string DHFH((std::string)"std::string");
std::string DHFI((std::string)"std::string");
std::string DHFJ((std::string)"std::string");
std::string DHGA((std::string)"std::string");
std::string DHGB((std::string)"std::string");
std::string DHGC((std::string)"std::string");
std::string DHGD((std::string)"std::string");
std::string DHGE((std::string)"std::string");
std::string DHGF((std::string)"std::string");
std::string DHGG((std::string)"std::string");
std::string DHGH((std::string)"std::string");
std::string DHGI((std::string)"std::string");
std::string DHGJ((std::string)"std::string");
std::string DHHA((std::string)"std::string");
std::string DHHB((std::string)"std::string");
std::string DHHC((std::string)"std::string");
std::string DHHD((std::string)"std::string");
std::string DHHE((std::string)"std::string");
std::string DHHF((std::string)"std::string");
std::string DHHG((std::string)"std::string");
std::string DHHH((std::string)"std::string");
std::string DHHI((std::string)"std::string");
std::string DHHJ((std::string)"std::string");
std::string DHIA((std::string)"std::string");
std::string DHIB((std::string)"std::string");
std::string DHIC((std::string)"std::string");
std::string DHID((std::string)"std::string");
std::string DHIE((std::string)"std::string");
std::string DHIF((std::string)"std::string");
std::string DHIG((std::string)"std::string");
std::string DHIH((std::string)"std::string");
std::string DHII((std::string)"std::string");
std::string DHIJ((std::string)"std::string");
std::string DHJA((std::string)"std::string");
std::string DHJB((std::string)"std::string");
std::string DHJC((std::string)"std::string");
std::string DHJD((std::string)"std::string");
std::string DHJE((std::string)"std::string");
std::string DHJF((std::string)"std::string");
std::string DHJG((std::string)"std::string");
std::string DHJH((std::string)"std::string");
std::string DHJI((std::string)"std::string");
std::string DHJJ((std::string)"std::string");
std::string DIAA((std::string)"std::string");
std::string DIAB((std::string)"std::string");
std::string DIAC((std::string)"std::string");
std::string DIAD((std::string)"std::string");
std::string DIAE((std::string)"std::string");
std::string DIAF((std::string)"std::string");
std::string DIAG((std::string)"std::string");
std::string DIAH((std::string)"std::string");
std::string DIAI((std::string)"std::string");
std::string DIAJ((std::string)"std::string");
std::string DIBA((std::string)"std::string");
std::string DIBB((std::string)"std::string");
std::string DIBC((std::string)"std::string");
std::string DIBD((std::string)"std::string");
std::string DIBE((std::string)"std::string");
std::string DIBF((std::string)"std::string");
std::string DIBG((std::string)"std::string");
std::string DIBH((std::string)"std::string");
std::string DIBI((std::string)"std::string");
std::string DIBJ((std::string)"std::string");
std::string DICA((std::string)"std::string");
std::string DICB((std::string)"std::string");
std::string DICC((std::string)"std::string");
std::string DICD((std::string)"std::string");
std::string DICE((std::string)"std::string");
std::string DICF((std::string)"std::string");
std::string DICG((std::string)"std::string");
std::string DICH((std::string)"std::string");
std::string DICI((std::string)"std::string");
std::string DICJ((std::string)"std::string");
std::string DIDA((std::string)"std::string");
std::string DIDB((std::string)"std::string");
std::string DIDC((std::string)"std::string");
std::string DIDD((std::string)"std::string");
std::string DIDE((std::string)"std::string");
std::string DIDF((std::string)"std::string");
std::string DIDG((std::string)"std::string");
std::string DIDH((std::string)"std::string");
std::string DIDI((std::string)"std::string");
std::string DIDJ((std::string)"std::string");
std::string DIEA((std::string)"std::string");
std::string DIEB((std::string)"std::string");
std::string DIEC((std::string)"std::string");
std::string DIED((std::string)"std::string");
std::string DIEE((std::string)"std::string");
std::string DIEF((std::string)"std::string");
std::string DIEG((std::string)"std::string");
std::string DIEH((std::string)"std::string");
std::string DIEI((std::string)"std::string");
std::string DIEJ((std::string)"std::string");
std::string DIFA((std::string)"std::string");
std::string DIFB((std::string)"std::string");
std::string DIFC((std::string)"std::string");
std::string DIFD((std::string)"std::string");
std::string DIFE((std::string)"std::string");
std::string DIFF((std::string)"std::string");
std::string DIFG((std::string)"std::string");
std::string DIFH((std::string)"std::string");
std::string DIFI((std::string)"std::string");
std::string DIFJ((std::string)"std::string");
std::string DIGA((std::string)"std::string");
std::string DIGB((std::string)"std::string");
std::string DIGC((std::string)"std::string");
std::string DIGD((std::string)"std::string");
std::string DIGE((std::string)"std::string");
std::string DIGF((std::string)"std::string");
std::string DIGG((std::string)"std::string");
std::string DIGH((std::string)"std::string");
std::string DIGI((std::string)"std::string");
std::string DIGJ((std::string)"std::string");
std::string DIHA((std::string)"std::string");
std::string DIHB((std::string)"std::string");
std::string DIHC((std::string)"std::string");
std::string DIHD((std::string)"std::string");
std::string DIHE((std::string)"std::string");
std::string DIHF((std::string)"std::string");
std::string DIHG((std::string)"std::string");
std::string DIHH((std::string)"std::string");
std::string DIHI((std::string)"std::string");
std::string DIHJ((std::string)"std::string");
std::string DIIA((std::string)"std::string");
std::string DIIB((std::string)"std::string");
std::string DIIC((std::string)"std::string");
std::string DIID((std::string)"std::string");
std::string DIIE((std::string)"std::string");
std::string DIIF((std::string)"std::string");
std::string DIIG((std::string)"std::string");
std::string DIIH((std::string)"std::string");
std::string DIII((std::string)"std::string");
std::string DIIJ((std::string)"std::string");
std::string DIJA((std::string)"std::string");
std::string DIJB((std::string)"std::string");
std::string DIJC((std::string)"std::string");
std::string DIJD((std::string)"std::string");
std::string DIJE((std::string)"std::string");
std::string DIJF((std::string)"std::string");
std::string DIJG((std::string)"std::string");
std::string DIJH((std::string)"std::string");
std::string DIJI((std::string)"std::string");
std::string DIJJ((std::string)"std::string");
std::string DJAA((std::string)"std::string");
std::string DJAB((std::string)"std::string");
std::string DJAC((std::string)"std::string");
std::string DJAD((std::string)"std::string");
std::string DJAE((std::string)"std::string");
std::string DJAF((std::string)"std::string");
std::string DJAG((std::string)"std::string");
std::string DJAH((std::string)"std::string");
std::string DJAI((std::string)"std::string");
std::string DJAJ((std::string)"std::string");
std::string DJBA((std::string)"std::string");
std::string DJBB((std::string)"std::string");
std::string DJBC((std::string)"std::string");
std::string DJBD((std::string)"std::string");
std::string DJBE((std::string)"std::string");
std::string DJBF((std::string)"std::string");
std::string DJBG((std::string)"std::string");
std::string DJBH((std::string)"std::string");
std::string DJBI((std::string)"std::string");
std::string DJBJ((std::string)"std::string");
std::string DJCA((std::string)"std::string");
std::string DJCB((std::string)"std::string");
std::string DJCC((std::string)"std::string");
std::string DJCD((std::string)"std::string");
std::string DJCE((std::string)"std::string");
std::string DJCF((std::string)"std::string");
std::string DJCG((std::string)"std::string");
std::string DJCH((std::string)"std::string");
std::string DJCI((std::string)"std::string");
std::string DJCJ((std::string)"std::string");
std::string DJDA((std::string)"std::string");
std::string DJDB((std::string)"std::string");
std::string DJDC((std::string)"std::string");
std::string DJDD((std::string)"std::string");
std::string DJDE((std::string)"std::string");
std::string DJDF((std::string)"std::string");
std::string DJDG((std::string)"std::string");
std::string DJDH((std::string)"std::string");
std::string DJDI((std::string)"std::string");
std::string DJDJ((std::string)"std::string");
std::string DJEA((std::string)"std::string");
std::string DJEB((std::string)"std::string");
std::string DJEC((std::string)"std::string");
std::string DJED((std::string)"std::string");
std::string DJEE((std::string)"std::string");
std::string DJEF((std::string)"std::string");
std::string DJEG((std::string)"std::string");
std::string DJEH((std::string)"std::string");
std::string DJEI((std::string)"std::string");
std::string DJEJ((std::string)"std::string");
std::string DJFA((std::string)"std::string");
std::string DJFB((std::string)"std::string");
std::string DJFC((std::string)"std::string");
std::string DJFD((std::string)"std::string");
std::string DJFE((std::string)"std::string");
std::string DJFF((std::string)"std::string");
std::string DJFG((std::string)"std::string");
std::string DJFH((std::string)"std::string");
std::string DJFI((std::string)"std::string");
std::string DJFJ((std::string)"std::string");
std::string DJGA((std::string)"std::string");
std::string DJGB((std::string)"std::string");
std::string DJGC((std::string)"std::string");
std::string DJGD((std::string)"std::string");
std::string DJGE((std::string)"std::string");
std::string DJGF((std::string)"std::string");
std::string DJGG((std::string)"std::string");
std::string DJGH((std::string)"std::string");
std::string DJGI((std::string)"std::string");
std::string DJGJ((std::string)"std::string");
std::string DJHA((std::string)"std::string");
std::string DJHB((std::string)"std::string");
std::string DJHC((std::string)"std::string");
std::string DJHD((std::string)"std::string");
std::string DJHE((std::string)"std::string");
std::string DJHF((std::string)"std::string");
std::string DJHG((std::string)"std::string");
std::string DJHH((std::string)"std::string");
std::string DJHI((std::string)"std::string");
std::string DJHJ((std::string)"std::string");
std::string DJIA((std::string)"std::string");
std::string DJIB((std::string)"std::string");
std::string DJIC((std::string)"std::string");
std::string DJID((std::string)"std::string");
std::string DJIE((std::string)"std::string");
std::string DJIF((std::string)"std::string");
std::string DJIG((std::string)"std::string");
std::string DJIH((std::string)"std::string");
std::string DJII((std::string)"std::string");
std::string DJIJ((std::string)"std::string");
std::string DJJA((std::string)"std::string");
std::string DJJB((std::string)"std::string");
std::string DJJC((std::string)"std::string");
std::string DJJD((std::string)"std::string");
std::string DJJE((std::string)"std::string");
std::string DJJF((std::string)"std::string");
std::string DJJG((std::string)"std::string");
std::string DJJH((std::string)"std::string");
std::string DJJI((std::string)"std::string");
std::string DJJJ((std::string)"std::string");
std::string EAAA((std::string)"std::string");
std::string EAAB((std::string)"std::string");
std::string EAAC((std::string)"std::string");
std::string EAAD((std::string)"std::string");
std::string EAAE((std::string)"std::string");
std::string EAAF((std::string)"std::string");
std::string EAAG((std::string)"std::string");
std::string EAAH((std::string)"std::string");
std::string EAAI((std::string)"std::string");
std::string EAAJ((std::string)"std::string");
std::string EABA((std::string)"std::string");
std::string EABB((std::string)"std::string");
std::string EABC((std::string)"std::string");
std::string EABD((std::string)"std::string");
std::string EABE((std::string)"std::string");
std::string EABF((std::string)"std::string");
std::string EABG((std::string)"std::string");
std::string EABH((std::string)"std::string");
std::string EABI((std::string)"std::string");
std::string EABJ((std::string)"std::string");
std::string EACA((std::string)"std::string");
std::string EACB((std::string)"std::string");
std::string EACC((std::string)"std::string");
std::string EACD((std::string)"std::string");
std::string EACE((std::string)"std::string");
std::string EACF((std::string)"std::string");
std::string EACG((std::string)"std::string");
std::string EACH((std::string)"std::string");
std::string EACI((std::string)"std::string");
std::string EACJ((std::string)"std::string");
std::string EADA((std::string)"std::string");
std::string EADB((std::string)"std::string");
std::string EADC((std::string)"std::string");
std::string EADD((std::string)"std::string");
std::string EADE((std::string)"std::string");
std::string EADF((std::string)"std::string");
std::string EADG((std::string)"std::string");
std::string EADH((std::string)"std::string");
std::string EADI((std::string)"std::string");
std::string EADJ((std::string)"std::string");
std::string EAEA((std::string)"std::string");
std::string EAEB((std::string)"std::string");
std::string EAEC((std::string)"std::string");
std::string EAED((std::string)"std::string");
std::string EAEE((std::string)"std::string");
std::string EAEF((std::string)"std::string");
std::string EAEG((std::string)"std::string");
std::string EAEH((std::string)"std::string");
std::string EAEI((std::string)"std::string");
std::string EAEJ((std::string)"std::string");
std::string EAFA((std::string)"std::string");
std::string EAFB((std::string)"std::string");
std::string EAFC((std::string)"std::string");
std::string EAFD((std::string)"std::string");
std::string EAFE((std::string)"std::string");
std::string EAFF((std::string)"std::string");
std::string EAFG((std::string)"std::string");
std::string EAFH((std::string)"std::string");
std::string EAFI((std::string)"std::string");
std::string EAFJ((std::string)"std::string");
std::string EAGA((std::string)"std::string");
std::string EAGB((std::string)"std::string");
std::string EAGC((std::string)"std::string");
std::string EAGD((std::string)"std::string");
std::string EAGE((std::string)"std::string");
std::string EAGF((std::string)"std::string");
std::string EAGG((std::string)"std::string");
std::string EAGH((std::string)"std::string");
std::string EAGI((std::string)"std::string");
std::string EAGJ((std::string)"std::string");
std::string EAHA((std::string)"std::string");
std::string EAHB((std::string)"std::string");
std::string EAHC((std::string)"std::string");
std::string EAHD((std::string)"std::string");
std::string EAHE((std::string)"std::string");
std::string EAHF((std::string)"std::string");
std::string EAHG((std::string)"std::string");
std::string EAHH((std::string)"std::string");
std::string EAHI((std::string)"std::string");
std::string EAHJ((std::string)"std::string");
std::string EAIA((std::string)"std::string");
std::string EAIB((std::string)"std::string");
std::string EAIC((std::string)"std::string");
std::string EAID((std::string)"std::string");
std::string EAIE((std::string)"std::string");
std::string EAIF((std::string)"std::string");
std::string EAIG((std::string)"std::string");
std::string EAIH((std::string)"std::string");
std::string EAII((std::string)"std::string");
std::string EAIJ((std::string)"std::string");
std::string EAJA((std::string)"std::string");
std::string EAJB((std::string)"std::string");
std::string EAJC((std::string)"std::string");
std::string EAJD((std::string)"std::string");
std::string EAJE((std::string)"std::string");
std::string EAJF((std::string)"std::string");
std::string EAJG((std::string)"std::string");
std::string EAJH((std::string)"std::string");
std::string EAJI((std::string)"std::string");
std::string EAJJ((std::string)"std::string");
std::string EBAA((std::string)"std::string");
std::string EBAB((std::string)"std::string");
std::string EBAC((std::string)"std::string");
std::string EBAD((std::string)"std::string");
std::string EBAE((std::string)"std::string");
std::string EBAF((std::string)"std::string");
std::string EBAG((std::string)"std::string");
std::string EBAH((std::string)"std::string");
std::string EBAI((std::string)"std::string");
std::string EBAJ((std::string)"std::string");
std::string EBBA((std::string)"std::string");
std::string EBBB((std::string)"std::string");
std::string EBBC((std::string)"std::string");
std::string EBBD((std::string)"std::string");
std::string EBBE((std::string)"std::string");
std::string EBBF((std::string)"std::string");
std::string EBBG((std::string)"std::string");
std::string EBBH((std::string)"std::string");
std::string EBBI((std::string)"std::string");
std::string EBBJ((std::string)"std::string");
std::string EBCA((std::string)"std::string");
std::string EBCB((std::string)"std::string");
std::string EBCC((std::string)"std::string");
std::string EBCD((std::string)"std::string");
std::string EBCE((std::string)"std::string");
std::string EBCF((std::string)"std::string");
std::string EBCG((std::string)"std::string");
std::string EBCH((std::string)"std::string");
std::string EBCI((std::string)"std::string");
std::string EBCJ((std::string)"std::string");
std::string EBDA((std::string)"std::string");
std::string EBDB((std::string)"std::string");
std::string EBDC((std::string)"std::string");
std::string EBDD((std::string)"std::string");
std::string EBDE((std::string)"std::string");
std::string EBDF((std::string)"std::string");
std::string EBDG((std::string)"std::string");
std::string EBDH((std::string)"std::string");
std::string EBDI((std::string)"std::string");
std::string EBDJ((std::string)"std::string");
std::string EBEA((std::string)"std::string");
std::string EBEB((std::string)"std::string");
std::string EBEC((std::string)"std::string");
std::string EBED((std::string)"std::string");
std::string EBEE((std::string)"std::string");
std::string EBEF((std::string)"std::string");
std::string EBEG((std::string)"std::string");
std::string EBEH((std::string)"std::string");
std::string EBEI((std::string)"std::string");
std::string EBEJ((std::string)"std::string");
std::string EBFA((std::string)"std::string");
std::string EBFB((std::string)"std::string");
std::string EBFC((std::string)"std::string");
std::string EBFD((std::string)"std::string");
std::string EBFE((std::string)"std::string");
std::string EBFF((std::string)"std::string");
std::string EBFG((std::string)"std::string");
std::string EBFH((std::string)"std::string");
std::string EBFI((std::string)"std::string");
std::string EBFJ((std::string)"std::string");
std::string EBGA((std::string)"std::string");
std::string EBGB((std::string)"std::string");
std::string EBGC((std::string)"std::string");
std::string EBGD((std::string)"std::string");
std::string EBGE((std::string)"std::string");
std::string EBGF((std::string)"std::string");
std::string EBGG((std::string)"std::string");
std::string EBGH((std::string)"std::string");
std::string EBGI((std::string)"std::string");
std::string EBGJ((std::string)"std::string");
std::string EBHA((std::string)"std::string");
std::string EBHB((std::string)"std::string");
std::string EBHC((std::string)"std::string");
std::string EBHD((std::string)"std::string");
std::string EBHE((std::string)"std::string");
std::string EBHF((std::string)"std::string");
std::string EBHG((std::string)"std::string");
std::string EBHH((std::string)"std::string");
std::string EBHI((std::string)"std::string");
std::string EBHJ((std::string)"std::string");
std::string EBIA((std::string)"std::string");
std::string EBIB((std::string)"std::string");
std::string EBIC((std::string)"std::string");
std::string EBID((std::string)"std::string");
std::string EBIE((std::string)"std::string");
std::string EBIF((std::string)"std::string");
std::string EBIG((std::string)"std::string");
std::string EBIH((std::string)"std::string");
std::string EBII((std::string)"std::string");
std::string EBIJ((std::string)"std::string");
std::string EBJA((std::string)"std::string");
std::string EBJB((std::string)"std::string");
std::string EBJC((std::string)"std::string");
std::string EBJD((std::string)"std::string");
std::string EBJE((std::string)"std::string");
std::string EBJF((std::string)"std::string");
std::string EBJG((std::string)"std::string");
std::string EBJH((std::string)"std::string");
std::string EBJI((std::string)"std::string");
std::string EBJJ((std::string)"std::string");
std::string ECAA((std::string)"std::string");
std::string ECAB((std::string)"std::string");
std::string ECAC((std::string)"std::string");
std::string ECAD((std::string)"std::string");
std::string ECAE((std::string)"std::string");
std::string ECAF((std::string)"std::string");
std::string ECAG((std::string)"std::string");
std::string ECAH((std::string)"std::string");
std::string ECAI((std::string)"std::string");
std::string ECAJ((std::string)"std::string");
std::string ECBA((std::string)"std::string");
std::string ECBB((std::string)"std::string");
std::string ECBC((std::string)"std::string");
std::string ECBD((std::string)"std::string");
std::string ECBE((std::string)"std::string");
std::string ECBF((std::string)"std::string");
std::string ECBG((std::string)"std::string");
std::string ECBH((std::string)"std::string");
std::string ECBI((std::string)"std::string");
std::string ECBJ((std::string)"std::string");
std::string ECCA((std::string)"std::string");
std::string ECCB((std::string)"std::string");
std::string ECCC((std::string)"std::string");
std::string ECCD((std::string)"std::string");
std::string ECCE((std::string)"std::string");
std::string ECCF((std::string)"std::string");
std::string ECCG((std::string)"std::string");
std::string ECCH((std::string)"std::string");
std::string ECCI((std::string)"std::string");
std::string ECCJ((std::string)"std::string");
std::string ECDA((std::string)"std::string");
std::string ECDB((std::string)"std::string");
std::string ECDC((std::string)"std::string");
std::string ECDD((std::string)"std::string");
std::string ECDE((std::string)"std::string");
std::string ECDF((std::string)"std::string");
std::string ECDG((std::string)"std::string");
std::string ECDH((std::string)"std::string");
std::string ECDI((std::string)"std::string");
std::string ECDJ((std::string)"std::string");
std::string ECEA((std::string)"std::string");
std::string ECEB((std::string)"std::string");
std::string ECEC((std::string)"std::string");
std::string ECED((std::string)"std::string");
std::string ECEE((std::string)"std::string");
std::string ECEF((std::string)"std::string");
std::string ECEG((std::string)"std::string");
std::string ECEH((std::string)"std::string");
std::string ECEI((std::string)"std::string");
std::string ECEJ((std::string)"std::string");
std::string ECFA((std::string)"std::string");
std::string ECFB((std::string)"std::string");
std::string ECFC((std::string)"std::string");
std::string ECFD((std::string)"std::string");
std::string ECFE((std::string)"std::string");
std::string ECFF((std::string)"std::string");
std::string ECFG((std::string)"std::string");
std::string ECFH((std::string)"std::string");
std::string ECFI((std::string)"std::string");
std::string ECFJ((std::string)"std::string");
std::string ECGA((std::string)"std::string");
std::string ECGB((std::string)"std::string");
std::string ECGC((std::string)"std::string");
std::string ECGD((std::string)"std::string");
std::string ECGE((std::string)"std::string");
std::string ECGF((std::string)"std::string");
std::string ECGG((std::string)"std::string");
std::string ECGH((std::string)"std::string");
std::string ECGI((std::string)"std::string");
std::string ECGJ((std::string)"std::string");
std::string ECHA((std::string)"std::string");
std::string ECHB((std::string)"std::string");
std::string ECHC((std::string)"std::string");
std::string ECHD((std::string)"std::string");
std::string ECHE((std::string)"std::string");
std::string ECHF((std::string)"std::string");
std::string ECHG((std::string)"std::string");
std::string ECHH((std::string)"std::string");
std::string ECHI((std::string)"std::string");
std::string ECHJ((std::string)"std::string");
std::string ECIA((std::string)"std::string");
std::string ECIB((std::string)"std::string");
std::string ECIC((std::string)"std::string");
std::string ECID((std::string)"std::string");
std::string ECIE((std::string)"std::string");
std::string ECIF((std::string)"std::string");
std::string ECIG((std::string)"std::string");
std::string ECIH((std::string)"std::string");
std::string ECII((std::string)"std::string");
std::string ECIJ((std::string)"std::string");
std::string ECJA((std::string)"std::string");
std::string ECJB((std::string)"std::string");
std::string ECJC((std::string)"std::string");
std::string ECJD((std::string)"std::string");
std::string ECJE((std::string)"std::string");
std::string ECJF((std::string)"std::string");
std::string ECJG((std::string)"std::string");
std::string ECJH((std::string)"std::string");
std::string ECJI((std::string)"std::string");
std::string ECJJ((std::string)"std::string");
std::string EDAA((std::string)"std::string");
std::string EDAB((std::string)"std::string");
std::string EDAC((std::string)"std::string");
std::string EDAD((std::string)"std::string");
std::string EDAE((std::string)"std::string");
std::string EDAF((std::string)"std::string");
std::string EDAG((std::string)"std::string");
std::string EDAH((std::string)"std::string");
std::string EDAI((std::string)"std::string");
std::string EDAJ((std::string)"std::string");
std::string EDBA((std::string)"std::string");
std::string EDBB((std::string)"std::string");
std::string EDBC((std::string)"std::string");
std::string EDBD((std::string)"std::string");
std::string EDBE((std::string)"std::string");
std::string EDBF((std::string)"std::string");
std::string EDBG((std::string)"std::string");
std::string EDBH((std::string)"std::string");
std::string EDBI((std::string)"std::string");
std::string EDBJ((std::string)"std::string");
std::string EDCA((std::string)"std::string");
std::string EDCB((std::string)"std::string");
std::string EDCC((std::string)"std::string");
std::string EDCD((std::string)"std::string");
std::string EDCE((std::string)"std::string");
std::string EDCF((std::string)"std::string");
std::string EDCG((std::string)"std::string");
std::string EDCH((std::string)"std::string");
std::string EDCI((std::string)"std::string");
std::string EDCJ((std::string)"std::string");
std::string EDDA((std::string)"std::string");
std::string EDDB((std::string)"std::string");
std::string EDDC((std::string)"std::string");
std::string EDDD((std::string)"std::string");
std::string EDDE((std::string)"std::string");
std::string EDDF((std::string)"std::string");
std::string EDDG((std::string)"std::string");
std::string EDDH((std::string)"std::string");
std::string EDDI((std::string)"std::string");
std::string EDDJ((std::string)"std::string");
std::string EDEA((std::string)"std::string");
std::string EDEB((std::string)"std::string");
std::string EDEC((std::string)"std::string");
std::string EDED((std::string)"std::string");
std::string EDEE((std::string)"std::string");
std::string EDEF((std::string)"std::string");
std::string EDEG((std::string)"std::string");
std::string EDEH((std::string)"std::string");
std::string EDEI((std::string)"std::string");
std::string EDEJ((std::string)"std::string");
std::string EDFA((std::string)"std::string");
std::string EDFB((std::string)"std::string");
std::string EDFC((std::string)"std::string");
std::string EDFD((std::string)"std::string");
std::string EDFE((std::string)"std::string");
std::string EDFF((std::string)"std::string");
std::string EDFG((std::string)"std::string");
std::string EDFH((std::string)"std::string");
std::string EDFI((std::string)"std::string");
std::string EDFJ((std::string)"std::string");
std::string EDGA((std::string)"std::string");
std::string EDGB((std::string)"std::string");
std::string EDGC((std::string)"std::string");
std::string EDGD((std::string)"std::string");
std::string EDGE((std::string)"std::string");
std::string EDGF((std::string)"std::string");
std::string EDGG((std::string)"std::string");
std::string EDGH((std::string)"std::string");
std::string EDGI((std::string)"std::string");
std::string EDGJ((std::string)"std::string");
std::string EDHA((std::string)"std::string");
std::string EDHB((std::string)"std::string");
std::string EDHC((std::string)"std::string");
std::string EDHD((std::string)"std::string");
std::string EDHE((std::string)"std::string");
std::string EDHF((std::string)"std::string");
std::string EDHG((std::string)"std::string");
std::string EDHH((std::string)"std::string");
std::string EDHI((std::string)"std::string");
std::string EDHJ((std::string)"std::string");
std::string EDIA((std::string)"std::string");
std::string EDIB((std::string)"std::string");
std::string EDIC((std::string)"std::string");
std::string EDID((std::string)"std::string");
std::string EDIE((std::string)"std::string");
std::string EDIF((std::string)"std::string");
std::string EDIG((std::string)"std::string");
std::string EDIH((std::string)"std::string");
std::string EDII((std::string)"std::string");
std::string EDIJ((std::string)"std::string");
std::string EDJA((std::string)"std::string");
std::string EDJB((std::string)"std::string");
std::string EDJC((std::string)"std::string");
std::string EDJD((std::string)"std::string");
std::string EDJE((std::string)"std::string");
std::string EDJF((std::string)"std::string");
std::string EDJG((std::string)"std::string");
std::string EDJH((std::string)"std::string");
std::string EDJI((std::string)"std::string");
std::string EDJJ((std::string)"std::string");
std::string EEAA((std::string)"std::string");
std::string EEAB((std::string)"std::string");
std::string EEAC((std::string)"std::string");
std::string EEAD((std::string)"std::string");
std::string EEAE((std::string)"std::string");
std::string EEAF((std::string)"std::string");
std::string EEAG((std::string)"std::string");
std::string EEAH((std::string)"std::string");
std::string EEAI((std::string)"std::string");
std::string EEAJ((std::string)"std::string");
std::string EEBA((std::string)"std::string");
std::string EEBB((std::string)"std::string");
std::string EEBC((std::string)"std::string");
std::string EEBD((std::string)"std::string");
std::string EEBE((std::string)"std::string");
std::string EEBF((std::string)"std::string");
std::string EEBG((std::string)"std::string");
std::string EEBH((std::string)"std::string");
std::string EEBI((std::string)"std::string");
std::string EEBJ((std::string)"std::string");
std::string EECA((std::string)"std::string");
std::string EECB((std::string)"std::string");
std::string EECC((std::string)"std::string");
std::string EECD((std::string)"std::string");
std::string EECE((std::string)"std::string");
std::string EECF((std::string)"std::string");
std::string EECG((std::string)"std::string");
std::string EECH((std::string)"std::string");
std::string EECI((std::string)"std::string");
std::string EECJ((std::string)"std::string");
std::string EEDA((std::string)"std::string");
std::string EEDB((std::string)"std::string");
std::string EEDC((std::string)"std::string");
std::string EEDD((std::string)"std::string");
std::string EEDE((std::string)"std::string");
std::string EEDF((std::string)"std::string");
std::string EEDG((std::string)"std::string");
std::string EEDH((std::string)"std::string");
std::string EEDI((std::string)"std::string");
std::string EEDJ((std::string)"std::string");
std::string EEEA((std::string)"std::string");
std::string EEEB((std::string)"std::string");
std::string EEEC((std::string)"std::string");
std::string EEED((std::string)"std::string");
std::string EEEE((std::string)"std::string");
std::string EEEF((std::string)"std::string");
std::string EEEG((std::string)"std::string");
std::string EEEH((std::string)"std::string");
std::string EEEI((std::string)"std::string");
std::string EEEJ((std::string)"std::string");
std::string EEFA((std::string)"std::string");
std::string EEFB((std::string)"std::string");
std::string EEFC((std::string)"std::string");
std::string EEFD((std::string)"std::string");
std::string EEFE((std::string)"std::string");
std::string EEFF((std::string)"std::string");
std::string EEFG((std::string)"std::string");
std::string EEFH((std::string)"std::string");
std::string EEFI((std::string)"std::string");
std::string EEFJ((std::string)"std::string");
std::string EEGA((std::string)"std::string");
std::string EEGB((std::string)"std::string");
std::string EEGC((std::string)"std::string");
std::string EEGD((std::string)"std::string");
std::string EEGE((std::string)"std::string");
std::string EEGF((std::string)"std::string");
std::string EEGG((std::string)"std::string");
std::string EEGH((std::string)"std::string");
std::string EEGI((std::string)"std::string");
std::string EEGJ((std::string)"std::string");
std::string EEHA((std::string)"std::string");
std::string EEHB((std::string)"std::string");
std::string EEHC((std::string)"std::string");
std::string EEHD((std::string)"std::string");
std::string EEHE((std::string)"std::string");
std::string EEHF((std::string)"std::string");
std::string EEHG((std::string)"std::string");
std::string EEHH((std::string)"std::string");
std::string EEHI((std::string)"std::string");
std::string EEHJ((std::string)"std::string");
std::string EEIA((std::string)"std::string");
std::string EEIB((std::string)"std::string");
std::string EEIC((std::string)"std::string");
std::string EEID((std::string)"std::string");
std::string EEIE((std::string)"std::string");
std::string EEIF((std::string)"std::string");
std::string EEIG((std::string)"std::string");
std::string EEIH((std::string)"std::string");
std::string EEII((std::string)"std::string");
std::string EEIJ((std::string)"std::string");
std::string EEJA((std::string)"std::string");
std::string EEJB((std::string)"std::string");
std::string EEJC((std::string)"std::string");
std::string EEJD((std::string)"std::string");
std::string EEJE((std::string)"std::string");
std::string EEJF((std::string)"std::string");
std::string EEJG((std::string)"std::string");
std::string EEJH((std::string)"std::string");
std::string EEJI((std::string)"std::string");
std::string EEJJ((std::string)"std::string");
std::string EFAA((std::string)"std::string");
std::string EFAB((std::string)"std::string");
std::string EFAC((std::string)"std::string");
std::string EFAD((std::string)"std::string");
std::string EFAE((std::string)"std::string");
std::string EFAF((std::string)"std::string");
std::string EFAG((std::string)"std::string");
std::string EFAH((std::string)"std::string");
std::string EFAI((std::string)"std::string");
std::string EFAJ((std::string)"std::string");
std::string EFBA((std::string)"std::string");
std::string EFBB((std::string)"std::string");
std::string EFBC((std::string)"std::string");
std::string EFBD((std::string)"std::string");
std::string EFBE((std::string)"std::string");
std::string EFBF((std::string)"std::string");
std::string EFBG((std::string)"std::string");
std::string EFBH((std::string)"std::string");
std::string EFBI((std::string)"std::string");
std::string EFBJ((std::string)"std::string");
std::string EFCA((std::string)"std::string");
std::string EFCB((std::string)"std::string");
std::string EFCC((std::string)"std::string");
std::string EFCD((std::string)"std::string");
std::string EFCE((std::string)"std::string");
std::string EFCF((std::string)"std::string");
std::string EFCG((std::string)"std::string");
std::string EFCH((std::string)"std::string");
std::string EFCI((std::string)"std::string");
std::string EFCJ((std::string)"std::string");
std::string EFDA((std::string)"std::string");
std::string EFDB((std::string)"std::string");
std::string EFDC((std::string)"std::string");
std::string EFDD((std::string)"std::string");
std::string EFDE((std::string)"std::string");
std::string EFDF((std::string)"std::string");
std::string EFDG((std::string)"std::string");
std::string EFDH((std::string)"std::string");
std::string EFDI((std::string)"std::string");
std::string EFDJ((std::string)"std::string");
std::string EFEA((std::string)"std::string");
std::string EFEB((std::string)"std::string");
std::string EFEC((std::string)"std::string");
std::string EFED((std::string)"std::string");
std::string EFEE((std::string)"std::string");
std::string EFEF((std::string)"std::string");
std::string EFEG((std::string)"std::string");
std::string EFEH((std::string)"std::string");
std::string EFEI((std::string)"std::string");
std::string EFEJ((std::string)"std::string");
std::string EFFA((std::string)"std::string");
std::string EFFB((std::string)"std::string");
std::string EFFC((std::string)"std::string");
std::string EFFD((std::string)"std::string");
std::string EFFE((std::string)"std::string");
std::string EFFF((std::string)"std::string");
std::string EFFG((std::string)"std::string");
std::string EFFH((std::string)"std::string");
std::string EFFI((std::string)"std::string");
std::string EFFJ((std::string)"std::string");
std::string EFGA((std::string)"std::string");
std::string EFGB((std::string)"std::string");
std::string EFGC((std::string)"std::string");
std::string EFGD((std::string)"std::string");
std::string EFGE((std::string)"std::string");
std::string EFGF((std::string)"std::string");
std::string EFGG((std::string)"std::string");
std::string EFGH((std::string)"std::string");
std::string EFGI((std::string)"std::string");
std::string EFGJ((std::string)"std::string");
std::string EFHA((std::string)"std::string");
std::string EFHB((std::string)"std::string");
std::string EFHC((std::string)"std::string");
std::string EFHD((std::string)"std::string");
std::string EFHE((std::string)"std::string");
std::string EFHF((std::string)"std::string");
std::string EFHG((std::string)"std::string");
std::string EFHH((std::string)"std::string");
std::string EFHI((std::string)"std::string");
std::string EFHJ((std::string)"std::string");
std::string EFIA((std::string)"std::string");
std::string EFIB((std::string)"std::string");
std::string EFIC((std::string)"std::string");
std::string EFID((std::string)"std::string");
std::string EFIE((std::string)"std::string");
std::string EFIF((std::string)"std::string");
std::string EFIG((std::string)"std::string");
std::string EFIH((std::string)"std::string");
std::string EFII((std::string)"std::string");
std::string EFIJ((std::string)"std::string");
std::string EFJA((std::string)"std::string");
std::string EFJB((std::string)"std::string");
std::string EFJC((std::string)"std::string");
std::string EFJD((std::string)"std::string");
std::string EFJE((std::string)"std::string");
std::string EFJF((std::string)"std::string");
std::string EFJG((std::string)"std::string");
std::string EFJH((std::string)"std::string");
std::string EFJI((std::string)"std::string");
std::string EFJJ((std::string)"std::string");
std::string EGAA((std::string)"std::string");
std::string EGAB((std::string)"std::string");
std::string EGAC((std::string)"std::string");
std::string EGAD((std::string)"std::string");
std::string EGAE((std::string)"std::string");
std::string EGAF((std::string)"std::string");
std::string EGAG((std::string)"std::string");
std::string EGAH((std::string)"std::string");
std::string EGAI((std::string)"std::string");
std::string EGAJ((std::string)"std::string");
std::string EGBA((std::string)"std::string");
std::string EGBB((std::string)"std::string");
std::string EGBC((std::string)"std::string");
std::string EGBD((std::string)"std::string");
std::string EGBE((std::string)"std::string");
std::string EGBF((std::string)"std::string");
std::string EGBG((std::string)"std::string");
std::string EGBH((std::string)"std::string");
std::string EGBI((std::string)"std::string");
std::string EGBJ((std::string)"std::string");
std::string EGCA((std::string)"std::string");
std::string EGCB((std::string)"std::string");
std::string EGCC((std::string)"std::string");
std::string EGCD((std::string)"std::string");
std::string EGCE((std::string)"std::string");
std::string EGCF((std::string)"std::string");
std::string EGCG((std::string)"std::string");
std::string EGCH((std::string)"std::string");
std::string EGCI((std::string)"std::string");
std::string EGCJ((std::string)"std::string");
std::string EGDA((std::string)"std::string");
std::string EGDB((std::string)"std::string");
std::string EGDC((std::string)"std::string");
std::string EGDD((std::string)"std::string");
std::string EGDE((std::string)"std::string");
std::string EGDF((std::string)"std::string");
std::string EGDG((std::string)"std::string");
std::string EGDH((std::string)"std::string");
std::string EGDI((std::string)"std::string");
std::string EGDJ((std::string)"std::string");
std::string EGEA((std::string)"std::string");
std::string EGEB((std::string)"std::string");
std::string EGEC((std::string)"std::string");
std::string EGED((std::string)"std::string");
std::string EGEE((std::string)"std::string");
std::string EGEF((std::string)"std::string");
std::string EGEG((std::string)"std::string");
std::string EGEH((std::string)"std::string");
std::string EGEI((std::string)"std::string");
std::string EGEJ((std::string)"std::string");
std::string EGFA((std::string)"std::string");
std::string EGFB((std::string)"std::string");
std::string EGFC((std::string)"std::string");
std::string EGFD((std::string)"std::string");
std::string EGFE((std::string)"std::string");
std::string EGFF((std::string)"std::string");
std::string EGFG((std::string)"std::string");
std::string EGFH((std::string)"std::string");
std::string EGFI((std::string)"std::string");
std::string EGFJ((std::string)"std::string");
std::string EGGA((std::string)"std::string");
std::string EGGB((std::string)"std::string");
std::string EGGC((std::string)"std::string");
std::string EGGD((std::string)"std::string");
std::string EGGE((std::string)"std::string");
std::string EGGF((std::string)"std::string");
std::string EGGG((std::string)"std::string");
std::string EGGH((std::string)"std::string");
std::string EGGI((std::string)"std::string");
std::string EGGJ((std::string)"std::string");
std::string EGHA((std::string)"std::string");
std::string EGHB((std::string)"std::string");
std::string EGHC((std::string)"std::string");
std::string EGHD((std::string)"std::string");
std::string EGHE((std::string)"std::string");
std::string EGHF((std::string)"std::string");
std::string EGHG((std::string)"std::string");
std::string EGHH((std::string)"std::string");
std::string EGHI((std::string)"std::string");
std::string EGHJ((std::string)"std::string");
std::string EGIA((std::string)"std::string");
std::string EGIB((std::string)"std::string");
std::string EGIC((std::string)"std::string");
std::string EGID((std::string)"std::string");
std::string EGIE((std::string)"std::string");
std::string EGIF((std::string)"std::string");
std::string EGIG((std::string)"std::string");
std::string EGIH((std::string)"std::string");
std::string EGII((std::string)"std::string");
std::string EGIJ((std::string)"std::string");
std::string EGJA((std::string)"std::string");
std::string EGJB((std::string)"std::string");
std::string EGJC((std::string)"std::string");
std::string EGJD((std::string)"std::string");
std::string EGJE((std::string)"std::string");
std::string EGJF((std::string)"std::string");
std::string EGJG((std::string)"std::string");
std::string EGJH((std::string)"std::string");
std::string EGJI((std::string)"std::string");
std::string EGJJ((std::string)"std::string");
std::string EHAA((std::string)"std::string");
std::string EHAB((std::string)"std::string");
std::string EHAC((std::string)"std::string");
std::string EHAD((std::string)"std::string");
std::string EHAE((std::string)"std::string");
std::string EHAF((std::string)"std::string");
std::string EHAG((std::string)"std::string");
std::string EHAH((std::string)"std::string");
std::string EHAI((std::string)"std::string");
std::string EHAJ((std::string)"std::string");
std::string EHBA((std::string)"std::string");
std::string EHBB((std::string)"std::string");
std::string EHBC((std::string)"std::string");
std::string EHBD((std::string)"std::string");
std::string EHBE((std::string)"std::string");
std::string EHBF((std::string)"std::string");
std::string EHBG((std::string)"std::string");
std::string EHBH((std::string)"std::string");
std::string EHBI((std::string)"std::string");
std::string EHBJ((std::string)"std::string");
std::string EHCA((std::string)"std::string");
std::string EHCB((std::string)"std::string");
std::string EHCC((std::string)"std::string");
std::string EHCD((std::string)"std::string");
std::string EHCE((std::string)"std::string");
std::string EHCF((std::string)"std::string");
std::string EHCG((std::string)"std::string");
std::string EHCH((std::string)"std::string");
std::string EHCI((std::string)"std::string");
std::string EHCJ((std::string)"std::string");
std::string EHDA((std::string)"std::string");
std::string EHDB((std::string)"std::string");
std::string EHDC((std::string)"std::string");
std::string EHDD((std::string)"std::string");
std::string EHDE((std::string)"std::string");
std::string EHDF((std::string)"std::string");
std::string EHDG((std::string)"std::string");
std::string EHDH((std::string)"std::string");
std::string EHDI((std::string)"std::string");
std::string EHDJ((std::string)"std::string");
std::string EHEA((std::string)"std::string");
std::string EHEB((std::string)"std::string");
std::string EHEC((std::string)"std::string");
std::string EHED((std::string)"std::string");
std::string EHEE((std::string)"std::string");
std::string EHEF((std::string)"std::string");
std::string EHEG((std::string)"std::string");
std::string EHEH((std::string)"std::string");
std::string EHEI((std::string)"std::string");
std::string EHEJ((std::string)"std::string");
std::string EHFA((std::string)"std::string");
std::string EHFB((std::string)"std::string");
std::string EHFC((std::string)"std::string");
std::string EHFD((std::string)"std::string");
std::string EHFE((std::string)"std::string");
std::string EHFF((std::string)"std::string");
std::string EHFG((std::string)"std::string");
std::string EHFH((std::string)"std::string");
std::string EHFI((std::string)"std::string");
std::string EHFJ((std::string)"std::string");
std::string EHGA((std::string)"std::string");
std::string EHGB((std::string)"std::string");
std::string EHGC((std::string)"std::string");
std::string EHGD((std::string)"std::string");
std::string EHGE((std::string)"std::string");
std::string EHGF((std::string)"std::string");
std::string EHGG((std::string)"std::string");
std::string EHGH((std::string)"std::string");
std::string EHGI((std::string)"std::string");
std::string EHGJ((std::string)"std::string");
std::string EHHA((std::string)"std::string");
std::string EHHB((std::string)"std::string");
std::string EHHC((std::string)"std::string");
std::string EHHD((std::string)"std::string");
std::string EHHE((std::string)"std::string");
std::string EHHF((std::string)"std::string");
std::string EHHG((std::string)"std::string");
std::string EHHH((std::string)"std::string");
std::string EHHI((std::string)"std::string");
std::string EHHJ((std::string)"std::string");
std::string EHIA((std::string)"std::string");
std::string EHIB((std::string)"std::string");
std::string EHIC((std::string)"std::string");
std::string EHID((std::string)"std::string");
std::string EHIE((std::string)"std::string");
std::string EHIF((std::string)"std::string");
std::string EHIG((std::string)"std::string");
std::string EHIH((std::string)"std::string");
std::string EHII((std::string)"std::string");
std::string EHIJ((std::string)"std::string");
std::string EHJA((std::string)"std::string");
std::string EHJB((std::string)"std::string");
std::string EHJC((std::string)"std::string");
std::string EHJD((std::string)"std::string");
std::string EHJE((std::string)"std::string");
std::string EHJF((std::string)"std::string");
std::string EHJG((std::string)"std::string");
std::string EHJH((std::string)"std::string");
std::string EHJI((std::string)"std::string");
std::string EHJJ((std::string)"std::string");
std::string EIAA((std::string)"std::string");
std::string EIAB((std::string)"std::string");
std::string EIAC((std::string)"std::string");
std::string EIAD((std::string)"std::string");
std::string EIAE((std::string)"std::string");
std::string EIAF((std::string)"std::string");
std::string EIAG((std::string)"std::string");
std::string EIAH((std::string)"std::string");
std::string EIAI((std::string)"std::string");
std::string EIAJ((std::string)"std::string");
std::string EIBA((std::string)"std::string");
std::string EIBB((std::string)"std::string");
std::string EIBC((std::string)"std::string");
std::string EIBD((std::string)"std::string");
std::string EIBE((std::string)"std::string");
std::string EIBF((std::string)"std::string");
std::string EIBG((std::string)"std::string");
std::string EIBH((std::string)"std::string");
std::string EIBI((std::string)"std::string");
std::string EIBJ((std::string)"std::string");
std::string EICA((std::string)"std::string");
std::string EICB((std::string)"std::string");
std::string EICC((std::string)"std::string");
std::string EICD((std::string)"std::string");
std::string EICE((std::string)"std::string");
std::string EICF((std::string)"std::string");
std::string EICG((std::string)"std::string");
std::string EICH((std::string)"std::string");
std::string EICI((std::string)"std::string");
std::string EICJ((std::string)"std::string");
std::string EIDA((std::string)"std::string");
std::string EIDB((std::string)"std::string");
std::string EIDC((std::string)"std::string");
std::string EIDD((std::string)"std::string");
std::string EIDE((std::string)"std::string");
std::string EIDF((std::string)"std::string");
std::string EIDG((std::string)"std::string");
std::string EIDH((std::string)"std::string");
std::string EIDI((std::string)"std::string");
std::string EIDJ((std::string)"std::string");
std::string EIEA((std::string)"std::string");
std::string EIEB((std::string)"std::string");
std::string EIEC((std::string)"std::string");
std::string EIED((std::string)"std::string");
std::string EIEE((std::string)"std::string");
std::string EIEF((std::string)"std::string");
std::string EIEG((std::string)"std::string");
std::string EIEH((std::string)"std::string");
std::string EIEI((std::string)"std::string");
std::string EIEJ((std::string)"std::string");
std::string EIFA((std::string)"std::string");
std::string EIFB((std::string)"std::string");
std::string EIFC((std::string)"std::string");
std::string EIFD((std::string)"std::string");
std::string EIFE((std::string)"std::string");
std::string EIFF((std::string)"std::string");
std::string EIFG((std::string)"std::string");
std::string EIFH((std::string)"std::string");
std::string EIFI((std::string)"std::string");
std::string EIFJ((std::string)"std::string");
std::string EIGA((std::string)"std::string");
std::string EIGB((std::string)"std::string");
std::string EIGC((std::string)"std::string");
std::string EIGD((std::string)"std::string");
std::string EIGE((std::string)"std::string");
std::string EIGF((std::string)"std::string");
std::string EIGG((std::string)"std::string");
std::string EIGH((std::string)"std::string");
std::string EIGI((std::string)"std::string");
std::string EIGJ((std::string)"std::string");
std::string EIHA((std::string)"std::string");
std::string EIHB((std::string)"std::string");
std::string EIHC((std::string)"std::string");
std::string EIHD((std::string)"std::string");
std::string EIHE((std::string)"std::string");
std::string EIHF((std::string)"std::string");
std::string EIHG((std::string)"std::string");
std::string EIHH((std::string)"std::string");
std::string EIHI((std::string)"std::string");
std::string EIHJ((std::string)"std::string");
std::string EIIA((std::string)"std::string");
std::string EIIB((std::string)"std::string");
std::string EIIC((std::string)"std::string");
std::string EIID((std::string)"std::string");
std::string EIIE((std::string)"std::string");
std::string EIIF((std::string)"std::string");
std::string EIIG((std::string)"std::string");
std::string EIIH((std::string)"std::string");
std::string EIII((std::string)"std::string");
std::string EIIJ((std::string)"std::string");
std::string EIJA((std::string)"std::string");
std::string EIJB((std::string)"std::string");
std::string EIJC((std::string)"std::string");
std::string EIJD((std::string)"std::string");
std::string EIJE((std::string)"std::string");
std::string EIJF((std::string)"std::string");
std::string EIJG((std::string)"std::string");
std::string EIJH((std::string)"std::string");
std::string EIJI((std::string)"std::string");
std::string EIJJ((std::string)"std::string");
std::string EJAA((std::string)"std::string");
std::string EJAB((std::string)"std::string");
std::string EJAC((std::string)"std::string");
std::string EJAD((std::string)"std::string");
std::string EJAE((std::string)"std::string");
std::string EJAF((std::string)"std::string");
std::string EJAG((std::string)"std::string");
std::string EJAH((std::string)"std::string");
std::string EJAI((std::string)"std::string");
std::string EJAJ((std::string)"std::string");
std::string EJBA((std::string)"std::string");
std::string EJBB((std::string)"std::string");
std::string EJBC((std::string)"std::string");
std::string EJBD((std::string)"std::string");
std::string EJBE((std::string)"std::string");
std::string EJBF((std::string)"std::string");
std::string EJBG((std::string)"std::string");
std::string EJBH((std::string)"std::string");
std::string EJBI((std::string)"std::string");
std::string EJBJ((std::string)"std::string");
std::string EJCA((std::string)"std::string");
std::string EJCB((std::string)"std::string");
std::string EJCC((std::string)"std::string");
std::string EJCD((std::string)"std::string");
std::string EJCE((std::string)"std::string");
std::string EJCF((std::string)"std::string");
std::string EJCG((std::string)"std::string");
std::string EJCH((std::string)"std::string");
std::string EJCI((std::string)"std::string");
std::string EJCJ((std::string)"std::string");
std::string EJDA((std::string)"std::string");
std::string EJDB((std::string)"std::string");
std::string EJDC((std::string)"std::string");
std::string EJDD((std::string)"std::string");
std::string EJDE((std::string)"std::string");
std::string EJDF((std::string)"std::string");
std::string EJDG((std::string)"std::string");
std::string EJDH((std::string)"std::string");
std::string EJDI((std::string)"std::string");
std::string EJDJ((std::string)"std::string");
std::string EJEA((std::string)"std::string");
std::string EJEB((std::string)"std::string");
std::string EJEC((std::string)"std::string");
std::string EJED((std::string)"std::string");
std::string EJEE((std::string)"std::string");
std::string EJEF((std::string)"std::string");
std::string EJEG((std::string)"std::string");
std::string EJEH((std::string)"std::string");
std::string EJEI((std::string)"std::string");
std::string EJEJ((std::string)"std::string");
std::string EJFA((std::string)"std::string");
std::string EJFB((std::string)"std::string");
std::string EJFC((std::string)"std::string");
std::string EJFD((std::string)"std::string");
std::string EJFE((std::string)"std::string");
std::string EJFF((std::string)"std::string");
std::string EJFG((std::string)"std::string");
std::string EJFH((std::string)"std::string");
std::string EJFI((std::string)"std::string");
std::string EJFJ((std::string)"std::string");
std::string EJGA((std::string)"std::string");
std::string EJGB((std::string)"std::string");
std::string EJGC((std::string)"std::string");
std::string EJGD((std::string)"std::string");
std::string EJGE((std::string)"std::string");
std::string EJGF((std::string)"std::string");
std::string EJGG((std::string)"std::string");
std::string EJGH((std::string)"std::string");
std::string EJGI((std::string)"std::string");
std::string EJGJ((std::string)"std::string");
std::string EJHA((std::string)"std::string");
std::string EJHB((std::string)"std::string");
std::string EJHC((std::string)"std::string");
std::string EJHD((std::string)"std::string");
std::string EJHE((std::string)"std::string");
std::string EJHF((std::string)"std::string");
std::string EJHG((std::string)"std::string");
std::string EJHH((std::string)"std::string");
std::string EJHI((std::string)"std::string");
std::string EJHJ((std::string)"std::string");
std::string EJIA((std::string)"std::string");
std::string EJIB((std::string)"std::string");
std::string EJIC((std::string)"std::string");
std::string EJID((std::string)"std::string");
std::string EJIE((std::string)"std::string");
std::string EJIF((std::string)"std::string");
std::string EJIG((std::string)"std::string");
std::string EJIH((std::string)"std::string");
std::string EJII((std::string)"std::string");
std::string EJIJ((std::string)"std::string");
std::string EJJA((std::string)"std::string");
std::string EJJB((std::string)"std::string");
std::string EJJC((std::string)"std::string");
std::string EJJD((std::string)"std::string");
std::string EJJE((std::string)"std::string");
std::string EJJF((std::string)"std::string");
std::string EJJG((std::string)"std::string");
std::string EJJH((std::string)"std::string");
std::string EJJI((std::string)"std::string");
std::string EJJJ((std::string)"std::string");
std::string FAAA((std::string)"std::string");
std::string FAAB((std::string)"std::string");
std::string FAAC((std::string)"std::string");
std::string FAAD((std::string)"std::string");
std::string FAAE((std::string)"std::string");
std::string FAAF((std::string)"std::string");
std::string FAAG((std::string)"std::string");
std::string FAAH((std::string)"std::string");
std::string FAAI((std::string)"std::string");
std::string FAAJ((std::string)"std::string");
std::string FABA((std::string)"std::string");
std::string FABB((std::string)"std::string");
std::string FABC((std::string)"std::string");
std::string FABD((std::string)"std::string");
std::string FABE((std::string)"std::string");
std::string FABF((std::string)"std::string");
std::string FABG((std::string)"std::string");
std::string FABH((std::string)"std::string");
std::string FABI((std::string)"std::string");
std::string FABJ((std::string)"std::string");
std::string FACA((std::string)"std::string");
std::string FACB((std::string)"std::string");
std::string FACC((std::string)"std::string");
std::string FACD((std::string)"std::string");
std::string FACE((std::string)"std::string");
std::string FACF((std::string)"std::string");
std::string FACG((std::string)"std::string");
std::string FACH((std::string)"std::string");
std::string FACI((std::string)"std::string");
std::string FACJ((std::string)"std::string");
std::string FADA((std::string)"std::string");
std::string FADB((std::string)"std::string");
std::string FADC((std::string)"std::string");
std::string FADD((std::string)"std::string");
std::string FADE((std::string)"std::string");
std::string FADF((std::string)"std::string");
std::string FADG((std::string)"std::string");
std::string FADH((std::string)"std::string");
std::string FADI((std::string)"std::string");
std::string FADJ((std::string)"std::string");
std::string FAEA((std::string)"std::string");
std::string FAEB((std::string)"std::string");
std::string FAEC((std::string)"std::string");
std::string FAED((std::string)"std::string");
std::string FAEE((std::string)"std::string");
std::string FAEF((std::string)"std::string");
std::string FAEG((std::string)"std::string");
std::string FAEH((std::string)"std::string");
std::string FAEI((std::string)"std::string");
std::string FAEJ((std::string)"std::string");
std::string FAFA((std::string)"std::string");
std::string FAFB((std::string)"std::string");
std::string FAFC((std::string)"std::string");
std::string FAFD((std::string)"std::string");
std::string FAFE((std::string)"std::string");
std::string FAFF((std::string)"std::string");
std::string FAFG((std::string)"std::string");
std::string FAFH((std::string)"std::string");
std::string FAFI((std::string)"std::string");
std::string FAFJ((std::string)"std::string");
std::string FAGA((std::string)"std::string");
std::string FAGB((std::string)"std::string");
std::string FAGC((std::string)"std::string");
std::string FAGD((std::string)"std::string");
std::string FAGE((std::string)"std::string");
std::string FAGF((std::string)"std::string");
std::string FAGG((std::string)"std::string");
std::string FAGH((std::string)"std::string");
std::string FAGI((std::string)"std::string");
std::string FAGJ((std::string)"std::string");
std::string FAHA((std::string)"std::string");
std::string FAHB((std::string)"std::string");
std::string FAHC((std::string)"std::string");
std::string FAHD((std::string)"std::string");
std::string FAHE((std::string)"std::string");
std::string FAHF((std::string)"std::string");
std::string FAHG((std::string)"std::string");
std::string FAHH((std::string)"std::string");
std::string FAHI((std::string)"std::string");
std::string FAHJ((std::string)"std::string");
std::string FAIA((std::string)"std::string");
std::string FAIB((std::string)"std::string");
std::string FAIC((std::string)"std::string");
std::string FAID((std::string)"std::string");
std::string FAIE((std::string)"std::string");
std::string FAIF((std::string)"std::string");
std::string FAIG((std::string)"std::string");
std::string FAIH((std::string)"std::string");
std::string FAII((std::string)"std::string");
std::string FAIJ((std::string)"std::string");
std::string FAJA((std::string)"std::string");
std::string FAJB((std::string)"std::string");
std::string FAJC((std::string)"std::string");
std::string FAJD((std::string)"std::string");
std::string FAJE((std::string)"std::string");
std::string FAJF((std::string)"std::string");
std::string FAJG((std::string)"std::string");
std::string FAJH((std::string)"std::string");
std::string FAJI((std::string)"std::string");
std::string FAJJ((std::string)"std::string");
std::string FBAA((std::string)"std::string");
std::string FBAB((std::string)"std::string");
std::string FBAC((std::string)"std::string");
std::string FBAD((std::string)"std::string");
std::string FBAE((std::string)"std::string");
std::string FBAF((std::string)"std::string");
std::string FBAG((std::string)"std::string");
std::string FBAH((std::string)"std::string");
std::string FBAI((std::string)"std::string");
std::string FBAJ((std::string)"std::string");
std::string FBBA((std::string)"std::string");
std::string FBBB((std::string)"std::string");
std::string FBBC((std::string)"std::string");
std::string FBBD((std::string)"std::string");
std::string FBBE((std::string)"std::string");
std::string FBBF((std::string)"std::string");
std::string FBBG((std::string)"std::string");
std::string FBBH((std::string)"std::string");
std::string FBBI((std::string)"std::string");
std::string FBBJ((std::string)"std::string");
std::string FBCA((std::string)"std::string");
std::string FBCB((std::string)"std::string");
std::string FBCC((std::string)"std::string");
std::string FBCD((std::string)"std::string");
std::string FBCE((std::string)"std::string");
std::string FBCF((std::string)"std::string");
std::string FBCG((std::string)"std::string");
std::string FBCH((std::string)"std::string");
std::string FBCI((std::string)"std::string");
std::string FBCJ((std::string)"std::string");
std::string FBDA((std::string)"std::string");
std::string FBDB((std::string)"std::string");
std::string FBDC((std::string)"std::string");
std::string FBDD((std::string)"std::string");
std::string FBDE((std::string)"std::string");
std::string FBDF((std::string)"std::string");
std::string FBDG((std::string)"std::string");
std::string FBDH((std::string)"std::string");
std::string FBDI((std::string)"std::string");
std::string FBDJ((std::string)"std::string");
std::string FBEA((std::string)"std::string");
std::string FBEB((std::string)"std::string");
std::string FBEC((std::string)"std::string");
std::string FBED((std::string)"std::string");
std::string FBEE((std::string)"std::string");
std::string FBEF((std::string)"std::string");
std::string FBEG((std::string)"std::string");
std::string FBEH((std::string)"std::string");
std::string FBEI((std::string)"std::string");
std::string FBEJ((std::string)"std::string");
std::string FBFA((std::string)"std::string");
std::string FBFB((std::string)"std::string");
std::string FBFC((std::string)"std::string");
std::string FBFD((std::string)"std::string");
std::string FBFE((std::string)"std::string");
std::string FBFF((std::string)"std::string");
std::string FBFG((std::string)"std::string");
std::string FBFH((std::string)"std::string");
std::string FBFI((std::string)"std::string");
std::string FBFJ((std::string)"std::string");
std::string FBGA((std::string)"std::string");
std::string FBGB((std::string)"std::string");
std::string FBGC((std::string)"std::string");
std::string FBGD((std::string)"std::string");
std::string FBGE((std::string)"std::string");
std::string FBGF((std::string)"std::string");
std::string FBGG((std::string)"std::string");
std::string FBGH((std::string)"std::string");
std::string FBGI((std::string)"std::string");
std::string FBGJ((std::string)"std::string");
std::string FBHA((std::string)"std::string");
std::string FBHB((std::string)"std::string");
std::string FBHC((std::string)"std::string");
std::string FBHD((std::string)"std::string");
std::string FBHE((std::string)"std::string");
std::string FBHF((std::string)"std::string");
std::string FBHG((std::string)"std::string");
std::string FBHH((std::string)"std::string");
std::string FBHI((std::string)"std::string");
std::string FBHJ((std::string)"std::string");
std::string FBIA((std::string)"std::string");
std::string FBIB((std::string)"std::string");
std::string FBIC((std::string)"std::string");
std::string FBID((std::string)"std::string");
std::string FBIE((std::string)"std::string");
std::string FBIF((std::string)"std::string");
std::string FBIG((std::string)"std::string");
std::string FBIH((std::string)"std::string");
std::string FBII((std::string)"std::string");
std::string FBIJ((std::string)"std::string");
std::string FBJA((std::string)"std::string");
std::string FBJB((std::string)"std::string");
std::string FBJC((std::string)"std::string");
std::string FBJD((std::string)"std::string");
std::string FBJE((std::string)"std::string");
std::string FBJF((std::string)"std::string");
std::string FBJG((std::string)"std::string");
std::string FBJH((std::string)"std::string");
std::string FBJI((std::string)"std::string");
std::string FBJJ((std::string)"std::string");
std::string FCAA((std::string)"std::string");
std::string FCAB((std::string)"std::string");
std::string FCAC((std::string)"std::string");
std::string FCAD((std::string)"std::string");
std::string FCAE((std::string)"std::string");
std::string FCAF((std::string)"std::string");
std::string FCAG((std::string)"std::string");
std::string FCAH((std::string)"std::string");
std::string FCAI((std::string)"std::string");
std::string FCAJ((std::string)"std::string");
std::string FCBA((std::string)"std::string");
std::string FCBB((std::string)"std::string");
std::string FCBC((std::string)"std::string");
std::string FCBD((std::string)"std::string");
std::string FCBE((std::string)"std::string");
std::string FCBF((std::string)"std::string");
std::string FCBG((std::string)"std::string");
std::string FCBH((std::string)"std::string");
std::string FCBI((std::string)"std::string");
std::string FCBJ((std::string)"std::string");
std::string FCCA((std::string)"std::string");
std::string FCCB((std::string)"std::string");
std::string FCCC((std::string)"std::string");
std::string FCCD((std::string)"std::string");
std::string FCCE((std::string)"std::string");
std::string FCCF((std::string)"std::string");
std::string FCCG((std::string)"std::string");
std::string FCCH((std::string)"std::string");
std::string FCCI((std::string)"std::string");
std::string FCCJ((std::string)"std::string");
std::string FCDA((std::string)"std::string");
std::string FCDB((std::string)"std::string");
std::string FCDC((std::string)"std::string");
std::string FCDD((std::string)"std::string");
std::string FCDE((std::string)"std::string");
std::string FCDF((std::string)"std::string");
std::string FCDG((std::string)"std::string");
std::string FCDH((std::string)"std::string");
std::string FCDI((std::string)"std::string");
std::string FCDJ((std::string)"std::string");
std::string FCEA((std::string)"std::string");
std::string FCEB((std::string)"std::string");
std::string FCEC((std::string)"std::string");
std::string FCED((std::string)"std::string");
std::string FCEE((std::string)"std::string");
std::string FCEF((std::string)"std::string");
std::string FCEG((std::string)"std::string");
std::string FCEH((std::string)"std::string");
std::string FCEI((std::string)"std::string");
std::string FCEJ((std::string)"std::string");
std::string FCFA((std::string)"std::string");
std::string FCFB((std::string)"std::string");
std::string FCFC((std::string)"std::string");
std::string FCFD((std::string)"std::string");
std::string FCFE((std::string)"std::string");
std::string FCFF((std::string)"std::string");
std::string FCFG((std::string)"std::string");
std::string FCFH((std::string)"std::string");
std::string FCFI((std::string)"std::string");
std::string FCFJ((std::string)"std::string");
std::string FCGA((std::string)"std::string");
std::string FCGB((std::string)"std::string");
std::string FCGC((std::string)"std::string");
std::string FCGD((std::string)"std::string");
std::string FCGE((std::string)"std::string");
std::string FCGF((std::string)"std::string");
std::string FCGG((std::string)"std::string");
std::string FCGH((std::string)"std::string");
std::string FCGI((std::string)"std::string");
std::string FCGJ((std::string)"std::string");
std::string FCHA((std::string)"std::string");
std::string FCHB((std::string)"std::string");
std::string FCHC((std::string)"std::string");
std::string FCHD((std::string)"std::string");
std::string FCHE((std::string)"std::string");
std::string FCHF((std::string)"std::string");
std::string FCHG((std::string)"std::string");
std::string FCHH((std::string)"std::string");
std::string FCHI((std::string)"std::string");
std::string FCHJ((std::string)"std::string");
std::string FCIA((std::string)"std::string");
std::string FCIB((std::string)"std::string");
std::string FCIC((std::string)"std::string");
std::string FCID((std::string)"std::string");
std::string FCIE((std::string)"std::string");
std::string FCIF((std::string)"std::string");
std::string FCIG((std::string)"std::string");
std::string FCIH((std::string)"std::string");
std::string FCII((std::string)"std::string");
std::string FCIJ((std::string)"std::string");
std::string FCJA((std::string)"std::string");
std::string FCJB((std::string)"std::string");
std::string FCJC((std::string)"std::string");
std::string FCJD((std::string)"std::string");
std::string FCJE((std::string)"std::string");
std::string FCJF((std::string)"std::string");
std::string FCJG((std::string)"std::string");
std::string FCJH((std::string)"std::string");
std::string FCJI((std::string)"std::string");
std::string FCJJ((std::string)"std::string");
std::string FDAA((std::string)"std::string");
std::string FDAB((std::string)"std::string");
std::string FDAC((std::string)"std::string");
std::string FDAD((std::string)"std::string");
std::string FDAE((std::string)"std::string");
std::string FDAF((std::string)"std::string");
std::string FDAG((std::string)"std::string");
std::string FDAH((std::string)"std::string");
std::string FDAI((std::string)"std::string");
std::string FDAJ((std::string)"std::string");
std::string FDBA((std::string)"std::string");
std::string FDBB((std::string)"std::string");
std::string FDBC((std::string)"std::string");
std::string FDBD((std::string)"std::string");
std::string FDBE((std::string)"std::string");
std::string FDBF((std::string)"std::string");
std::string FDBG((std::string)"std::string");
std::string FDBH((std::string)"std::string");
std::string FDBI((std::string)"std::string");
std::string FDBJ((std::string)"std::string");
std::string FDCA((std::string)"std::string");
std::string FDCB((std::string)"std::string");
std::string FDCC((std::string)"std::string");
std::string FDCD((std::string)"std::string");
std::string FDCE((std::string)"std::string");
std::string FDCF((std::string)"std::string");
std::string FDCG((std::string)"std::string");
std::string FDCH((std::string)"std::string");
std::string FDCI((std::string)"std::string");
std::string FDCJ((std::string)"std::string");
std::string FDDA((std::string)"std::string");
std::string FDDB((std::string)"std::string");
std::string FDDC((std::string)"std::string");
std::string FDDD((std::string)"std::string");
std::string FDDE((std::string)"std::string");
std::string FDDF((std::string)"std::string");
std::string FDDG((std::string)"std::string");
std::string FDDH((std::string)"std::string");
std::string FDDI((std::string)"std::string");
std::string FDDJ((std::string)"std::string");
std::string FDEA((std::string)"std::string");
std::string FDEB((std::string)"std::string");
std::string FDEC((std::string)"std::string");
std::string FDED((std::string)"std::string");
std::string FDEE((std::string)"std::string");
std::string FDEF((std::string)"std::string");
std::string FDEG((std::string)"std::string");
std::string FDEH((std::string)"std::string");
std::string FDEI((std::string)"std::string");
std::string FDEJ((std::string)"std::string");
std::string FDFA((std::string)"std::string");
std::string FDFB((std::string)"std::string");
std::string FDFC((std::string)"std::string");
std::string FDFD((std::string)"std::string");
std::string FDFE((std::string)"std::string");
std::string FDFF((std::string)"std::string");
std::string FDFG((std::string)"std::string");
std::string FDFH((std::string)"std::string");
std::string FDFI((std::string)"std::string");
std::string FDFJ((std::string)"std::string");
std::string FDGA((std::string)"std::string");
std::string FDGB((std::string)"std::string");
std::string FDGC((std::string)"std::string");
std::string FDGD((std::string)"std::string");
std::string FDGE((std::string)"std::string");
std::string FDGF((std::string)"std::string");
std::string FDGG((std::string)"std::string");
std::string FDGH((std::string)"std::string");
std::string FDGI((std::string)"std::string");
std::string FDGJ((std::string)"std::string");
std::string FDHA((std::string)"std::string");
std::string FDHB((std::string)"std::string");
std::string FDHC((std::string)"std::string");
std::string FDHD((std::string)"std::string");
std::string FDHE((std::string)"std::string");
std::string FDHF((std::string)"std::string");
std::string FDHG((std::string)"std::string");
std::string FDHH((std::string)"std::string");
std::string FDHI((std::string)"std::string");
std::string FDHJ((std::string)"std::string");
std::string FDIA((std::string)"std::string");
std::string FDIB((std::string)"std::string");
std::string FDIC((std::string)"std::string");
std::string FDID((std::string)"std::string");
std::string FDIE((std::string)"std::string");
std::string FDIF((std::string)"std::string");
std::string FDIG((std::string)"std::string");
std::string FDIH((std::string)"std::string");
std::string FDII((std::string)"std::string");
std::string FDIJ((std::string)"std::string");
std::string FDJA((std::string)"std::string");
std::string FDJB((std::string)"std::string");
std::string FDJC((std::string)"std::string");
std::string FDJD((std::string)"std::string");
std::string FDJE((std::string)"std::string");
std::string FDJF((std::string)"std::string");
std::string FDJG((std::string)"std::string");
std::string FDJH((std::string)"std::string");
std::string FDJI((std::string)"std::string");
std::string FDJJ((std::string)"std::string");
std::string FEAA((std::string)"std::string");
std::string FEAB((std::string)"std::string");
std::string FEAC((std::string)"std::string");
std::string FEAD((std::string)"std::string");
std::string FEAE((std::string)"std::string");
std::string FEAF((std::string)"std::string");
std::string FEAG((std::string)"std::string");
std::string FEAH((std::string)"std::string");
std::string FEAI((std::string)"std::string");
std::string FEAJ((std::string)"std::string");
std::string FEBA((std::string)"std::string");
std::string FEBB((std::string)"std::string");
std::string FEBC((std::string)"std::string");
std::string FEBD((std::string)"std::string");
std::string FEBE((std::string)"std::string");
std::string FEBF((std::string)"std::string");
std::string FEBG((std::string)"std::string");
std::string FEBH((std::string)"std::string");
std::string FEBI((std::string)"std::string");
std::string FEBJ((std::string)"std::string");
std::string FECA((std::string)"std::string");
std::string FECB((std::string)"std::string");
std::string FECC((std::string)"std::string");
std::string FECD((std::string)"std::string");
std::string FECE((std::string)"std::string");
std::string FECF((std::string)"std::string");
std::string FECG((std::string)"std::string");
std::string FECH((std::string)"std::string");
std::string FECI((std::string)"std::string");
std::string FECJ((std::string)"std::string");
std::string FEDA((std::string)"std::string");
std::string FEDB((std::string)"std::string");
std::string FEDC((std::string)"std::string");
std::string FEDD((std::string)"std::string");
std::string FEDE((std::string)"std::string");
std::string FEDF((std::string)"std::string");
std::string FEDG((std::string)"std::string");
std::string FEDH((std::string)"std::string");
std::string FEDI((std::string)"std::string");
std::string FEDJ((std::string)"std::string");
std::string FEEA((std::string)"std::string");
std::string FEEB((std::string)"std::string");
std::string FEEC((std::string)"std::string");
std::string FEED((std::string)"std::string");
std::string FEEE((std::string)"std::string");
std::string FEEF((std::string)"std::string");
std::string FEEG((std::string)"std::string");
std::string FEEH((std::string)"std::string");
std::string FEEI((std::string)"std::string");
std::string FEEJ((std::string)"std::string");
std::string FEFA((std::string)"std::string");
std::string FEFB((std::string)"std::string");
std::string FEFC((std::string)"std::string");
std::string FEFD((std::string)"std::string");
std::string FEFE((std::string)"std::string");
std::string FEFF((std::string)"std::string");
std::string FEFG((std::string)"std::string");
std::string FEFH((std::string)"std::string");
std::string FEFI((std::string)"std::string");
std::string FEFJ((std::string)"std::string");
std::string FEGA((std::string)"std::string");
std::string FEGB((std::string)"std::string");
std::string FEGC((std::string)"std::string");
std::string FEGD((std::string)"std::string");
std::string FEGE((std::string)"std::string");
std::string FEGF((std::string)"std::string");
std::string FEGG((std::string)"std::string");
std::string FEGH((std::string)"std::string");
std::string FEGI((std::string)"std::string");
std::string FEGJ((std::string)"std::string");
std::string FEHA((std::string)"std::string");
std::string FEHB((std::string)"std::string");
std::string FEHC((std::string)"std::string");
std::string FEHD((std::string)"std::string");
std::string FEHE((std::string)"std::string");
std::string FEHF((std::string)"std::string");
std::string FEHG((std::string)"std::string");
std::string FEHH((std::string)"std::string");
std::string FEHI((std::string)"std::string");
std::string FEHJ((std::string)"std::string");
std::string FEIA((std::string)"std::string");
std::string FEIB((std::string)"std::string");
std::string FEIC((std::string)"std::string");
std::string FEID((std::string)"std::string");
std::string FEIE((std::string)"std::string");
std::string FEIF((std::string)"std::string");
std::string FEIG((std::string)"std::string");
std::string FEIH((std::string)"std::string");
std::string FEII((std::string)"std::string");
std::string FEIJ((std::string)"std::string");
std::string FEJA((std::string)"std::string");
std::string FEJB((std::string)"std::string");
std::string FEJC((std::string)"std::string");
std::string FEJD((std::string)"std::string");
std::string FEJE((std::string)"std::string");
std::string FEJF((std::string)"std::string");
std::string FEJG((std::string)"std::string");
std::string FEJH((std::string)"std::string");
std::string FEJI((std::string)"std::string");
std::string FEJJ((std::string)"std::string");
std::string FFAA((std::string)"std::string");
std::string FFAB((std::string)"std::string");
std::string FFAC((std::string)"std::string");
std::string FFAD((std::string)"std::string");
std::string FFAE((std::string)"std::string");
std::string FFAF((std::string)"std::string");
std::string FFAG((std::string)"std::string");
std::string FFAH((std::string)"std::string");
std::string FFAI((std::string)"std::string");
std::string FFAJ((std::string)"std::string");
std::string FFBA((std::string)"std::string");
std::string FFBB((std::string)"std::string");
std::string FFBC((std::string)"std::string");
std::string FFBD((std::string)"std::string");
std::string FFBE((std::string)"std::string");
std::string FFBF((std::string)"std::string");
std::string FFBG((std::string)"std::string");
std::string FFBH((std::string)"std::string");
std::string FFBI((std::string)"std::string");
std::string FFBJ((std::string)"std::string");
std::string FFCA((std::string)"std::string");
std::string FFCB((std::string)"std::string");
std::string FFCC((std::string)"std::string");
std::string FFCD((std::string)"std::string");
std::string FFCE((std::string)"std::string");
std::string FFCF((std::string)"std::string");
std::string FFCG((std::string)"std::string");
std::string FFCH((std::string)"std::string");
std::string FFCI((std::string)"std::string");
std::string FFCJ((std::string)"std::string");
std::string FFDA((std::string)"std::string");
std::string FFDB((std::string)"std::string");
std::string FFDC((std::string)"std::string");
std::string FFDD((std::string)"std::string");
std::string FFDE((std::string)"std::string");
std::string FFDF((std::string)"std::string");
std::string FFDG((std::string)"std::string");
std::string FFDH((std::string)"std::string");
std::string FFDI((std::string)"std::string");
std::string FFDJ((std::string)"std::string");
std::string FFEA((std::string)"std::string");
std::string FFEB((std::string)"std::string");
std::string FFEC((std::string)"std::string");
std::string FFED((std::string)"std::string");
std::string FFEE((std::string)"std::string");
std::string FFEF((std::string)"std::string");
std::string FFEG((std::string)"std::string");
std::string FFEH((std::string)"std::string");
std::string FFEI((std::string)"std::string");
std::string FFEJ((std::string)"std::string");
std::string FFFA((std::string)"std::string");
std::string FFFB((std::string)"std::string");
std::string FFFC((std::string)"std::string");
std::string FFFD((std::string)"std::string");
std::string FFFE((std::string)"std::string");
std::string FFFF((std::string)"std::string");
std::string FFFG((std::string)"std::string");
std::string FFFH((std::string)"std::string");
std::string FFFI((std::string)"std::string");
std::string FFFJ((std::string)"std::string");
std::string FFGA((std::string)"std::string");
std::string FFGB((std::string)"std::string");
std::string FFGC((std::string)"std::string");
std::string FFGD((std::string)"std::string");
std::string FFGE((std::string)"std::string");
std::string FFGF((std::string)"std::string");
std::string FFGG((std::string)"std::string");
std::string FFGH((std::string)"std::string");
std::string FFGI((std::string)"std::string");
std::string FFGJ((std::string)"std::string");
std::string FFHA((std::string)"std::string");
std::string FFHB((std::string)"std::string");
std::string FFHC((std::string)"std::string");
std::string FFHD((std::string)"std::string");
std::string FFHE((std::string)"std::string");
std::string FFHF((std::string)"std::string");
std::string FFHG((std::string)"std::string");
std::string FFHH((std::string)"std::string");
std::string FFHI((std::string)"std::string");
std::string FFHJ((std::string)"std::string");
std::string FFIA((std::string)"std::string");
std::string FFIB((std::string)"std::string");
std::string FFIC((std::string)"std::string");
std::string FFID((std::string)"std::string");
std::string FFIE((std::string)"std::string");
std::string FFIF((std::string)"std::string");
std::string FFIG((std::string)"std::string");
std::string FFIH((std::string)"std::string");
std::string FFII((std::string)"std::string");
std::string FFIJ((std::string)"std::string");
std::string FFJA((std::string)"std::string");
std::string FFJB((std::string)"std::string");
std::string FFJC((std::string)"std::string");
std::string FFJD((std::string)"std::string");
std::string FFJE((std::string)"std::string");
std::string FFJF((std::string)"std::string");
std::string FFJG((std::string)"std::string");
std::string FFJH((std::string)"std::string");
std::string FFJI((std::string)"std::string");
std::string FFJJ((std::string)"std::string");
std::string FGAA((std::string)"std::string");
std::string FGAB((std::string)"std::string");
std::string FGAC((std::string)"std::string");
std::string FGAD((std::string)"std::string");
std::string FGAE((std::string)"std::string");
std::string FGAF((std::string)"std::string");
std::string FGAG((std::string)"std::string");
std::string FGAH((std::string)"std::string");
std::string FGAI((std::string)"std::string");
std::string FGAJ((std::string)"std::string");
std::string FGBA((std::string)"std::string");
std::string FGBB((std::string)"std::string");
std::string FGBC((std::string)"std::string");
std::string FGBD((std::string)"std::string");
std::string FGBE((std::string)"std::string");
std::string FGBF((std::string)"std::string");
std::string FGBG((std::string)"std::string");
std::string FGBH((std::string)"std::string");
std::string FGBI((std::string)"std::string");
std::string FGBJ((std::string)"std::string");
std::string FGCA((std::string)"std::string");
std::string FGCB((std::string)"std::string");
std::string FGCC((std::string)"std::string");
std::string FGCD((std::string)"std::string");
std::string FGCE((std::string)"std::string");
std::string FGCF((std::string)"std::string");
std::string FGCG((std::string)"std::string");
std::string FGCH((std::string)"std::string");
std::string FGCI((std::string)"std::string");
std::string FGCJ((std::string)"std::string");
std::string FGDA((std::string)"std::string");
std::string FGDB((std::string)"std::string");
std::string FGDC((std::string)"std::string");
std::string FGDD((std::string)"std::string");
std::string FGDE((std::string)"std::string");
std::string FGDF((std::string)"std::string");
std::string FGDG((std::string)"std::string");
std::string FGDH((std::string)"std::string");
std::string FGDI((std::string)"std::string");
std::string FGDJ((std::string)"std::string");
std::string FGEA((std::string)"std::string");
std::string FGEB((std::string)"std::string");
std::string FGEC((std::string)"std::string");
std::string FGED((std::string)"std::string");
std::string FGEE((std::string)"std::string");
std::string FGEF((std::string)"std::string");
std::string FGEG((std::string)"std::string");
std::string FGEH((std::string)"std::string");
std::string FGEI((std::string)"std::string");
std::string FGEJ((std::string)"std::string");
std::string FGFA((std::string)"std::string");
std::string FGFB((std::string)"std::string");
std::string FGFC((std::string)"std::string");
std::string FGFD((std::string)"std::string");
std::string FGFE((std::string)"std::string");
std::string FGFF((std::string)"std::string");
std::string FGFG((std::string)"std::string");
std::string FGFH((std::string)"std::string");
std::string FGFI((std::string)"std::string");
std::string FGFJ((std::string)"std::string");
std::string FGGA((std::string)"std::string");
std::string FGGB((std::string)"std::string");
std::string FGGC((std::string)"std::string");
std::string FGGD((std::string)"std::string");
std::string FGGE((std::string)"std::string");
std::string FGGF((std::string)"std::string");
std::string FGGG((std::string)"std::string");
std::string FGGH((std::string)"std::string");
std::string FGGI((std::string)"std::string");
std::string FGGJ((std::string)"std::string");
std::string FGHA((std::string)"std::string");
std::string FGHB((std::string)"std::string");
std::string FGHC((std::string)"std::string");
std::string FGHD((std::string)"std::string");
std::string FGHE((std::string)"std::string");
std::string FGHF((std::string)"std::string");
std::string FGHG((std::string)"std::string");
std::string FGHH((std::string)"std::string");
std::string FGHI((std::string)"std::string");
std::string FGHJ((std::string)"std::string");
std::string FGIA((std::string)"std::string");
std::string FGIB((std::string)"std::string");
std::string FGIC((std::string)"std::string");
std::string FGID((std::string)"std::string");
std::string FGIE((std::string)"std::string");
std::string FGIF((std::string)"std::string");
std::string FGIG((std::string)"std::string");
std::string FGIH((std::string)"std::string");
std::string FGII((std::string)"std::string");
std::string FGIJ((std::string)"std::string");
std::string FGJA((std::string)"std::string");
std::string FGJB((std::string)"std::string");
std::string FGJC((std::string)"std::string");
std::string FGJD((std::string)"std::string");
std::string FGJE((std::string)"std::string");
std::string FGJF((std::string)"std::string");
std::string FGJG((std::string)"std::string");
std::string FGJH((std::string)"std::string");
std::string FGJI((std::string)"std::string");
std::string FGJJ((std::string)"std::string");
std::string FHAA((std::string)"std::string");
std::string FHAB((std::string)"std::string");
std::string FHAC((std::string)"std::string");
std::string FHAD((std::string)"std::string");
std::string FHAE((std::string)"std::string");
std::string FHAF((std::string)"std::string");
std::string FHAG((std::string)"std::string");
std::string FHAH((std::string)"std::string");
std::string FHAI((std::string)"std::string");
std::string FHAJ((std::string)"std::string");
std::string FHBA((std::string)"std::string");
std::string FHBB((std::string)"std::string");
std::string FHBC((std::string)"std::string");
std::string FHBD((std::string)"std::string");
std::string FHBE((std::string)"std::string");
std::string FHBF((std::string)"std::string");
std::string FHBG((std::string)"std::string");
std::string FHBH((std::string)"std::string");
std::string FHBI((std::string)"std::string");
std::string FHBJ((std::string)"std::string");
std::string FHCA((std::string)"std::string");
std::string FHCB((std::string)"std::string");
std::string FHCC((std::string)"std::string");
std::string FHCD((std::string)"std::string");
std::string FHCE((std::string)"std::string");
std::string FHCF((std::string)"std::string");
std::string FHCG((std::string)"std::string");
std::string FHCH((std::string)"std::string");
std::string FHCI((std::string)"std::string");
std::string FHCJ((std::string)"std::string");
std::string FHDA((std::string)"std::string");
std::string FHDB((std::string)"std::string");
std::string FHDC((std::string)"std::string");
std::string FHDD((std::string)"std::string");
std::string FHDE((std::string)"std::string");
std::string FHDF((std::string)"std::string");
std::string FHDG((std::string)"std::string");
std::string FHDH((std::string)"std::string");
std::string FHDI((std::string)"std::string");
std::string FHDJ((std::string)"std::string");
std::string FHEA((std::string)"std::string");
std::string FHEB((std::string)"std::string");
std::string FHEC((std::string)"std::string");
std::string FHED((std::string)"std::string");
std::string FHEE((std::string)"std::string");
std::string FHEF((std::string)"std::string");
std::string FHEG((std::string)"std::string");
std::string FHEH((std::string)"std::string");
std::string FHEI((std::string)"std::string");
std::string FHEJ((std::string)"std::string");
std::string FHFA((std::string)"std::string");
std::string FHFB((std::string)"std::string");
std::string FHFC((std::string)"std::string");
std::string FHFD((std::string)"std::string");
std::string FHFE((std::string)"std::string");
std::string FHFF((std::string)"std::string");
std::string FHFG((std::string)"std::string");
std::string FHFH((std::string)"std::string");
std::string FHFI((std::string)"std::string");
std::string FHFJ((std::string)"std::string");
std::string FHGA((std::string)"std::string");
std::string FHGB((std::string)"std::string");
std::string FHGC((std::string)"std::string");
std::string FHGD((std::string)"std::string");
std::string FHGE((std::string)"std::string");
std::string FHGF((std::string)"std::string");
std::string FHGG((std::string)"std::string");
std::string FHGH((std::string)"std::string");
std::string FHGI((std::string)"std::string");
std::string FHGJ((std::string)"std::string");
std::string FHHA((std::string)"std::string");
std::string FHHB((std::string)"std::string");
std::string FHHC((std::string)"std::string");
std::string FHHD((std::string)"std::string");
std::string FHHE((std::string)"std::string");
std::string FHHF((std::string)"std::string");
std::string FHHG((std::string)"std::string");
std::string FHHH((std::string)"std::string");
std::string FHHI((std::string)"std::string");
std::string FHHJ((std::string)"std::string");
std::string FHIA((std::string)"std::string");
std::string FHIB((std::string)"std::string");
std::string FHIC((std::string)"std::string");
std::string FHID((std::string)"std::string");
std::string FHIE((std::string)"std::string");
std::string FHIF((std::string)"std::string");
std::string FHIG((std::string)"std::string");
std::string FHIH((std::string)"std::string");
std::string FHII((std::string)"std::string");
std::string FHIJ((std::string)"std::string");
std::string FHJA((std::string)"std::string");
std::string FHJB((std::string)"std::string");
std::string FHJC((std::string)"std::string");
std::string FHJD((std::string)"std::string");
std::string FHJE((std::string)"std::string");
std::string FHJF((std::string)"std::string");
std::string FHJG((std::string)"std::string");
std::string FHJH((std::string)"std::string");
std::string FHJI((std::string)"std::string");
std::string FHJJ((std::string)"std::string");
std::string FIAA((std::string)"std::string");
std::string FIAB((std::string)"std::string");
std::string FIAC((std::string)"std::string");
std::string FIAD((std::string)"std::string");
std::string FIAE((std::string)"std::string");
std::string FIAF((std::string)"std::string");
std::string FIAG((std::string)"std::string");
std::string FIAH((std::string)"std::string");
std::string FIAI((std::string)"std::string");
std::string FIAJ((std::string)"std::string");
std::string FIBA((std::string)"std::string");
std::string FIBB((std::string)"std::string");
std::string FIBC((std::string)"std::string");
std::string FIBD((std::string)"std::string");
std::string FIBE((std::string)"std::string");
std::string FIBF((std::string)"std::string");
std::string FIBG((std::string)"std::string");
std::string FIBH((std::string)"std::string");
std::string FIBI((std::string)"std::string");
std::string FIBJ((std::string)"std::string");
std::string FICA((std::string)"std::string");
std::string FICB((std::string)"std::string");
std::string FICC((std::string)"std::string");
std::string FICD((std::string)"std::string");
std::string FICE((std::string)"std::string");
std::string FICF((std::string)"std::string");
std::string FICG((std::string)"std::string");
std::string FICH((std::string)"std::string");
std::string FICI((std::string)"std::string");
std::string FICJ((std::string)"std::string");
std::string FIDA((std::string)"std::string");
std::string FIDB((std::string)"std::string");
std::string FIDC((std::string)"std::string");
std::string FIDD((std::string)"std::string");
std::string FIDE((std::string)"std::string");
std::string FIDF((std::string)"std::string");
std::string FIDG((std::string)"std::string");
std::string FIDH((std::string)"std::string");
std::string FIDI((std::string)"std::string");
std::string FIDJ((std::string)"std::string");
std::string FIEA((std::string)"std::string");
std::string FIEB((std::string)"std::string");
std::string FIEC((std::string)"std::string");
std::string FIED((std::string)"std::string");
std::string FIEE((std::string)"std::string");
std::string FIEF((std::string)"std::string");
std::string FIEG((std::string)"std::string");
std::string FIEH((std::string)"std::string");
std::string FIEI((std::string)"std::string");
std::string FIEJ((std::string)"std::string");
std::string FIFA((std::string)"std::string");
std::string FIFB((std::string)"std::string");
std::string FIFC((std::string)"std::string");
std::string FIFD((std::string)"std::string");
std::string FIFE((std::string)"std::string");
std::string FIFF((std::string)"std::string");
std::string FIFG((std::string)"std::string");
std::string FIFH((std::string)"std::string");
std::string FIFI((std::string)"std::string");
std::string FIFJ((std::string)"std::string");
std::string FIGA((std::string)"std::string");
std::string FIGB((std::string)"std::string");
std::string FIGC((std::string)"std::string");
std::string FIGD((std::string)"std::string");
std::string FIGE((std::string)"std::string");
std::string FIGF((std::string)"std::string");
std::string FIGG((std::string)"std::string");
std::string FIGH((std::string)"std::string");
std::string FIGI((std::string)"std::string");
std::string FIGJ((std::string)"std::string");
std::string FIHA((std::string)"std::string");
std::string FIHB((std::string)"std::string");
std::string FIHC((std::string)"std::string");
std::string FIHD((std::string)"std::string");
std::string FIHE((std::string)"std::string");
std::string FIHF((std::string)"std::string");
std::string FIHG((std::string)"std::string");
std::string FIHH((std::string)"std::string");
std::string FIHI((std::string)"std::string");
std::string FIHJ((std::string)"std::string");
std::string FIIA((std::string)"std::string");
std::string FIIB((std::string)"std::string");
std::string FIIC((std::string)"std::string");
std::string FIID((std::string)"std::string");
std::string FIIE((std::string)"std::string");
std::string FIIF((std::string)"std::string");
std::string FIIG((std::string)"std::string");
std::string FIIH((std::string)"std::string");
std::string FIII((std::string)"std::string");
std::string FIIJ((std::string)"std::string");
std::string FIJA((std::string)"std::string");
std::string FIJB((std::string)"std::string");
std::string FIJC((std::string)"std::string");
std::string FIJD((std::string)"std::string");
std::string FIJE((std::string)"std::string");
std::string FIJF((std::string)"std::string");
std::string FIJG((std::string)"std::string");
std::string FIJH((std::string)"std::string");
std::string FIJI((std::string)"std::string");
std::string FIJJ((std::string)"std::string");
std::string FJAA((std::string)"std::string");
std::string FJAB((std::string)"std::string");
std::string FJAC((std::string)"std::string");
std::string FJAD((std::string)"std::string");
std::string FJAE((std::string)"std::string");
std::string FJAF((std::string)"std::string");
std::string FJAG((std::string)"std::string");
std::string FJAH((std::string)"std::string");
std::string FJAI((std::string)"std::string");
std::string FJAJ((std::string)"std::string");
std::string FJBA((std::string)"std::string");
std::string FJBB((std::string)"std::string");
std::string FJBC((std::string)"std::string");
std::string FJBD((std::string)"std::string");
std::string FJBE((std::string)"std::string");
std::string FJBF((std::string)"std::string");
std::string FJBG((std::string)"std::string");
std::string FJBH((std::string)"std::string");
std::string FJBI((std::string)"std::string");
std::string FJBJ((std::string)"std::string");
std::string FJCA((std::string)"std::string");
std::string FJCB((std::string)"std::string");
std::string FJCC((std::string)"std::string");
std::string FJCD((std::string)"std::string");
std::string FJCE((std::string)"std::string");
std::string FJCF((std::string)"std::string");
std::string FJCG((std::string)"std::string");
std::string FJCH((std::string)"std::string");
std::string FJCI((std::string)"std::string");
std::string FJCJ((std::string)"std::string");
std::string FJDA((std::string)"std::string");
std::string FJDB((std::string)"std::string");
std::string FJDC((std::string)"std::string");
std::string FJDD((std::string)"std::string");
std::string FJDE((std::string)"std::string");
std::string FJDF((std::string)"std::string");
std::string FJDG((std::string)"std::string");
std::string FJDH((std::string)"std::string");
std::string FJDI((std::string)"std::string");
std::string FJDJ((std::string)"std::string");
std::string FJEA((std::string)"std::string");
std::string FJEB((std::string)"std::string");
std::string FJEC((std::string)"std::string");
std::string FJED((std::string)"std::string");
std::string FJEE((std::string)"std::string");
std::string FJEF((std::string)"std::string");
std::string FJEG((std::string)"std::string");
std::string FJEH((std::string)"std::string");
std::string FJEI((std::string)"std::string");
std::string FJEJ((std::string)"std::string");
std::string FJFA((std::string)"std::string");
std::string FJFB((std::string)"std::string");
std::string FJFC((std::string)"std::string");
std::string FJFD((std::string)"std::string");
std::string FJFE((std::string)"std::string");
std::string FJFF((std::string)"std::string");
std::string FJFG((std::string)"std::string");
std::string FJFH((std::string)"std::string");
std::string FJFI((std::string)"std::string");
std::string FJFJ((std::string)"std::string");
std::string FJGA((std::string)"std::string");
std::string FJGB((std::string)"std::string");
std::string FJGC((std::string)"std::string");
std::string FJGD((std::string)"std::string");
std::string FJGE((std::string)"std::string");
std::string FJGF((std::string)"std::string");
std::string FJGG((std::string)"std::string");
std::string FJGH((std::string)"std::string");
std::string FJGI((std::string)"std::string");
std::string FJGJ((std::string)"std::string");
std::string FJHA((std::string)"std::string");
std::string FJHB((std::string)"std::string");
std::string FJHC((std::string)"std::string");
std::string FJHD((std::string)"std::string");
std::string FJHE((std::string)"std::string");
std::string FJHF((std::string)"std::string");
std::string FJHG((std::string)"std::string");
std::string FJHH((std::string)"std::string");
std::string FJHI((std::string)"std::string");
std::string FJHJ((std::string)"std::string");
std::string FJIA((std::string)"std::string");
std::string FJIB((std::string)"std::string");
std::string FJIC((std::string)"std::string");
std::string FJID((std::string)"std::string");
std::string FJIE((std::string)"std::string");
std::string FJIF((std::string)"std::string");
std::string FJIG((std::string)"std::string");
std::string FJIH((std::string)"std::string");
std::string FJII((std::string)"std::string");
std::string FJIJ((std::string)"std::string");
std::string FJJA((std::string)"std::string");
std::string FJJB((std::string)"std::string");
std::string FJJC((std::string)"std::string");
std::string FJJD((std::string)"std::string");
std::string FJJE((std::string)"std::string");
std::string FJJF((std::string)"std::string");
std::string FJJG((std::string)"std::string");
std::string FJJH((std::string)"std::string");
std::string FJJI((std::string)"std::string");
std::string FJJJ((std::string)"std::string");
std::string GAAA((std::string)"std::string");
std::string GAAB((std::string)"std::string");
std::string GAAC((std::string)"std::string");
std::string GAAD((std::string)"std::string");
std::string GAAE((std::string)"std::string");
std::string GAAF((std::string)"std::string");
std::string GAAG((std::string)"std::string");
std::string GAAH((std::string)"std::string");
std::string GAAI((std::string)"std::string");
std::string GAAJ((std::string)"std::string");
std::string GABA((std::string)"std::string");
std::string GABB((std::string)"std::string");
std::string GABC((std::string)"std::string");
std::string GABD((std::string)"std::string");
std::string GABE((std::string)"std::string");
std::string GABF((std::string)"std::string");
std::string GABG((std::string)"std::string");
std::string GABH((std::string)"std::string");
std::string GABI((std::string)"std::string");
std::string GABJ((std::string)"std::string");
std::string GACA((std::string)"std::string");
std::string GACB((std::string)"std::string");
std::string GACC((std::string)"std::string");
std::string GACD((std::string)"std::string");
std::string GACE((std::string)"std::string");
std::string GACF((std::string)"std::string");
std::string GACG((std::string)"std::string");
std::string GACH((std::string)"std::string");
std::string GACI((std::string)"std::string");
std::string GACJ((std::string)"std::string");
std::string GADA((std::string)"std::string");
std::string GADB((std::string)"std::string");
std::string GADC((std::string)"std::string");
std::string GADD((std::string)"std::string");
std::string GADE((std::string)"std::string");
std::string GADF((std::string)"std::string");
std::string GADG((std::string)"std::string");
std::string GADH((std::string)"std::string");
std::string GADI((std::string)"std::string");
std::string GADJ((std::string)"std::string");
std::string GAEA((std::string)"std::string");
std::string GAEB((std::string)"std::string");
std::string GAEC((std::string)"std::string");
std::string GAED((std::string)"std::string");
std::string GAEE((std::string)"std::string");
std::string GAEF((std::string)"std::string");
std::string GAEG((std::string)"std::string");
std::string GAEH((std::string)"std::string");
std::string GAEI((std::string)"std::string");
std::string GAEJ((std::string)"std::string");
std::string GAFA((std::string)"std::string");
std::string GAFB((std::string)"std::string");
std::string GAFC((std::string)"std::string");
std::string GAFD((std::string)"std::string");
std::string GAFE((std::string)"std::string");
std::string GAFF((std::string)"std::string");
std::string GAFG((std::string)"std::string");
std::string GAFH((std::string)"std::string");
std::string GAFI((std::string)"std::string");
std::string GAFJ((std::string)"std::string");
std::string GAGA((std::string)"std::string");
std::string GAGB((std::string)"std::string");
std::string GAGC((std::string)"std::string");
std::string GAGD((std::string)"std::string");
std::string GAGE((std::string)"std::string");
std::string GAGF((std::string)"std::string");
std::string GAGG((std::string)"std::string");
std::string GAGH((std::string)"std::string");
std::string GAGI((std::string)"std::string");
std::string GAGJ((std::string)"std::string");
std::string GAHA((std::string)"std::string");
std::string GAHB((std::string)"std::string");
std::string GAHC((std::string)"std::string");
std::string GAHD((std::string)"std::string");
std::string GAHE((std::string)"std::string");
std::string GAHF((std::string)"std::string");
std::string GAHG((std::string)"std::string");
std::string GAHH((std::string)"std::string");
std::string GAHI((std::string)"std::string");
std::string GAHJ((std::string)"std::string");
std::string GAIA((std::string)"std::string");
std::string GAIB((std::string)"std::string");
std::string GAIC((std::string)"std::string");
std::string GAID((std::string)"std::string");
std::string GAIE((std::string)"std::string");
std::string GAIF((std::string)"std::string");
std::string GAIG((std::string)"std::string");
std::string GAIH((std::string)"std::string");
std::string GAII((std::string)"std::string");
std::string GAIJ((std::string)"std::string");
std::string GAJA((std::string)"std::string");
std::string GAJB((std::string)"std::string");
std::string GAJC((std::string)"std::string");
std::string GAJD((std::string)"std::string");
std::string GAJE((std::string)"std::string");
std::string GAJF((std::string)"std::string");
std::string GAJG((std::string)"std::string");
std::string GAJH((std::string)"std::string");
std::string GAJI((std::string)"std::string");
std::string GAJJ((std::string)"std::string");
std::string GBAA((std::string)"std::string");
std::string GBAB((std::string)"std::string");
std::string GBAC((std::string)"std::string");
std::string GBAD((std::string)"std::string");
std::string GBAE((std::string)"std::string");
std::string GBAF((std::string)"std::string");
std::string GBAG((std::string)"std::string");
std::string GBAH((std::string)"std::string");
std::string GBAI((std::string)"std::string");
std::string GBAJ((std::string)"std::string");
std::string GBBA((std::string)"std::string");
std::string GBBB((std::string)"std::string");
std::string GBBC((std::string)"std::string");
std::string GBBD((std::string)"std::string");
std::string GBBE((std::string)"std::string");
std::string GBBF((std::string)"std::string");
std::string GBBG((std::string)"std::string");
std::string GBBH((std::string)"std::string");
std::string GBBI((std::string)"std::string");
std::string GBBJ((std::string)"std::string");
std::string GBCA((std::string)"std::string");
std::string GBCB((std::string)"std::string");
std::string GBCC((std::string)"std::string");
std::string GBCD((std::string)"std::string");
std::string GBCE((std::string)"std::string");
std::string GBCF((std::string)"std::string");
std::string GBCG((std::string)"std::string");
std::string GBCH((std::string)"std::string");
std::string GBCI((std::string)"std::string");
std::string GBCJ((std::string)"std::string");
std::string GBDA((std::string)"std::string");
std::string GBDB((std::string)"std::string");
std::string GBDC((std::string)"std::string");
std::string GBDD((std::string)"std::string");
std::string GBDE((std::string)"std::string");
std::string GBDF((std::string)"std::string");
std::string GBDG((std::string)"std::string");
std::string GBDH((std::string)"std::string");
std::string GBDI((std::string)"std::string");
std::string GBDJ((std::string)"std::string");
std::string GBEA((std::string)"std::string");
std::string GBEB((std::string)"std::string");
std::string GBEC((std::string)"std::string");
std::string GBED((std::string)"std::string");
std::string GBEE((std::string)"std::string");
std::string GBEF((std::string)"std::string");
std::string GBEG((std::string)"std::string");
std::string GBEH((std::string)"std::string");
std::string GBEI((std::string)"std::string");
std::string GBEJ((std::string)"std::string");
std::string GBFA((std::string)"std::string");
std::string GBFB((std::string)"std::string");
std::string GBFC((std::string)"std::string");
std::string GBFD((std::string)"std::string");
std::string GBFE((std::string)"std::string");
std::string GBFF((std::string)"std::string");
std::string GBFG((std::string)"std::string");
std::string GBFH((std::string)"std::string");
std::string GBFI((std::string)"std::string");
std::string GBFJ((std::string)"std::string");
std::string GBGA((std::string)"std::string");
std::string GBGB((std::string)"std::string");
std::string GBGC((std::string)"std::string");
std::string GBGD((std::string)"std::string");
std::string GBGE((std::string)"std::string");
std::string GBGF((std::string)"std::string");
std::string GBGG((std::string)"std::string");
std::string GBGH((std::string)"std::string");
std::string GBGI((std::string)"std::string");
std::string GBGJ((std::string)"std::string");
std::string GBHA((std::string)"std::string");
std::string GBHB((std::string)"std::string");
std::string GBHC((std::string)"std::string");
std::string GBHD((std::string)"std::string");
std::string GBHE((std::string)"std::string");
std::string GBHF((std::string)"std::string");
std::string GBHG((std::string)"std::string");
std::string GBHH((std::string)"std::string");
std::string GBHI((std::string)"std::string");
std::string GBHJ((std::string)"std::string");
std::string GBIA((std::string)"std::string");
std::string GBIB((std::string)"std::string");
std::string GBIC((std::string)"std::string");
std::string GBID((std::string)"std::string");
std::string GBIE((std::string)"std::string");
std::string GBIF((std::string)"std::string");
std::string GBIG((std::string)"std::string");
std::string GBIH((std::string)"std::string");
std::string GBII((std::string)"std::string");
std::string GBIJ((std::string)"std::string");
std::string GBJA((std::string)"std::string");
std::string GBJB((std::string)"std::string");
std::string GBJC((std::string)"std::string");
std::string GBJD((std::string)"std::string");
std::string GBJE((std::string)"std::string");
std::string GBJF((std::string)"std::string");
std::string GBJG((std::string)"std::string");
std::string GBJH((std::string)"std::string");
std::string GBJI((std::string)"std::string");
std::string GBJJ((std::string)"std::string");
std::string GCAA((std::string)"std::string");
std::string GCAB((std::string)"std::string");
std::string GCAC((std::string)"std::string");
std::string GCAD((std::string)"std::string");
std::string GCAE((std::string)"std::string");
std::string GCAF((std::string)"std::string");
std::string GCAG((std::string)"std::string");
std::string GCAH((std::string)"std::string");
std::string GCAI((std::string)"std::string");
std::string GCAJ((std::string)"std::string");
std::string GCBA((std::string)"std::string");
std::string GCBB((std::string)"std::string");
std::string GCBC((std::string)"std::string");
std::string GCBD((std::string)"std::string");
std::string GCBE((std::string)"std::string");
std::string GCBF((std::string)"std::string");
std::string GCBG((std::string)"std::string");
std::string GCBH((std::string)"std::string");
std::string GCBI((std::string)"std::string");
std::string GCBJ((std::string)"std::string");
std::string GCCA((std::string)"std::string");
std::string GCCB((std::string)"std::string");
std::string GCCC((std::string)"std::string");
std::string GCCD((std::string)"std::string");
std::string GCCE((std::string)"std::string");
std::string GCCF((std::string)"std::string");
std::string GCCG((std::string)"std::string");
std::string GCCH((std::string)"std::string");
std::string GCCI((std::string)"std::string");
std::string GCCJ((std::string)"std::string");
std::string GCDA((std::string)"std::string");
std::string GCDB((std::string)"std::string");
std::string GCDC((std::string)"std::string");
std::string GCDD((std::string)"std::string");
std::string GCDE((std::string)"std::string");
std::string GCDF((std::string)"std::string");
std::string GCDG((std::string)"std::string");
std::string GCDH((std::string)"std::string");
std::string GCDI((std::string)"std::string");
std::string GCDJ((std::string)"std::string");
std::string GCEA((std::string)"std::string");
std::string GCEB((std::string)"std::string");
std::string GCEC((std::string)"std::string");
std::string GCED((std::string)"std::string");
std::string GCEE((std::string)"std::string");
std::string GCEF((std::string)"std::string");
std::string GCEG((std::string)"std::string");
std::string GCEH((std::string)"std::string");
std::string GCEI((std::string)"std::string");
std::string GCEJ((std::string)"std::string");
std::string GCFA((std::string)"std::string");
std::string GCFB((std::string)"std::string");
std::string GCFC((std::string)"std::string");
std::string GCFD((std::string)"std::string");
std::string GCFE((std::string)"std::string");
std::string GCFF((std::string)"std::string");
std::string GCFG((std::string)"std::string");
std::string GCFH((std::string)"std::string");
std::string GCFI((std::string)"std::string");
std::string GCFJ((std::string)"std::string");
std::string GCGA((std::string)"std::string");
std::string GCGB((std::string)"std::string");
std::string GCGC((std::string)"std::string");
std::string GCGD((std::string)"std::string");
std::string GCGE((std::string)"std::string");
std::string GCGF((std::string)"std::string");
std::string GCGG((std::string)"std::string");
std::string GCGH((std::string)"std::string");
std::string GCGI((std::string)"std::string");
std::string GCGJ((std::string)"std::string");
std::string GCHA((std::string)"std::string");
std::string GCHB((std::string)"std::string");
std::string GCHC((std::string)"std::string");
std::string GCHD((std::string)"std::string");
std::string GCHE((std::string)"std::string");
std::string GCHF((std::string)"std::string");
std::string GCHG((std::string)"std::string");
std::string GCHH((std::string)"std::string");
std::string GCHI((std::string)"std::string");
std::string GCHJ((std::string)"std::string");
std::string GCIA((std::string)"std::string");
std::string GCIB((std::string)"std::string");
std::string GCIC((std::string)"std::string");
std::string GCID((std::string)"std::string");
std::string GCIE((std::string)"std::string");
std::string GCIF((std::string)"std::string");
std::string GCIG((std::string)"std::string");
std::string GCIH((std::string)"std::string");
std::string GCII((std::string)"std::string");
std::string GCIJ((std::string)"std::string");
std::string GCJA((std::string)"std::string");
std::string GCJB((std::string)"std::string");
std::string GCJC((std::string)"std::string");
std::string GCJD((std::string)"std::string");
std::string GCJE((std::string)"std::string");
std::string GCJF((std::string)"std::string");
std::string GCJG((std::string)"std::string");
std::string GCJH((std::string)"std::string");
std::string GCJI((std::string)"std::string");
std::string GCJJ((std::string)"std::string");
std::string GDAA((std::string)"std::string");
std::string GDAB((std::string)"std::string");
std::string GDAC((std::string)"std::string");
std::string GDAD((std::string)"std::string");
std::string GDAE((std::string)"std::string");
std::string GDAF((std::string)"std::string");
std::string GDAG((std::string)"std::string");
std::string GDAH((std::string)"std::string");
std::string GDAI((std::string)"std::string");
std::string GDAJ((std::string)"std::string");
std::string GDBA((std::string)"std::string");
std::string GDBB((std::string)"std::string");
std::string GDBC((std::string)"std::string");
std::string GDBD((std::string)"std::string");
std::string GDBE((std::string)"std::string");
std::string GDBF((std::string)"std::string");
std::string GDBG((std::string)"std::string");
std::string GDBH((std::string)"std::string");
std::string GDBI((std::string)"std::string");
std::string GDBJ((std::string)"std::string");
std::string GDCA((std::string)"std::string");
std::string GDCB((std::string)"std::string");
std::string GDCC((std::string)"std::string");
std::string GDCD((std::string)"std::string");
std::string GDCE((std::string)"std::string");
std::string GDCF((std::string)"std::string");
std::string GDCG((std::string)"std::string");
std::string GDCH((std::string)"std::string");
std::string GDCI((std::string)"std::string");
std::string GDCJ((std::string)"std::string");
std::string GDDA((std::string)"std::string");
std::string GDDB((std::string)"std::string");
std::string GDDC((std::string)"std::string");
std::string GDDD((std::string)"std::string");
std::string GDDE((std::string)"std::string");
std::string GDDF((std::string)"std::string");
std::string GDDG((std::string)"std::string");
std::string GDDH((std::string)"std::string");
std::string GDDI((std::string)"std::string");
std::string GDDJ((std::string)"std::string");
std::string GDEA((std::string)"std::string");
std::string GDEB((std::string)"std::string");
std::string GDEC((std::string)"std::string");
std::string GDED((std::string)"std::string");
std::string GDEE((std::string)"std::string");
std::string GDEF((std::string)"std::string");
std::string GDEG((std::string)"std::string");
std::string GDEH((std::string)"std::string");
std::string GDEI((std::string)"std::string");
std::string GDEJ((std::string)"std::string");
std::string GDFA((std::string)"std::string");
std::string GDFB((std::string)"std::string");
std::string GDFC((std::string)"std::string");
std::string GDFD((std::string)"std::string");
std::string GDFE((std::string)"std::string");
std::string GDFF((std::string)"std::string");
std::string GDFG((std::string)"std::string");
std::string GDFH((std::string)"std::string");
std::string GDFI((std::string)"std::string");
std::string GDFJ((std::string)"std::string");
std::string GDGA((std::string)"std::string");
std::string GDGB((std::string)"std::string");
std::string GDGC((std::string)"std::string");
std::string GDGD((std::string)"std::string");
std::string GDGE((std::string)"std::string");
std::string GDGF((std::string)"std::string");
std::string GDGG((std::string)"std::string");
std::string GDGH((std::string)"std::string");
std::string GDGI((std::string)"std::string");
std::string GDGJ((std::string)"std::string");
std::string GDHA((std::string)"std::string");
std::string GDHB((std::string)"std::string");
std::string GDHC((std::string)"std::string");
std::string GDHD((std::string)"std::string");
std::string GDHE((std::string)"std::string");
std::string GDHF((std::string)"std::string");
std::string GDHG((std::string)"std::string");
std::string GDHH((std::string)"std::string");
std::string GDHI((std::string)"std::string");
std::string GDHJ((std::string)"std::string");
std::string GDIA((std::string)"std::string");
std::string GDIB((std::string)"std::string");
std::string GDIC((std::string)"std::string");
std::string GDID((std::string)"std::string");
std::string GDIE((std::string)"std::string");
std::string GDIF((std::string)"std::string");
std::string GDIG((std::string)"std::string");
std::string GDIH((std::string)"std::string");
std::string GDII((std::string)"std::string");
std::string GDIJ((std::string)"std::string");
std::string GDJA((std::string)"std::string");
std::string GDJB((std::string)"std::string");
std::string GDJC((std::string)"std::string");
std::string GDJD((std::string)"std::string");
std::string GDJE((std::string)"std::string");
std::string GDJF((std::string)"std::string");
std::string GDJG((std::string)"std::string");
std::string GDJH((std::string)"std::string");
std::string GDJI((std::string)"std::string");
std::string GDJJ((std::string)"std::string");
std::string GEAA((std::string)"std::string");
std::string GEAB((std::string)"std::string");
std::string GEAC((std::string)"std::string");
std::string GEAD((std::string)"std::string");
std::string GEAE((std::string)"std::string");
std::string GEAF((std::string)"std::string");
std::string GEAG((std::string)"std::string");
std::string GEAH((std::string)"std::string");
std::string GEAI((std::string)"std::string");
std::string GEAJ((std::string)"std::string");
std::string GEBA((std::string)"std::string");
std::string GEBB((std::string)"std::string");
std::string GEBC((std::string)"std::string");
std::string GEBD((std::string)"std::string");
std::string GEBE((std::string)"std::string");
std::string GEBF((std::string)"std::string");
std::string GEBG((std::string)"std::string");
std::string GEBH((std::string)"std::string");
std::string GEBI((std::string)"std::string");
std::string GEBJ((std::string)"std::string");
std::string GECA((std::string)"std::string");
std::string GECB((std::string)"std::string");
std::string GECC((std::string)"std::string");
std::string GECD((std::string)"std::string");
std::string GECE((std::string)"std::string");
std::string GECF((std::string)"std::string");
std::string GECG((std::string)"std::string");
std::string GECH((std::string)"std::string");
std::string GECI((std::string)"std::string");
std::string GECJ((std::string)"std::string");
std::string GEDA((std::string)"std::string");
std::string GEDB((std::string)"std::string");
std::string GEDC((std::string)"std::string");
std::string GEDD((std::string)"std::string");
std::string GEDE((std::string)"std::string");
std::string GEDF((std::string)"std::string");
std::string GEDG((std::string)"std::string");
std::string GEDH((std::string)"std::string");
std::string GEDI((std::string)"std::string");
std::string GEDJ((std::string)"std::string");
std::string GEEA((std::string)"std::string");
std::string GEEB((std::string)"std::string");
std::string GEEC((std::string)"std::string");
std::string GEED((std::string)"std::string");
std::string GEEE((std::string)"std::string");
std::string GEEF((std::string)"std::string");
std::string GEEG((std::string)"std::string");
std::string GEEH((std::string)"std::string");
std::string GEEI((std::string)"std::string");
std::string GEEJ((std::string)"std::string");
std::string GEFA((std::string)"std::string");
std::string GEFB((std::string)"std::string");
std::string GEFC((std::string)"std::string");
std::string GEFD((std::string)"std::string");
std::string GEFE((std::string)"std::string");
std::string GEFF((std::string)"std::string");
std::string GEFG((std::string)"std::string");
std::string GEFH((std::string)"std::string");
std::string GEFI((std::string)"std::string");
std::string GEFJ((std::string)"std::string");
std::string GEGA((std::string)"std::string");
std::string GEGB((std::string)"std::string");
std::string GEGC((std::string)"std::string");
std::string GEGD((std::string)"std::string");
std::string GEGE((std::string)"std::string");
std::string GEGF((std::string)"std::string");
std::string GEGG((std::string)"std::string");
std::string GEGH((std::string)"std::string");
std::string GEGI((std::string)"std::string");
std::string GEGJ((std::string)"std::string");
std::string GEHA((std::string)"std::string");
std::string GEHB((std::string)"std::string");
std::string GEHC((std::string)"std::string");
std::string GEHD((std::string)"std::string");
std::string GEHE((std::string)"std::string");
std::string GEHF((std::string)"std::string");
std::string GEHG((std::string)"std::string");
std::string GEHH((std::string)"std::string");
std::string GEHI((std::string)"std::string");
std::string GEHJ((std::string)"std::string");
std::string GEIA((std::string)"std::string");
std::string GEIB((std::string)"std::string");
std::string GEIC((std::string)"std::string");
std::string GEID((std::string)"std::string");
std::string GEIE((std::string)"std::string");
std::string GEIF((std::string)"std::string");
std::string GEIG((std::string)"std::string");
std::string GEIH((std::string)"std::string");
std::string GEII((std::string)"std::string");
std::string GEIJ((std::string)"std::string");
std::string GEJA((std::string)"std::string");
std::string GEJB((std::string)"std::string");
std::string GEJC((std::string)"std::string");
std::string GEJD((std::string)"std::string");
std::string GEJE((std::string)"std::string");
std::string GEJF((std::string)"std::string");
std::string GEJG((std::string)"std::string");
std::string GEJH((std::string)"std::string");
std::string GEJI((std::string)"std::string");
std::string GEJJ((std::string)"std::string");
std::string GFAA((std::string)"std::string");
std::string GFAB((std::string)"std::string");
std::string GFAC((std::string)"std::string");
std::string GFAD((std::string)"std::string");
std::string GFAE((std::string)"std::string");
std::string GFAF((std::string)"std::string");
std::string GFAG((std::string)"std::string");
std::string GFAH((std::string)"std::string");
std::string GFAI((std::string)"std::string");
std::string GFAJ((std::string)"std::string");
std::string GFBA((std::string)"std::string");
std::string GFBB((std::string)"std::string");
std::string GFBC((std::string)"std::string");
std::string GFBD((std::string)"std::string");
std::string GFBE((std::string)"std::string");
std::string GFBF((std::string)"std::string");
std::string GFBG((std::string)"std::string");
std::string GFBH((std::string)"std::string");
std::string GFBI((std::string)"std::string");
std::string GFBJ((std::string)"std::string");
std::string GFCA((std::string)"std::string");
std::string GFCB((std::string)"std::string");
std::string GFCC((std::string)"std::string");
std::string GFCD((std::string)"std::string");
std::string GFCE((std::string)"std::string");
std::string GFCF((std::string)"std::string");
std::string GFCG((std::string)"std::string");
std::string GFCH((std::string)"std::string");
std::string GFCI((std::string)"std::string");
std::string GFCJ((std::string)"std::string");
std::string GFDA((std::string)"std::string");
std::string GFDB((std::string)"std::string");
std::string GFDC((std::string)"std::string");
std::string GFDD((std::string)"std::string");
std::string GFDE((std::string)"std::string");
std::string GFDF((std::string)"std::string");
std::string GFDG((std::string)"std::string");
std::string GFDH((std::string)"std::string");
std::string GFDI((std::string)"std::string");
std::string GFDJ((std::string)"std::string");
std::string GFEA((std::string)"std::string");
std::string GFEB((std::string)"std::string");
std::string GFEC((std::string)"std::string");
std::string GFED((std::string)"std::string");
std::string GFEE((std::string)"std::string");
std::string GFEF((std::string)"std::string");
std::string GFEG((std::string)"std::string");
std::string GFEH((std::string)"std::string");
std::string GFEI((std::string)"std::string");
std::string GFEJ((std::string)"std::string");
std::string GFFA((std::string)"std::string");
std::string GFFB((std::string)"std::string");
std::string GFFC((std::string)"std::string");
std::string GFFD((std::string)"std::string");
std::string GFFE((std::string)"std::string");
std::string GFFF((std::string)"std::string");
std::string GFFG((std::string)"std::string");
std::string GFFH((std::string)"std::string");
std::string GFFI((std::string)"std::string");
std::string GFFJ((std::string)"std::string");
std::string GFGA((std::string)"std::string");
std::string GFGB((std::string)"std::string");
std::string GFGC((std::string)"std::string");
std::string GFGD((std::string)"std::string");
std::string GFGE((std::string)"std::string");
std::string GFGF((std::string)"std::string");
std::string GFGG((std::string)"std::string");
std::string GFGH((std::string)"std::string");
std::string GFGI((std::string)"std::string");
std::string GFGJ((std::string)"std::string");
std::string GFHA((std::string)"std::string");
std::string GFHB((std::string)"std::string");
std::string GFHC((std::string)"std::string");
std::string GFHD((std::string)"std::string");
std::string GFHE((std::string)"std::string");
std::string GFHF((std::string)"std::string");
std::string GFHG((std::string)"std::string");
std::string GFHH((std::string)"std::string");
std::string GFHI((std::string)"std::string");
std::string GFHJ((std::string)"std::string");
std::string GFIA((std::string)"std::string");
std::string GFIB((std::string)"std::string");
std::string GFIC((std::string)"std::string");
std::string GFID((std::string)"std::string");
std::string GFIE((std::string)"std::string");
std::string GFIF((std::string)"std::string");
std::string GFIG((std::string)"std::string");
std::string GFIH((std::string)"std::string");
std::string GFII((std::string)"std::string");
std::string GFIJ((std::string)"std::string");
std::string GFJA((std::string)"std::string");
std::string GFJB((std::string)"std::string");
std::string GFJC((std::string)"std::string");
std::string GFJD((std::string)"std::string");
std::string GFJE((std::string)"std::string");
std::string GFJF((std::string)"std::string");
std::string GFJG((std::string)"std::string");
std::string GFJH((std::string)"std::string");
std::string GFJI((std::string)"std::string");
std::string GFJJ((std::string)"std::string");
std::string GGAA((std::string)"std::string");
std::string GGAB((std::string)"std::string");
std::string GGAC((std::string)"std::string");
std::string GGAD((std::string)"std::string");
std::string GGAE((std::string)"std::string");
std::string GGAF((std::string)"std::string");
std::string GGAG((std::string)"std::string");
std::string GGAH((std::string)"std::string");
std::string GGAI((std::string)"std::string");
std::string GGAJ((std::string)"std::string");
std::string GGBA((std::string)"std::string");
std::string GGBB((std::string)"std::string");
std::string GGBC((std::string)"std::string");
std::string GGBD((std::string)"std::string");
std::string GGBE((std::string)"std::string");
std::string GGBF((std::string)"std::string");
std::string GGBG((std::string)"std::string");
std::string GGBH((std::string)"std::string");
std::string GGBI((std::string)"std::string");
std::string GGBJ((std::string)"std::string");
std::string GGCA((std::string)"std::string");
std::string GGCB((std::string)"std::string");
std::string GGCC((std::string)"std::string");
std::string GGCD((std::string)"std::string");
std::string GGCE((std::string)"std::string");
std::string GGCF((std::string)"std::string");
std::string GGCG((std::string)"std::string");
std::string GGCH((std::string)"std::string");
std::string GGCI((std::string)"std::string");
std::string GGCJ((std::string)"std::string");
std::string GGDA((std::string)"std::string");
std::string GGDB((std::string)"std::string");
std::string GGDC((std::string)"std::string");
std::string GGDD((std::string)"std::string");
std::string GGDE((std::string)"std::string");
std::string GGDF((std::string)"std::string");
std::string GGDG((std::string)"std::string");
std::string GGDH((std::string)"std::string");
std::string GGDI((std::string)"std::string");
std::string GGDJ((std::string)"std::string");
std::string GGEA((std::string)"std::string");
std::string GGEB((std::string)"std::string");
std::string GGEC((std::string)"std::string");
std::string GGED((std::string)"std::string");
std::string GGEE((std::string)"std::string");
std::string GGEF((std::string)"std::string");
std::string GGEG((std::string)"std::string");
std::string GGEH((std::string)"std::string");
std::string GGEI((std::string)"std::string");
std::string GGEJ((std::string)"std::string");
std::string GGFA((std::string)"std::string");
std::string GGFB((std::string)"std::string");
std::string GGFC((std::string)"std::string");
std::string GGFD((std::string)"std::string");
std::string GGFE((std::string)"std::string");
std::string GGFF((std::string)"std::string");
std::string GGFG((std::string)"std::string");
std::string GGFH((std::string)"std::string");
std::string GGFI((std::string)"std::string");
std::string GGFJ((std::string)"std::string");
std::string GGGA((std::string)"std::string");
std::string GGGB((std::string)"std::string");
std::string GGGC((std::string)"std::string");
std::string GGGD((std::string)"std::string");
std::string GGGE((std::string)"std::string");
std::string GGGF((std::string)"std::string");
std::string GGGG((std::string)"std::string");
std::string GGGH((std::string)"std::string");
std::string GGGI((std::string)"std::string");
std::string GGGJ((std::string)"std::string");
std::string GGHA((std::string)"std::string");
std::string GGHB((std::string)"std::string");
std::string GGHC((std::string)"std::string");
std::string GGHD((std::string)"std::string");
std::string GGHE((std::string)"std::string");
std::string GGHF((std::string)"std::string");
std::string GGHG((std::string)"std::string");
std::string GGHH((std::string)"std::string");
std::string GGHI((std::string)"std::string");
std::string GGHJ((std::string)"std::string");
std::string GGIA((std::string)"std::string");
std::string GGIB((std::string)"std::string");
std::string GGIC((std::string)"std::string");
std::string GGID((std::string)"std::string");
std::string GGIE((std::string)"std::string");
std::string GGIF((std::string)"std::string");
std::string GGIG((std::string)"std::string");
std::string GGIH((std::string)"std::string");
std::string GGII((std::string)"std::string");
std::string GGIJ((std::string)"std::string");
std::string GGJA((std::string)"std::string");
std::string GGJB((std::string)"std::string");
std::string GGJC((std::string)"std::string");
std::string GGJD((std::string)"std::string");
std::string GGJE((std::string)"std::string");
std::string GGJF((std::string)"std::string");
std::string GGJG((std::string)"std::string");
std::string GGJH((std::string)"std::string");
std::string GGJI((std::string)"std::string");
std::string GGJJ((std::string)"std::string");
std::string GHAA((std::string)"std::string");
std::string GHAB((std::string)"std::string");
std::string GHAC((std::string)"std::string");
std::string GHAD((std::string)"std::string");
std::string GHAE((std::string)"std::string");
std::string GHAF((std::string)"std::string");
std::string GHAG((std::string)"std::string");
std::string GHAH((std::string)"std::string");
std::string GHAI((std::string)"std::string");
std::string GHAJ((std::string)"std::string");
std::string GHBA((std::string)"std::string");
std::string GHBB((std::string)"std::string");
std::string GHBC((std::string)"std::string");
std::string GHBD((std::string)"std::string");
std::string GHBE((std::string)"std::string");
std::string GHBF((std::string)"std::string");
std::string GHBG((std::string)"std::string");
std::string GHBH((std::string)"std::string");
std::string GHBI((std::string)"std::string");
std::string GHBJ((std::string)"std::string");
std::string GHCA((std::string)"std::string");
std::string GHCB((std::string)"std::string");
std::string GHCC((std::string)"std::string");
std::string GHCD((std::string)"std::string");
std::string GHCE((std::string)"std::string");
std::string GHCF((std::string)"std::string");
std::string GHCG((std::string)"std::string");
std::string GHCH((std::string)"std::string");
std::string GHCI((std::string)"std::string");
std::string GHCJ((std::string)"std::string");
std::string GHDA((std::string)"std::string");
std::string GHDB((std::string)"std::string");
std::string GHDC((std::string)"std::string");
std::string GHDD((std::string)"std::string");
std::string GHDE((std::string)"std::string");
std::string GHDF((std::string)"std::string");
std::string GHDG((std::string)"std::string");
std::string GHDH((std::string)"std::string");
std::string GHDI((std::string)"std::string");
std::string GHDJ((std::string)"std::string");
std::string GHEA((std::string)"std::string");
std::string GHEB((std::string)"std::string");
std::string GHEC((std::string)"std::string");
std::string GHED((std::string)"std::string");
std::string GHEE((std::string)"std::string");
std::string GHEF((std::string)"std::string");
std::string GHEG((std::string)"std::string");
std::string GHEH((std::string)"std::string");
std::string GHEI((std::string)"std::string");
std::string GHEJ((std::string)"std::string");
std::string GHFA((std::string)"std::string");
std::string GHFB((std::string)"std::string");
std::string GHFC((std::string)"std::string");
std::string GHFD((std::string)"std::string");
std::string GHFE((std::string)"std::string");
std::string GHFF((std::string)"std::string");
std::string GHFG((std::string)"std::string");
std::string GHFH((std::string)"std::string");
std::string GHFI((std::string)"std::string");
std::string GHFJ((std::string)"std::string");
std::string GHGA((std::string)"std::string");
std::string GHGB((std::string)"std::string");
std::string GHGC((std::string)"std::string");
std::string GHGD((std::string)"std::string");
std::string GHGE((std::string)"std::string");
std::string GHGF((std::string)"std::string");
std::string GHGG((std::string)"std::string");
std::string GHGH((std::string)"std::string");
std::string GHGI((std::string)"std::string");
std::string GHGJ((std::string)"std::string");
std::string GHHA((std::string)"std::string");
std::string GHHB((std::string)"std::string");
std::string GHHC((std::string)"std::string");
std::string GHHD((std::string)"std::string");
std::string GHHE((std::string)"std::string");
std::string GHHF((std::string)"std::string");
std::string GHHG((std::string)"std::string");
std::string GHHH((std::string)"std::string");
std::string GHHI((std::string)"std::string");
std::string GHHJ((std::string)"std::string");
std::string GHIA((std::string)"std::string");
std::string GHIB((std::string)"std::string");
std::string GHIC((std::string)"std::string");
std::string GHID((std::string)"std::string");
std::string GHIE((std::string)"std::string");
std::string GHIF((std::string)"std::string");
std::string GHIG((std::string)"std::string");
std::string GHIH((std::string)"std::string");
std::string GHII((std::string)"std::string");
std::string GHIJ((std::string)"std::string");
std::string GHJA((std::string)"std::string");
std::string GHJB((std::string)"std::string");
std::string GHJC((std::string)"std::string");
std::string GHJD((std::string)"std::string");
std::string GHJE((std::string)"std::string");
std::string GHJF((std::string)"std::string");
std::string GHJG((std::string)"std::string");
std::string GHJH((std::string)"std::string");
std::string GHJI((std::string)"std::string");
std::string GHJJ((std::string)"std::string");
std::string GIAA((std::string)"std::string");
std::string GIAB((std::string)"std::string");
std::string GIAC((std::string)"std::string");
std::string GIAD((std::string)"std::string");
std::string GIAE((std::string)"std::string");
std::string GIAF((std::string)"std::string");
std::string GIAG((std::string)"std::string");
std::string GIAH((std::string)"std::string");
std::string GIAI((std::string)"std::string");
std::string GIAJ((std::string)"std::string");
std::string GIBA((std::string)"std::string");
std::string GIBB((std::string)"std::string");
std::string GIBC((std::string)"std::string");
std::string GIBD((std::string)"std::string");
std::string GIBE((std::string)"std::string");
std::string GIBF((std::string)"std::string");
std::string GIBG((std::string)"std::string");
std::string GIBH((std::string)"std::string");
std::string GIBI((std::string)"std::string");
std::string GIBJ((std::string)"std::string");
std::string GICA((std::string)"std::string");
std::string GICB((std::string)"std::string");
std::string GICC((std::string)"std::string");
std::string GICD((std::string)"std::string");
std::string GICE((std::string)"std::string");
std::string GICF((std::string)"std::string");
std::string GICG((std::string)"std::string");
std::string GICH((std::string)"std::string");
std::string GICI((std::string)"std::string");
std::string GICJ((std::string)"std::string");
std::string GIDA((std::string)"std::string");
std::string GIDB((std::string)"std::string");
std::string GIDC((std::string)"std::string");
std::string GIDD((std::string)"std::string");
std::string GIDE((std::string)"std::string");
std::string GIDF((std::string)"std::string");
std::string GIDG((std::string)"std::string");
std::string GIDH((std::string)"std::string");
std::string GIDI((std::string)"std::string");
std::string GIDJ((std::string)"std::string");
std::string GIEA((std::string)"std::string");
std::string GIEB((std::string)"std::string");
std::string GIEC((std::string)"std::string");
std::string GIED((std::string)"std::string");
std::string GIEE((std::string)"std::string");
std::string GIEF((std::string)"std::string");
std::string GIEG((std::string)"std::string");
std::string GIEH((std::string)"std::string");
std::string GIEI((std::string)"std::string");
std::string GIEJ((std::string)"std::string");
std::string GIFA((std::string)"std::string");
std::string GIFB((std::string)"std::string");
std::string GIFC((std::string)"std::string");
std::string GIFD((std::string)"std::string");
std::string GIFE((std::string)"std::string");
std::string GIFF((std::string)"std::string");
std::string GIFG((std::string)"std::string");
std::string GIFH((std::string)"std::string");
std::string GIFI((std::string)"std::string");
std::string GIFJ((std::string)"std::string");
std::string GIGA((std::string)"std::string");
std::string GIGB((std::string)"std::string");
std::string GIGC((std::string)"std::string");
std::string GIGD((std::string)"std::string");
std::string GIGE((std::string)"std::string");
std::string GIGF((std::string)"std::string");
std::string GIGG((std::string)"std::string");
std::string GIGH((std::string)"std::string");
std::string GIGI((std::string)"std::string");
std::string GIGJ((std::string)"std::string");
std::string GIHA((std::string)"std::string");
std::string GIHB((std::string)"std::string");
std::string GIHC((std::string)"std::string");
std::string GIHD((std::string)"std::string");
std::string GIHE((std::string)"std::string");
std::string GIHF((std::string)"std::string");
std::string GIHG((std::string)"std::string");
std::string GIHH((std::string)"std::string");
std::string GIHI((std::string)"std::string");
std::string GIHJ((std::string)"std::string");
std::string GIIA((std::string)"std::string");
std::string GIIB((std::string)"std::string");
std::string GIIC((std::string)"std::string");
std::string GIID((std::string)"std::string");
std::string GIIE((std::string)"std::string");
std::string GIIF((std::string)"std::string");
std::string GIIG((std::string)"std::string");
std::string GIIH((std::string)"std::string");
std::string GIII((std::string)"std::string");
std::string GIIJ((std::string)"std::string");
std::string GIJA((std::string)"std::string");
std::string GIJB((std::string)"std::string");
std::string GIJC((std::string)"std::string");
std::string GIJD((std::string)"std::string");
std::string GIJE((std::string)"std::string");
std::string GIJF((std::string)"std::string");
std::string GIJG((std::string)"std::string");
std::string GIJH((std::string)"std::string");
std::string GIJI((std::string)"std::string");
std::string GIJJ((std::string)"std::string");
std::string GJAA((std::string)"std::string");
std::string GJAB((std::string)"std::string");
std::string GJAC((std::string)"std::string");
std::string GJAD((std::string)"std::string");
std::string GJAE((std::string)"std::string");
std::string GJAF((std::string)"std::string");
std::string GJAG((std::string)"std::string");
std::string GJAH((std::string)"std::string");
std::string GJAI((std::string)"std::string");
std::string GJAJ((std::string)"std::string");
std::string GJBA((std::string)"std::string");
std::string GJBB((std::string)"std::string");
std::string GJBC((std::string)"std::string");
std::string GJBD((std::string)"std::string");
std::string GJBE((std::string)"std::string");
std::string GJBF((std::string)"std::string");
std::string GJBG((std::string)"std::string");
std::string GJBH((std::string)"std::string");
std::string GJBI((std::string)"std::string");
std::string GJBJ((std::string)"std::string");
std::string GJCA((std::string)"std::string");
std::string GJCB((std::string)"std::string");
std::string GJCC((std::string)"std::string");
std::string GJCD((std::string)"std::string");
std::string GJCE((std::string)"std::string");
std::string GJCF((std::string)"std::string");
std::string GJCG((std::string)"std::string");
std::string GJCH((std::string)"std::string");
std::string GJCI((std::string)"std::string");
std::string GJCJ((std::string)"std::string");
std::string GJDA((std::string)"std::string");
std::string GJDB((std::string)"std::string");
std::string GJDC((std::string)"std::string");
std::string GJDD((std::string)"std::string");
std::string GJDE((std::string)"std::string");
std::string GJDF((std::string)"std::string");
std::string GJDG((std::string)"std::string");
std::string GJDH((std::string)"std::string");
std::string GJDI((std::string)"std::string");
std::string GJDJ((std::string)"std::string");
std::string GJEA((std::string)"std::string");
std::string GJEB((std::string)"std::string");
std::string GJEC((std::string)"std::string");
std::string GJED((std::string)"std::string");
std::string GJEE((std::string)"std::string");
std::string GJEF((std::string)"std::string");
std::string GJEG((std::string)"std::string");
std::string GJEH((std::string)"std::string");
std::string GJEI((std::string)"std::string");
std::string GJEJ((std::string)"std::string");
std::string GJFA((std::string)"std::string");
std::string GJFB((std::string)"std::string");
std::string GJFC((std::string)"std::string");
std::string GJFD((std::string)"std::string");
std::string GJFE((std::string)"std::string");
std::string GJFF((std::string)"std::string");
std::string GJFG((std::string)"std::string");
std::string GJFH((std::string)"std::string");
std::string GJFI((std::string)"std::string");
std::string GJFJ((std::string)"std::string");
std::string GJGA((std::string)"std::string");
std::string GJGB((std::string)"std::string");
std::string GJGC((std::string)"std::string");
std::string GJGD((std::string)"std::string");
std::string GJGE((std::string)"std::string");
std::string GJGF((std::string)"std::string");
std::string GJGG((std::string)"std::string");
std::string GJGH((std::string)"std::string");
std::string GJGI((std::string)"std::string");
std::string GJGJ((std::string)"std::string");
std::string GJHA((std::string)"std::string");
std::string GJHB((std::string)"std::string");
std::string GJHC((std::string)"std::string");
std::string GJHD((std::string)"std::string");
std::string GJHE((std::string)"std::string");
std::string GJHF((std::string)"std::string");
std::string GJHG((std::string)"std::string");
std::string GJHH((std::string)"std::string");
std::string GJHI((std::string)"std::string");
std::string GJHJ((std::string)"std::string");
std::string GJIA((std::string)"std::string");
std::string GJIB((std::string)"std::string");
std::string GJIC((std::string)"std::string");
std::string GJID((std::string)"std::string");
std::string GJIE((std::string)"std::string");
std::string GJIF((std::string)"std::string");
std::string GJIG((std::string)"std::string");
std::string GJIH((std::string)"std::string");
std::string GJII((std::string)"std::string");
std::string GJIJ((std::string)"std::string");
std::string GJJA((std::string)"std::string");
std::string GJJB((std::string)"std::string");
std::string GJJC((std::string)"std::string");
std::string GJJD((std::string)"std::string");
std::string GJJE((std::string)"std::string");
std::string GJJF((std::string)"std::string");
std::string GJJG((std::string)"std::string");
std::string GJJH((std::string)"std::string");
std::string GJJI((std::string)"std::string");
std::string GJJJ((std::string)"std::string");
std::string HAAA((std::string)"std::string");
std::string HAAB((std::string)"std::string");
std::string HAAC((std::string)"std::string");
std::string HAAD((std::string)"std::string");
std::string HAAE((std::string)"std::string");
std::string HAAF((std::string)"std::string");
std::string HAAG((std::string)"std::string");
std::string HAAH((std::string)"std::string");
std::string HAAI((std::string)"std::string");
std::string HAAJ((std::string)"std::string");
std::string HABA((std::string)"std::string");
std::string HABB((std::string)"std::string");
std::string HABC((std::string)"std::string");
std::string HABD((std::string)"std::string");
std::string HABE((std::string)"std::string");
std::string HABF((std::string)"std::string");
std::string HABG((std::string)"std::string");
std::string HABH((std::string)"std::string");
std::string HABI((std::string)"std::string");
std::string HABJ((std::string)"std::string");
std::string HACA((std::string)"std::string");
std::string HACB((std::string)"std::string");
std::string HACC((std::string)"std::string");
std::string HACD((std::string)"std::string");
std::string HACE((std::string)"std::string");
std::string HACF((std::string)"std::string");
std::string HACG((std::string)"std::string");
std::string HACH((std::string)"std::string");
std::string HACI((std::string)"std::string");
std::string HACJ((std::string)"std::string");
std::string HADA((std::string)"std::string");
std::string HADB((std::string)"std::string");
std::string HADC((std::string)"std::string");
std::string HADD((std::string)"std::string");
std::string HADE((std::string)"std::string");
std::string HADF((std::string)"std::string");
std::string HADG((std::string)"std::string");
std::string HADH((std::string)"std::string");
std::string HADI((std::string)"std::string");
std::string HADJ((std::string)"std::string");
std::string HAEA((std::string)"std::string");
std::string HAEB((std::string)"std::string");
std::string HAEC((std::string)"std::string");
std::string HAED((std::string)"std::string");
std::string HAEE((std::string)"std::string");
std::string HAEF((std::string)"std::string");
std::string HAEG((std::string)"std::string");
std::string HAEH((std::string)"std::string");
std::string HAEI((std::string)"std::string");
std::string HAEJ((std::string)"std::string");
std::string HAFA((std::string)"std::string");
std::string HAFB((std::string)"std::string");
std::string HAFC((std::string)"std::string");
std::string HAFD((std::string)"std::string");
std::string HAFE((std::string)"std::string");
std::string HAFF((std::string)"std::string");
std::string HAFG((std::string)"std::string");
std::string HAFH((std::string)"std::string");
std::string HAFI((std::string)"std::string");
std::string HAFJ((std::string)"std::string");
std::string HAGA((std::string)"std::string");
std::string HAGB((std::string)"std::string");
std::string HAGC((std::string)"std::string");
std::string HAGD((std::string)"std::string");
std::string HAGE((std::string)"std::string");
std::string HAGF((std::string)"std::string");
std::string HAGG((std::string)"std::string");
std::string HAGH((std::string)"std::string");
std::string HAGI((std::string)"std::string");
std::string HAGJ((std::string)"std::string");
std::string HAHA((std::string)"std::string");
std::string HAHB((std::string)"std::string");
std::string HAHC((std::string)"std::string");
std::string HAHD((std::string)"std::string");
std::string HAHE((std::string)"std::string");
std::string HAHF((std::string)"std::string");
std::string HAHG((std::string)"std::string");
std::string HAHH((std::string)"std::string");
std::string HAHI((std::string)"std::string");
std::string HAHJ((std::string)"std::string");
std::string HAIA((std::string)"std::string");
std::string HAIB((std::string)"std::string");
std::string HAIC((std::string)"std::string");
std::string HAID((std::string)"std::string");
std::string HAIE((std::string)"std::string");
std::string HAIF((std::string)"std::string");
std::string HAIG((std::string)"std::string");
std::string HAIH((std::string)"std::string");
std::string HAII((std::string)"std::string");
std::string HAIJ((std::string)"std::string");
std::string HAJA((std::string)"std::string");
std::string HAJB((std::string)"std::string");
std::string HAJC((std::string)"std::string");
std::string HAJD((std::string)"std::string");
std::string HAJE((std::string)"std::string");
std::string HAJF((std::string)"std::string");
std::string HAJG((std::string)"std::string");
std::string HAJH((std::string)"std::string");
std::string HAJI((std::string)"std::string");
std::string HAJJ((std::string)"std::string");
std::string HBAA((std::string)"std::string");
std::string HBAB((std::string)"std::string");
std::string HBAC((std::string)"std::string");
std::string HBAD((std::string)"std::string");
std::string HBAE((std::string)"std::string");
std::string HBAF((std::string)"std::string");
std::string HBAG((std::string)"std::string");
std::string HBAH((std::string)"std::string");
std::string HBAI((std::string)"std::string");
std::string HBAJ((std::string)"std::string");
std::string HBBA((std::string)"std::string");
std::string HBBB((std::string)"std::string");
std::string HBBC((std::string)"std::string");
std::string HBBD((std::string)"std::string");
std::string HBBE((std::string)"std::string");
std::string HBBF((std::string)"std::string");
std::string HBBG((std::string)"std::string");
std::string HBBH((std::string)"std::string");
std::string HBBI((std::string)"std::string");
std::string HBBJ((std::string)"std::string");
std::string HBCA((std::string)"std::string");
std::string HBCB((std::string)"std::string");
std::string HBCC((std::string)"std::string");
std::string HBCD((std::string)"std::string");
std::string HBCE((std::string)"std::string");
std::string HBCF((std::string)"std::string");
std::string HBCG((std::string)"std::string");
std::string HBCH((std::string)"std::string");
std::string HBCI((std::string)"std::string");
std::string HBCJ((std::string)"std::string");
std::string HBDA((std::string)"std::string");
std::string HBDB((std::string)"std::string");
std::string HBDC((std::string)"std::string");
std::string HBDD((std::string)"std::string");
std::string HBDE((std::string)"std::string");
std::string HBDF((std::string)"std::string");
std::string HBDG((std::string)"std::string");
std::string HBDH((std::string)"std::string");
std::string HBDI((std::string)"std::string");
std::string HBDJ((std::string)"std::string");
std::string HBEA((std::string)"std::string");
std::string HBEB((std::string)"std::string");
std::string HBEC((std::string)"std::string");
std::string HBED((std::string)"std::string");
std::string HBEE((std::string)"std::string");
std::string HBEF((std::string)"std::string");
std::string HBEG((std::string)"std::string");
std::string HBEH((std::string)"std::string");
std::string HBEI((std::string)"std::string");
std::string HBEJ((std::string)"std::string");
std::string HBFA((std::string)"std::string");
std::string HBFB((std::string)"std::string");
std::string HBFC((std::string)"std::string");
std::string HBFD((std::string)"std::string");
std::string HBFE((std::string)"std::string");
std::string HBFF((std::string)"std::string");
std::string HBFG((std::string)"std::string");
std::string HBFH((std::string)"std::string");
std::string HBFI((std::string)"std::string");
std::string HBFJ((std::string)"std::string");
std::string HBGA((std::string)"std::string");
std::string HBGB((std::string)"std::string");
std::string HBGC((std::string)"std::string");
std::string HBGD((std::string)"std::string");
std::string HBGE((std::string)"std::string");
std::string HBGF((std::string)"std::string");
std::string HBGG((std::string)"std::string");
std::string HBGH((std::string)"std::string");
std::string HBGI((std::string)"std::string");
std::string HBGJ((std::string)"std::string");
std::string HBHA((std::string)"std::string");
std::string HBHB((std::string)"std::string");
std::string HBHC((std::string)"std::string");
std::string HBHD((std::string)"std::string");
std::string HBHE((std::string)"std::string");
std::string HBHF((std::string)"std::string");
std::string HBHG((std::string)"std::string");
std::string HBHH((std::string)"std::string");
std::string HBHI((std::string)"std::string");
std::string HBHJ((std::string)"std::string");
std::string HBIA((std::string)"std::string");
std::string HBIB((std::string)"std::string");
std::string HBIC((std::string)"std::string");
std::string HBID((std::string)"std::string");
std::string HBIE((std::string)"std::string");
std::string HBIF((std::string)"std::string");
std::string HBIG((std::string)"std::string");
std::string HBIH((std::string)"std::string");
std::string HBII((std::string)"std::string");
std::string HBIJ((std::string)"std::string");
std::string HBJA((std::string)"std::string");
std::string HBJB((std::string)"std::string");
std::string HBJC((std::string)"std::string");
std::string HBJD((std::string)"std::string");
std::string HBJE((std::string)"std::string");
std::string HBJF((std::string)"std::string");
std::string HBJG((std::string)"std::string");
std::string HBJH((std::string)"std::string");
std::string HBJI((std::string)"std::string");
std::string HBJJ((std::string)"std::string");
std::string HCAA((std::string)"std::string");
std::string HCAB((std::string)"std::string");
std::string HCAC((std::string)"std::string");
std::string HCAD((std::string)"std::string");
std::string HCAE((std::string)"std::string");
std::string HCAF((std::string)"std::string");
std::string HCAG((std::string)"std::string");
std::string HCAH((std::string)"std::string");
std::string HCAI((std::string)"std::string");
std::string HCAJ((std::string)"std::string");
std::string HCBA((std::string)"std::string");
std::string HCBB((std::string)"std::string");
std::string HCBC((std::string)"std::string");
std::string HCBD((std::string)"std::string");
std::string HCBE((std::string)"std::string");
std::string HCBF((std::string)"std::string");
std::string HCBG((std::string)"std::string");
std::string HCBH((std::string)"std::string");
std::string HCBI((std::string)"std::string");
std::string HCBJ((std::string)"std::string");
std::string HCCA((std::string)"std::string");
std::string HCCB((std::string)"std::string");
std::string HCCC((std::string)"std::string");
std::string HCCD((std::string)"std::string");
std::string HCCE((std::string)"std::string");
std::string HCCF((std::string)"std::string");
std::string HCCG((std::string)"std::string");
std::string HCCH((std::string)"std::string");
std::string HCCI((std::string)"std::string");
std::string HCCJ((std::string)"std::string");
std::string HCDA((std::string)"std::string");
std::string HCDB((std::string)"std::string");
std::string HCDC((std::string)"std::string");
std::string HCDD((std::string)"std::string");
std::string HCDE((std::string)"std::string");
std::string HCDF((std::string)"std::string");
std::string HCDG((std::string)"std::string");
std::string HCDH((std::string)"std::string");
std::string HCDI((std::string)"std::string");
std::string HCDJ((std::string)"std::string");
std::string HCEA((std::string)"std::string");
std::string HCEB((std::string)"std::string");
std::string HCEC((std::string)"std::string");
std::string HCED((std::string)"std::string");
std::string HCEE((std::string)"std::string");
std::string HCEF((std::string)"std::string");
std::string HCEG((std::string)"std::string");
std::string HCEH((std::string)"std::string");
std::string HCEI((std::string)"std::string");
std::string HCEJ((std::string)"std::string");
std::string HCFA((std::string)"std::string");
std::string HCFB((std::string)"std::string");
std::string HCFC((std::string)"std::string");
std::string HCFD((std::string)"std::string");
std::string HCFE((std::string)"std::string");
std::string HCFF((std::string)"std::string");
std::string HCFG((std::string)"std::string");
std::string HCFH((std::string)"std::string");
std::string HCFI((std::string)"std::string");
std::string HCFJ((std::string)"std::string");
std::string HCGA((std::string)"std::string");
std::string HCGB((std::string)"std::string");
std::string HCGC((std::string)"std::string");
std::string HCGD((std::string)"std::string");
std::string HCGE((std::string)"std::string");
std::string HCGF((std::string)"std::string");
std::string HCGG((std::string)"std::string");
std::string HCGH((std::string)"std::string");
std::string HCGI((std::string)"std::string");
std::string HCGJ((std::string)"std::string");
std::string HCHA((std::string)"std::string");
std::string HCHB((std::string)"std::string");
std::string HCHC((std::string)"std::string");
std::string HCHD((std::string)"std::string");
std::string HCHE((std::string)"std::string");
std::string HCHF((std::string)"std::string");
std::string HCHG((std::string)"std::string");
std::string HCHH((std::string)"std::string");
std::string HCHI((std::string)"std::string");
std::string HCHJ((std::string)"std::string");
std::string HCIA((std::string)"std::string");
std::string HCIB((std::string)"std::string");
std::string HCIC((std::string)"std::string");
std::string HCID((std::string)"std::string");
std::string HCIE((std::string)"std::string");
std::string HCIF((std::string)"std::string");
std::string HCIG((std::string)"std::string");
std::string HCIH((std::string)"std::string");
std::string HCII((std::string)"std::string");
std::string HCIJ((std::string)"std::string");
std::string HCJA((std::string)"std::string");
std::string HCJB((std::string)"std::string");
std::string HCJC((std::string)"std::string");
std::string HCJD((std::string)"std::string");
std::string HCJE((std::string)"std::string");
std::string HCJF((std::string)"std::string");
std::string HCJG((std::string)"std::string");
std::string HCJH((std::string)"std::string");
std::string HCJI((std::string)"std::string");
std::string HCJJ((std::string)"std::string");
std::string HDAA((std::string)"std::string");
std::string HDAB((std::string)"std::string");
std::string HDAC((std::string)"std::string");
std::string HDAD((std::string)"std::string");
std::string HDAE((std::string)"std::string");
std::string HDAF((std::string)"std::string");
std::string HDAG((std::string)"std::string");
std::string HDAH((std::string)"std::string");
std::string HDAI((std::string)"std::string");
std::string HDAJ((std::string)"std::string");
std::string HDBA((std::string)"std::string");
std::string HDBB((std::string)"std::string");
std::string HDBC((std::string)"std::string");
std::string HDBD((std::string)"std::string");
std::string HDBE((std::string)"std::string");
std::string HDBF((std::string)"std::string");
std::string HDBG((std::string)"std::string");
std::string HDBH((std::string)"std::string");
std::string HDBI((std::string)"std::string");
std::string HDBJ((std::string)"std::string");
std::string HDCA((std::string)"std::string");
std::string HDCB((std::string)"std::string");
std::string HDCC((std::string)"std::string");
std::string HDCD((std::string)"std::string");
std::string HDCE((std::string)"std::string");
std::string HDCF((std::string)"std::string");
std::string HDCG((std::string)"std::string");
std::string HDCH((std::string)"std::string");
std::string HDCI((std::string)"std::string");
std::string HDCJ((std::string)"std::string");
std::string HDDA((std::string)"std::string");
std::string HDDB((std::string)"std::string");
std::string HDDC((std::string)"std::string");
std::string HDDD((std::string)"std::string");
std::string HDDE((std::string)"std::string");
std::string HDDF((std::string)"std::string");
std::string HDDG((std::string)"std::string");
std::string HDDH((std::string)"std::string");
std::string HDDI((std::string)"std::string");
std::string HDDJ((std::string)"std::string");
std::string HDEA((std::string)"std::string");
std::string HDEB((std::string)"std::string");
std::string HDEC((std::string)"std::string");
std::string HDED((std::string)"std::string");
std::string HDEE((std::string)"std::string");
std::string HDEF((std::string)"std::string");
std::string HDEG((std::string)"std::string");
std::string HDEH((std::string)"std::string");
std::string HDEI((std::string)"std::string");
std::string HDEJ((std::string)"std::string");
std::string HDFA((std::string)"std::string");
std::string HDFB((std::string)"std::string");
std::string HDFC((std::string)"std::string");
std::string HDFD((std::string)"std::string");
std::string HDFE((std::string)"std::string");
std::string HDFF((std::string)"std::string");
std::string HDFG((std::string)"std::string");
std::string HDFH((std::string)"std::string");
std::string HDFI((std::string)"std::string");
std::string HDFJ((std::string)"std::string");
std::string HDGA((std::string)"std::string");
std::string HDGB((std::string)"std::string");
std::string HDGC((std::string)"std::string");
std::string HDGD((std::string)"std::string");
std::string HDGE((std::string)"std::string");
std::string HDGF((std::string)"std::string");
std::string HDGG((std::string)"std::string");
std::string HDGH((std::string)"std::string");
std::string HDGI((std::string)"std::string");
std::string HDGJ((std::string)"std::string");
std::string HDHA((std::string)"std::string");
std::string HDHB((std::string)"std::string");
std::string HDHC((std::string)"std::string");
std::string HDHD((std::string)"std::string");
std::string HDHE((std::string)"std::string");
std::string HDHF((std::string)"std::string");
std::string HDHG((std::string)"std::string");
std::string HDHH((std::string)"std::string");
std::string HDHI((std::string)"std::string");
std::string HDHJ((std::string)"std::string");
std::string HDIA((std::string)"std::string");
std::string HDIB((std::string)"std::string");
std::string HDIC((std::string)"std::string");
std::string HDID((std::string)"std::string");
std::string HDIE((std::string)"std::string");
std::string HDIF((std::string)"std::string");
std::string HDIG((std::string)"std::string");
std::string HDIH((std::string)"std::string");
std::string HDII((std::string)"std::string");
std::string HDIJ((std::string)"std::string");
std::string HDJA((std::string)"std::string");
std::string HDJB((std::string)"std::string");
std::string HDJC((std::string)"std::string");
std::string HDJD((std::string)"std::string");
std::string HDJE((std::string)"std::string");
std::string HDJF((std::string)"std::string");
std::string HDJG((std::string)"std::string");
std::string HDJH((std::string)"std::string");
std::string HDJI((std::string)"std::string");
std::string HDJJ((std::string)"std::string");
std::string HEAA((std::string)"std::string");
std::string HEAB((std::string)"std::string");
std::string HEAC((std::string)"std::string");
std::string HEAD((std::string)"std::string");
std::string HEAE((std::string)"std::string");
std::string HEAF((std::string)"std::string");
std::string HEAG((std::string)"std::string");
std::string HEAH((std::string)"std::string");
std::string HEAI((std::string)"std::string");
std::string HEAJ((std::string)"std::string");
std::string HEBA((std::string)"std::string");
std::string HEBB((std::string)"std::string");
std::string HEBC((std::string)"std::string");
std::string HEBD((std::string)"std::string");
std::string HEBE((std::string)"std::string");
std::string HEBF((std::string)"std::string");
std::string HEBG((std::string)"std::string");
std::string HEBH((std::string)"std::string");
std::string HEBI((std::string)"std::string");
std::string HEBJ((std::string)"std::string");
std::string HECA((std::string)"std::string");
std::string HECB((std::string)"std::string");
std::string HECC((std::string)"std::string");
std::string HECD((std::string)"std::string");
std::string HECE((std::string)"std::string");
std::string HECF((std::string)"std::string");
std::string HECG((std::string)"std::string");
std::string HECH((std::string)"std::string");
std::string HECI((std::string)"std::string");
std::string HECJ((std::string)"std::string");
std::string HEDA((std::string)"std::string");
std::string HEDB((std::string)"std::string");
std::string HEDC((std::string)"std::string");
std::string HEDD((std::string)"std::string");
std::string HEDE((std::string)"std::string");
std::string HEDF((std::string)"std::string");
std::string HEDG((std::string)"std::string");
std::string HEDH((std::string)"std::string");
std::string HEDI((std::string)"std::string");
std::string HEDJ((std::string)"std::string");
std::string HEEA((std::string)"std::string");
std::string HEEB((std::string)"std::string");
std::string HEEC((std::string)"std::string");
std::string HEED((std::string)"std::string");
std::string HEEE((std::string)"std::string");
std::string HEEF((std::string)"std::string");
std::string HEEG((std::string)"std::string");
std::string HEEH((std::string)"std::string");
std::string HEEI((std::string)"std::string");
std::string HEEJ((std::string)"std::string");
std::string HEFA((std::string)"std::string");
std::string HEFB((std::string)"std::string");
std::string HEFC((std::string)"std::string");
std::string HEFD((std::string)"std::string");
std::string HEFE((std::string)"std::string");
std::string HEFF((std::string)"std::string");
std::string HEFG((std::string)"std::string");
std::string HEFH((std::string)"std::string");
std::string HEFI((std::string)"std::string");
std::string HEFJ((std::string)"std::string");
std::string HEGA((std::string)"std::string");
std::string HEGB((std::string)"std::string");
std::string HEGC((std::string)"std::string");
std::string HEGD((std::string)"std::string");
std::string HEGE((std::string)"std::string");
std::string HEGF((std::string)"std::string");
std::string HEGG((std::string)"std::string");
std::string HEGH((std::string)"std::string");
std::string HEGI((std::string)"std::string");
std::string HEGJ((std::string)"std::string");
std::string HEHA((std::string)"std::string");
std::string HEHB((std::string)"std::string");
std::string HEHC((std::string)"std::string");
std::string HEHD((std::string)"std::string");
std::string HEHE((std::string)"std::string");
std::string HEHF((std::string)"std::string");
std::string HEHG((std::string)"std::string");
std::string HEHH((std::string)"std::string");
std::string HEHI((std::string)"std::string");
std::string HEHJ((std::string)"std::string");
std::string HEIA((std::string)"std::string");
std::string HEIB((std::string)"std::string");
std::string HEIC((std::string)"std::string");
std::string HEID((std::string)"std::string");
std::string HEIE((std::string)"std::string");
std::string HEIF((std::string)"std::string");
std::string HEIG((std::string)"std::string");
std::string HEIH((std::string)"std::string");
std::string HEII((std::string)"std::string");
std::string HEIJ((std::string)"std::string");
std::string HEJA((std::string)"std::string");
std::string HEJB((std::string)"std::string");
std::string HEJC((std::string)"std::string");
std::string HEJD((std::string)"std::string");
std::string HEJE((std::string)"std::string");
std::string HEJF((std::string)"std::string");
std::string HEJG((std::string)"std::string");
std::string HEJH((std::string)"std::string");
std::string HEJI((std::string)"std::string");
std::string HEJJ((std::string)"std::string");
std::string HFAA((std::string)"std::string");
std::string HFAB((std::string)"std::string");
std::string HFAC((std::string)"std::string");
std::string HFAD((std::string)"std::string");
std::string HFAE((std::string)"std::string");
std::string HFAF((std::string)"std::string");
std::string HFAG((std::string)"std::string");
std::string HFAH((std::string)"std::string");
std::string HFAI((std::string)"std::string");
std::string HFAJ((std::string)"std::string");
std::string HFBA((std::string)"std::string");
std::string HFBB((std::string)"std::string");
std::string HFBC((std::string)"std::string");
std::string HFBD((std::string)"std::string");
std::string HFBE((std::string)"std::string");
std::string HFBF((std::string)"std::string");
std::string HFBG((std::string)"std::string");
std::string HFBH((std::string)"std::string");
std::string HFBI((std::string)"std::string");
std::string HFBJ((std::string)"std::string");
std::string HFCA((std::string)"std::string");
std::string HFCB((std::string)"std::string");
std::string HFCC((std::string)"std::string");
std::string HFCD((std::string)"std::string");
std::string HFCE((std::string)"std::string");
std::string HFCF((std::string)"std::string");
std::string HFCG((std::string)"std::string");
std::string HFCH((std::string)"std::string");
std::string HFCI((std::string)"std::string");
std::string HFCJ((std::string)"std::string");
std::string HFDA((std::string)"std::string");
std::string HFDB((std::string)"std::string");
std::string HFDC((std::string)"std::string");
std::string HFDD((std::string)"std::string");
std::string HFDE((std::string)"std::string");
std::string HFDF((std::string)"std::string");
std::string HFDG((std::string)"std::string");
std::string HFDH((std::string)"std::string");
std::string HFDI((std::string)"std::string");
std::string HFDJ((std::string)"std::string");
std::string HFEA((std::string)"std::string");
std::string HFEB((std::string)"std::string");
std::string HFEC((std::string)"std::string");
std::string HFED((std::string)"std::string");
std::string HFEE((std::string)"std::string");
std::string HFEF((std::string)"std::string");
std::string HFEG((std::string)"std::string");
std::string HFEH((std::string)"std::string");
std::string HFEI((std::string)"std::string");
std::string HFEJ((std::string)"std::string");
std::string HFFA((std::string)"std::string");
std::string HFFB((std::string)"std::string");
std::string HFFC((std::string)"std::string");
std::string HFFD((std::string)"std::string");
std::string HFFE((std::string)"std::string");
std::string HFFF((std::string)"std::string");
std::string HFFG((std::string)"std::string");
std::string HFFH((std::string)"std::string");
std::string HFFI((std::string)"std::string");
std::string HFFJ((std::string)"std::string");
std::string HFGA((std::string)"std::string");
std::string HFGB((std::string)"std::string");
std::string HFGC((std::string)"std::string");
std::string HFGD((std::string)"std::string");
std::string HFGE((std::string)"std::string");
std::string HFGF((std::string)"std::string");
std::string HFGG((std::string)"std::string");
std::string HFGH((std::string)"std::string");
std::string HFGI((std::string)"std::string");
std::string HFGJ((std::string)"std::string");
std::string HFHA((std::string)"std::string");
std::string HFHB((std::string)"std::string");
std::string HFHC((std::string)"std::string");
std::string HFHD((std::string)"std::string");
std::string HFHE((std::string)"std::string");
std::string HFHF((std::string)"std::string");
std::string HFHG((std::string)"std::string");
std::string HFHH((std::string)"std::string");
std::string HFHI((std::string)"std::string");
std::string HFHJ((std::string)"std::string");
std::string HFIA((std::string)"std::string");
std::string HFIB((std::string)"std::string");
std::string HFIC((std::string)"std::string");
std::string HFID((std::string)"std::string");
std::string HFIE((std::string)"std::string");
std::string HFIF((std::string)"std::string");
std::string HFIG((std::string)"std::string");
std::string HFIH((std::string)"std::string");
std::string HFII((std::string)"std::string");
std::string HFIJ((std::string)"std::string");
std::string HFJA((std::string)"std::string");
std::string HFJB((std::string)"std::string");
std::string HFJC((std::string)"std::string");
std::string HFJD((std::string)"std::string");
std::string HFJE((std::string)"std::string");
std::string HFJF((std::string)"std::string");
std::string HFJG((std::string)"std::string");
std::string HFJH((std::string)"std::string");
std::string HFJI((std::string)"std::string");
std::string HFJJ((std::string)"std::string");
std::string HGAA((std::string)"std::string");
std::string HGAB((std::string)"std::string");
std::string HGAC((std::string)"std::string");
std::string HGAD((std::string)"std::string");
std::string HGAE((std::string)"std::string");
std::string HGAF((std::string)"std::string");
std::string HGAG((std::string)"std::string");
std::string HGAH((std::string)"std::string");
std::string HGAI((std::string)"std::string");
std::string HGAJ((std::string)"std::string");
std::string HGBA((std::string)"std::string");
std::string HGBB((std::string)"std::string");
std::string HGBC((std::string)"std::string");
std::string HGBD((std::string)"std::string");
std::string HGBE((std::string)"std::string");
std::string HGBF((std::string)"std::string");
std::string HGBG((std::string)"std::string");
std::string HGBH((std::string)"std::string");
std::string HGBI((std::string)"std::string");
std::string HGBJ((std::string)"std::string");
std::string HGCA((std::string)"std::string");
std::string HGCB((std::string)"std::string");
std::string HGCC((std::string)"std::string");
std::string HGCD((std::string)"std::string");
std::string HGCE((std::string)"std::string");
std::string HGCF((std::string)"std::string");
std::string HGCG((std::string)"std::string");
std::string HGCH((std::string)"std::string");
std::string HGCI((std::string)"std::string");
std::string HGCJ((std::string)"std::string");
std::string HGDA((std::string)"std::string");
std::string HGDB((std::string)"std::string");
std::string HGDC((std::string)"std::string");
std::string HGDD((std::string)"std::string");
std::string HGDE((std::string)"std::string");
std::string HGDF((std::string)"std::string");
std::string HGDG((std::string)"std::string");
std::string HGDH((std::string)"std::string");
std::string HGDI((std::string)"std::string");
std::string HGDJ((std::string)"std::string");
std::string HGEA((std::string)"std::string");
std::string HGEB((std::string)"std::string");
std::string HGEC((std::string)"std::string");
std::string HGED((std::string)"std::string");
std::string HGEE((std::string)"std::string");
std::string HGEF((std::string)"std::string");
std::string HGEG((std::string)"std::string");
std::string HGEH((std::string)"std::string");
std::string HGEI((std::string)"std::string");
std::string HGEJ((std::string)"std::string");
std::string HGFA((std::string)"std::string");
std::string HGFB((std::string)"std::string");
std::string HGFC((std::string)"std::string");
std::string HGFD((std::string)"std::string");
std::string HGFE((std::string)"std::string");
std::string HGFF((std::string)"std::string");
std::string HGFG((std::string)"std::string");
std::string HGFH((std::string)"std::string");
std::string HGFI((std::string)"std::string");
std::string HGFJ((std::string)"std::string");
std::string HGGA((std::string)"std::string");
std::string HGGB((std::string)"std::string");
std::string HGGC((std::string)"std::string");
std::string HGGD((std::string)"std::string");
std::string HGGE((std::string)"std::string");
std::string HGGF((std::string)"std::string");
std::string HGGG((std::string)"std::string");
std::string HGGH((std::string)"std::string");
std::string HGGI((std::string)"std::string");
std::string HGGJ((std::string)"std::string");
std::string HGHA((std::string)"std::string");
std::string HGHB((std::string)"std::string");
std::string HGHC((std::string)"std::string");
std::string HGHD((std::string)"std::string");
std::string HGHE((std::string)"std::string");
std::string HGHF((std::string)"std::string");
std::string HGHG((std::string)"std::string");
std::string HGHH((std::string)"std::string");
std::string HGHI((std::string)"std::string");
std::string HGHJ((std::string)"std::string");
std::string HGIA((std::string)"std::string");
std::string HGIB((std::string)"std::string");
std::string HGIC((std::string)"std::string");
std::string HGID((std::string)"std::string");
std::string HGIE((std::string)"std::string");
std::string HGIF((std::string)"std::string");
std::string HGIG((std::string)"std::string");
std::string HGIH((std::string)"std::string");
std::string HGII((std::string)"std::string");
std::string HGIJ((std::string)"std::string");
std::string HGJA((std::string)"std::string");
std::string HGJB((std::string)"std::string");
std::string HGJC((std::string)"std::string");
std::string HGJD((std::string)"std::string");
std::string HGJE((std::string)"std::string");
std::string HGJF((std::string)"std::string");
std::string HGJG((std::string)"std::string");
std::string HGJH((std::string)"std::string");
std::string HGJI((std::string)"std::string");
std::string HGJJ((std::string)"std::string");
std::string HHAA((std::string)"std::string");
std::string HHAB((std::string)"std::string");
std::string HHAC((std::string)"std::string");
std::string HHAD((std::string)"std::string");
std::string HHAE((std::string)"std::string");
std::string HHAF((std::string)"std::string");
std::string HHAG((std::string)"std::string");
std::string HHAH((std::string)"std::string");
std::string HHAI((std::string)"std::string");
std::string HHAJ((std::string)"std::string");
std::string HHBA((std::string)"std::string");
std::string HHBB((std::string)"std::string");
std::string HHBC((std::string)"std::string");
std::string HHBD((std::string)"std::string");
std::string HHBE((std::string)"std::string");
std::string HHBF((std::string)"std::string");
std::string HHBG((std::string)"std::string");
std::string HHBH((std::string)"std::string");
std::string HHBI((std::string)"std::string");
std::string HHBJ((std::string)"std::string");
std::string HHCA((std::string)"std::string");
std::string HHCB((std::string)"std::string");
std::string HHCC((std::string)"std::string");
std::string HHCD((std::string)"std::string");
std::string HHCE((std::string)"std::string");
std::string HHCF((std::string)"std::string");
std::string HHCG((std::string)"std::string");
std::string HHCH((std::string)"std::string");
std::string HHCI((std::string)"std::string");
std::string HHCJ((std::string)"std::string");
std::string HHDA((std::string)"std::string");
std::string HHDB((std::string)"std::string");
std::string HHDC((std::string)"std::string");
std::string HHDD((std::string)"std::string");
std::string HHDE((std::string)"std::string");
std::string HHDF((std::string)"std::string");
std::string HHDG((std::string)"std::string");
std::string HHDH((std::string)"std::string");
std::string HHDI((std::string)"std::string");
std::string HHDJ((std::string)"std::string");
std::string HHEA((std::string)"std::string");
std::string HHEB((std::string)"std::string");
std::string HHEC((std::string)"std::string");
std::string HHED((std::string)"std::string");
std::string HHEE((std::string)"std::string");
std::string HHEF((std::string)"std::string");
std::string HHEG((std::string)"std::string");
std::string HHEH((std::string)"std::string");
std::string HHEI((std::string)"std::string");
std::string HHEJ((std::string)"std::string");
std::string HHFA((std::string)"std::string");
std::string HHFB((std::string)"std::string");
std::string HHFC((std::string)"std::string");
std::string HHFD((std::string)"std::string");
std::string HHFE((std::string)"std::string");
std::string HHFF((std::string)"std::string");
std::string HHFG((std::string)"std::string");
std::string HHFH((std::string)"std::string");
std::string HHFI((std::string)"std::string");
std::string HHFJ((std::string)"std::string");
std::string HHGA((std::string)"std::string");
std::string HHGB((std::string)"std::string");
std::string HHGC((std::string)"std::string");
std::string HHGD((std::string)"std::string");
std::string HHGE((std::string)"std::string");
std::string HHGF((std::string)"std::string");
std::string HHGG((std::string)"std::string");
std::string HHGH((std::string)"std::string");
std::string HHGI((std::string)"std::string");
std::string HHGJ((std::string)"std::string");
std::string HHHA((std::string)"std::string");
std::string HHHB((std::string)"std::string");
std::string HHHC((std::string)"std::string");
std::string HHHD((std::string)"std::string");
std::string HHHE((std::string)"std::string");
std::string HHHF((std::string)"std::string");
std::string HHHG((std::string)"std::string");
std::string HHHH((std::string)"std::string");
std::string HHHI((std::string)"std::string");
std::string HHHJ((std::string)"std::string");
std::string HHIA((std::string)"std::string");
std::string HHIB((std::string)"std::string");
std::string HHIC((std::string)"std::string");
std::string HHID((std::string)"std::string");
std::string HHIE((std::string)"std::string");
std::string HHIF((std::string)"std::string");
std::string HHIG((std::string)"std::string");
std::string HHIH((std::string)"std::string");
std::string HHII((std::string)"std::string");
std::string HHIJ((std::string)"std::string");
std::string HHJA((std::string)"std::string");
std::string HHJB((std::string)"std::string");
std::string HHJC((std::string)"std::string");
std::string HHJD((std::string)"std::string");
std::string HHJE((std::string)"std::string");
std::string HHJF((std::string)"std::string");
std::string HHJG((std::string)"std::string");
std::string HHJH((std::string)"std::string");
std::string HHJI((std::string)"std::string");
std::string HHJJ((std::string)"std::string");
std::string HIAA((std::string)"std::string");
std::string HIAB((std::string)"std::string");
std::string HIAC((std::string)"std::string");
std::string HIAD((std::string)"std::string");
std::string HIAE((std::string)"std::string");
std::string HIAF((std::string)"std::string");
std::string HIAG((std::string)"std::string");
std::string HIAH((std::string)"std::string");
std::string HIAI((std::string)"std::string");
std::string HIAJ((std::string)"std::string");
std::string HIBA((std::string)"std::string");
std::string HIBB((std::string)"std::string");
std::string HIBC((std::string)"std::string");
std::string HIBD((std::string)"std::string");
std::string HIBE((std::string)"std::string");
std::string HIBF((std::string)"std::string");
std::string HIBG((std::string)"std::string");
std::string HIBH((std::string)"std::string");
std::string HIBI((std::string)"std::string");
std::string HIBJ((std::string)"std::string");
std::string HICA((std::string)"std::string");
std::string HICB((std::string)"std::string");
std::string HICC((std::string)"std::string");
std::string HICD((std::string)"std::string");
std::string HICE((std::string)"std::string");
std::string HICF((std::string)"std::string");
std::string HICG((std::string)"std::string");
std::string HICH((std::string)"std::string");
std::string HICI((std::string)"std::string");
std::string HICJ((std::string)"std::string");
std::string HIDA((std::string)"std::string");
std::string HIDB((std::string)"std::string");
std::string HIDC((std::string)"std::string");
std::string HIDD((std::string)"std::string");
std::string HIDE((std::string)"std::string");
std::string HIDF((std::string)"std::string");
std::string HIDG((std::string)"std::string");
std::string HIDH((std::string)"std::string");
std::string HIDI((std::string)"std::string");
std::string HIDJ((std::string)"std::string");
std::string HIEA((std::string)"std::string");
std::string HIEB((std::string)"std::string");
std::string HIEC((std::string)"std::string");
std::string HIED((std::string)"std::string");
std::string HIEE((std::string)"std::string");
std::string HIEF((std::string)"std::string");
std::string HIEG((std::string)"std::string");
std::string HIEH((std::string)"std::string");
std::string HIEI((std::string)"std::string");
std::string HIEJ((std::string)"std::string");
std::string HIFA((std::string)"std::string");
std::string HIFB((std::string)"std::string");
std::string HIFC((std::string)"std::string");
std::string HIFD((std::string)"std::string");
std::string HIFE((std::string)"std::string");
std::string HIFF((std::string)"std::string");
std::string HIFG((std::string)"std::string");
std::string HIFH((std::string)"std::string");
std::string HIFI((std::string)"std::string");
std::string HIFJ((std::string)"std::string");
std::string HIGA((std::string)"std::string");
std::string HIGB((std::string)"std::string");
std::string HIGC((std::string)"std::string");
std::string HIGD((std::string)"std::string");
std::string HIGE((std::string)"std::string");
std::string HIGF((std::string)"std::string");
std::string HIGG((std::string)"std::string");
std::string HIGH((std::string)"std::string");
std::string HIGI((std::string)"std::string");
std::string HIGJ((std::string)"std::string");
std::string HIHA((std::string)"std::string");
std::string HIHB((std::string)"std::string");
std::string HIHC((std::string)"std::string");
std::string HIHD((std::string)"std::string");
std::string HIHE((std::string)"std::string");
std::string HIHF((std::string)"std::string");
std::string HIHG((std::string)"std::string");
std::string HIHH((std::string)"std::string");
std::string HIHI((std::string)"std::string");
std::string HIHJ((std::string)"std::string");
std::string HIIA((std::string)"std::string");
std::string HIIB((std::string)"std::string");
std::string HIIC((std::string)"std::string");
std::string HIID((std::string)"std::string");
std::string HIIE((std::string)"std::string");
std::string HIIF((std::string)"std::string");
std::string HIIG((std::string)"std::string");
std::string HIIH((std::string)"std::string");
std::string HIII((std::string)"std::string");
std::string HIIJ((std::string)"std::string");
std::string HIJA((std::string)"std::string");
std::string HIJB((std::string)"std::string");
std::string HIJC((std::string)"std::string");
std::string HIJD((std::string)"std::string");
std::string HIJE((std::string)"std::string");
std::string HIJF((std::string)"std::string");
std::string HIJG((std::string)"std::string");
std::string HIJH((std::string)"std::string");
std::string HIJI((std::string)"std::string");
std::string HIJJ((std::string)"std::string");
std::string HJAA((std::string)"std::string");
std::string HJAB((std::string)"std::string");
std::string HJAC((std::string)"std::string");
std::string HJAD((std::string)"std::string");
std::string HJAE((std::string)"std::string");
std::string HJAF((std::string)"std::string");
std::string HJAG((std::string)"std::string");
std::string HJAH((std::string)"std::string");
std::string HJAI((std::string)"std::string");
std::string HJAJ((std::string)"std::string");
std::string HJBA((std::string)"std::string");
std::string HJBB((std::string)"std::string");
std::string HJBC((std::string)"std::string");
std::string HJBD((std::string)"std::string");
std::string HJBE((std::string)"std::string");
std::string HJBF((std::string)"std::string");
std::string HJBG((std::string)"std::string");
std::string HJBH((std::string)"std::string");
std::string HJBI((std::string)"std::string");
std::string HJBJ((std::string)"std::string");
std::string HJCA((std::string)"std::string");
std::string HJCB((std::string)"std::string");
std::string HJCC((std::string)"std::string");
std::string HJCD((std::string)"std::string");
std::string HJCE((std::string)"std::string");
std::string HJCF((std::string)"std::string");
std::string HJCG((std::string)"std::string");
std::string HJCH((std::string)"std::string");
std::string HJCI((std::string)"std::string");
std::string HJCJ((std::string)"std::string");
std::string HJDA((std::string)"std::string");
std::string HJDB((std::string)"std::string");
std::string HJDC((std::string)"std::string");
std::string HJDD((std::string)"std::string");
std::string HJDE((std::string)"std::string");
std::string HJDF((std::string)"std::string");
std::string HJDG((std::string)"std::string");
std::string HJDH((std::string)"std::string");
std::string HJDI((std::string)"std::string");
std::string HJDJ((std::string)"std::string");
std::string HJEA((std::string)"std::string");
std::string HJEB((std::string)"std::string");
std::string HJEC((std::string)"std::string");
std::string HJED((std::string)"std::string");
std::string HJEE((std::string)"std::string");
std::string HJEF((std::string)"std::string");
std::string HJEG((std::string)"std::string");
std::string HJEH((std::string)"std::string");
std::string HJEI((std::string)"std::string");
std::string HJEJ((std::string)"std::string");
std::string HJFA((std::string)"std::string");
std::string HJFB((std::string)"std::string");
std::string HJFC((std::string)"std::string");
std::string HJFD((std::string)"std::string");
std::string HJFE((std::string)"std::string");
std::string HJFF((std::string)"std::string");
std::string HJFG((std::string)"std::string");
std::string HJFH((std::string)"std::string");
std::string HJFI((std::string)"std::string");
std::string HJFJ((std::string)"std::string");
std::string HJGA((std::string)"std::string");
std::string HJGB((std::string)"std::string");
std::string HJGC((std::string)"std::string");
std::string HJGD((std::string)"std::string");
std::string HJGE((std::string)"std::string");
std::string HJGF((std::string)"std::string");
std::string HJGG((std::string)"std::string");
std::string HJGH((std::string)"std::string");
std::string HJGI((std::string)"std::string");
std::string HJGJ((std::string)"std::string");
std::string HJHA((std::string)"std::string");
std::string HJHB((std::string)"std::string");
std::string HJHC((std::string)"std::string");
std::string HJHD((std::string)"std::string");
std::string HJHE((std::string)"std::string");
std::string HJHF((std::string)"std::string");
std::string HJHG((std::string)"std::string");
std::string HJHH((std::string)"std::string");
std::string HJHI((std::string)"std::string");
std::string HJHJ((std::string)"std::string");
std::string HJIA((std::string)"std::string");
std::string HJIB((std::string)"std::string");
std::string HJIC((std::string)"std::string");
std::string HJID((std::string)"std::string");
std::string HJIE((std::string)"std::string");
std::string HJIF((std::string)"std::string");
std::string HJIG((std::string)"std::string");
std::string HJIH((std::string)"std::string");
std::string HJII((std::string)"std::string");
std::string HJIJ((std::string)"std::string");
std::string HJJA((std::string)"std::string");
std::string HJJB((std::string)"std::string");
std::string HJJC((std::string)"std::string");
std::string HJJD((std::string)"std::string");
std::string HJJE((std::string)"std::string");
std::string HJJF((std::string)"std::string");
std::string HJJG((std::string)"std::string");
std::string HJJH((std::string)"std::string");
std::string HJJI((std::string)"std::string");
std::string HJJJ((std::string)"std::string");
std::string IAAA((std::string)"std::string");
std::string IAAB((std::string)"std::string");
std::string IAAC((std::string)"std::string");
std::string IAAD((std::string)"std::string");
std::string IAAE((std::string)"std::string");
std::string IAAF((std::string)"std::string");
std::string IAAG((std::string)"std::string");
std::string IAAH((std::string)"std::string");
std::string IAAI((std::string)"std::string");
std::string IAAJ((std::string)"std::string");
std::string IABA((std::string)"std::string");
std::string IABB((std::string)"std::string");
std::string IABC((std::string)"std::string");
std::string IABD((std::string)"std::string");
std::string IABE((std::string)"std::string");
std::string IABF((std::string)"std::string");
std::string IABG((std::string)"std::string");
std::string IABH((std::string)"std::string");
std::string IABI((std::string)"std::string");
std::string IABJ((std::string)"std::string");
std::string IACA((std::string)"std::string");
std::string IACB((std::string)"std::string");
std::string IACC((std::string)"std::string");
std::string IACD((std::string)"std::string");
std::string IACE((std::string)"std::string");
std::string IACF((std::string)"std::string");
std::string IACG((std::string)"std::string");
std::string IACH((std::string)"std::string");
std::string IACI((std::string)"std::string");
std::string IACJ((std::string)"std::string");
std::string IADA((std::string)"std::string");
std::string IADB((std::string)"std::string");
std::string IADC((std::string)"std::string");
std::string IADD((std::string)"std::string");
std::string IADE((std::string)"std::string");
std::string IADF((std::string)"std::string");
std::string IADG((std::string)"std::string");
std::string IADH((std::string)"std::string");
std::string IADI((std::string)"std::string");
std::string IADJ((std::string)"std::string");
std::string IAEA((std::string)"std::string");
std::string IAEB((std::string)"std::string");
std::string IAEC((std::string)"std::string");
std::string IAED((std::string)"std::string");
std::string IAEE((std::string)"std::string");
std::string IAEF((std::string)"std::string");
std::string IAEG((std::string)"std::string");
std::string IAEH((std::string)"std::string");
std::string IAEI((std::string)"std::string");
std::string IAEJ((std::string)"std::string");
std::string IAFA((std::string)"std::string");
std::string IAFB((std::string)"std::string");
std::string IAFC((std::string)"std::string");
std::string IAFD((std::string)"std::string");
std::string IAFE((std::string)"std::string");
std::string IAFF((std::string)"std::string");
std::string IAFG((std::string)"std::string");
std::string IAFH((std::string)"std::string");
std::string IAFI((std::string)"std::string");
std::string IAFJ((std::string)"std::string");
std::string IAGA((std::string)"std::string");
std::string IAGB((std::string)"std::string");
std::string IAGC((std::string)"std::string");
std::string IAGD((std::string)"std::string");
std::string IAGE((std::string)"std::string");
std::string IAGF((std::string)"std::string");
std::string IAGG((std::string)"std::string");
std::string IAGH((std::string)"std::string");
std::string IAGI((std::string)"std::string");
std::string IAGJ((std::string)"std::string");
std::string IAHA((std::string)"std::string");
std::string IAHB((std::string)"std::string");
std::string IAHC((std::string)"std::string");
std::string IAHD((std::string)"std::string");
std::string IAHE((std::string)"std::string");
std::string IAHF((std::string)"std::string");
std::string IAHG((std::string)"std::string");
std::string IAHH((std::string)"std::string");
std::string IAHI((std::string)"std::string");
std::string IAHJ((std::string)"std::string");
std::string IAIA((std::string)"std::string");
std::string IAIB((std::string)"std::string");
std::string IAIC((std::string)"std::string");
std::string IAID((std::string)"std::string");
std::string IAIE((std::string)"std::string");
std::string IAIF((std::string)"std::string");
std::string IAIG((std::string)"std::string");
std::string IAIH((std::string)"std::string");
std::string IAII((std::string)"std::string");
std::string IAIJ((std::string)"std::string");
std::string IAJA((std::string)"std::string");
std::string IAJB((std::string)"std::string");
std::string IAJC((std::string)"std::string");
std::string IAJD((std::string)"std::string");
std::string IAJE((std::string)"std::string");
std::string IAJF((std::string)"std::string");
std::string IAJG((std::string)"std::string");
std::string IAJH((std::string)"std::string");
std::string IAJI((std::string)"std::string");
std::string IAJJ((std::string)"std::string");
std::string IBAA((std::string)"std::string");
std::string IBAB((std::string)"std::string");
std::string IBAC((std::string)"std::string");
std::string IBAD((std::string)"std::string");
std::string IBAE((std::string)"std::string");
std::string IBAF((std::string)"std::string");
std::string IBAG((std::string)"std::string");
std::string IBAH((std::string)"std::string");
std::string IBAI((std::string)"std::string");
std::string IBAJ((std::string)"std::string");
std::string IBBA((std::string)"std::string");
std::string IBBB((std::string)"std::string");
std::string IBBC((std::string)"std::string");
std::string IBBD((std::string)"std::string");
std::string IBBE((std::string)"std::string");
std::string IBBF((std::string)"std::string");
std::string IBBG((std::string)"std::string");
std::string IBBH((std::string)"std::string");
std::string IBBI((std::string)"std::string");
std::string IBBJ((std::string)"std::string");
std::string IBCA((std::string)"std::string");
std::string IBCB((std::string)"std::string");
std::string IBCC((std::string)"std::string");
std::string IBCD((std::string)"std::string");
std::string IBCE((std::string)"std::string");
std::string IBCF((std::string)"std::string");
std::string IBCG((std::string)"std::string");
std::string IBCH((std::string)"std::string");
std::string IBCI((std::string)"std::string");
std::string IBCJ((std::string)"std::string");
std::string IBDA((std::string)"std::string");
std::string IBDB((std::string)"std::string");
std::string IBDC((std::string)"std::string");
std::string IBDD((std::string)"std::string");
std::string IBDE((std::string)"std::string");
std::string IBDF((std::string)"std::string");
std::string IBDG((std::string)"std::string");
std::string IBDH((std::string)"std::string");
std::string IBDI((std::string)"std::string");
std::string IBDJ((std::string)"std::string");
std::string IBEA((std::string)"std::string");
std::string IBEB((std::string)"std::string");
std::string IBEC((std::string)"std::string");
std::string IBED((std::string)"std::string");
std::string IBEE((std::string)"std::string");
std::string IBEF((std::string)"std::string");
std::string IBEG((std::string)"std::string");
std::string IBEH((std::string)"std::string");
std::string IBEI((std::string)"std::string");
std::string IBEJ((std::string)"std::string");
std::string IBFA((std::string)"std::string");
std::string IBFB((std::string)"std::string");
std::string IBFC((std::string)"std::string");
std::string IBFD((std::string)"std::string");
std::string IBFE((std::string)"std::string");
std::string IBFF((std::string)"std::string");
std::string IBFG((std::string)"std::string");
std::string IBFH((std::string)"std::string");
std::string IBFI((std::string)"std::string");
std::string IBFJ((std::string)"std::string");
std::string IBGA((std::string)"std::string");
std::string IBGB((std::string)"std::string");
std::string IBGC((std::string)"std::string");
std::string IBGD((std::string)"std::string");
std::string IBGE((std::string)"std::string");
std::string IBGF((std::string)"std::string");
std::string IBGG((std::string)"std::string");
std::string IBGH((std::string)"std::string");
std::string IBGI((std::string)"std::string");
std::string IBGJ((std::string)"std::string");
std::string IBHA((std::string)"std::string");
std::string IBHB((std::string)"std::string");
std::string IBHC((std::string)"std::string");
std::string IBHD((std::string)"std::string");
std::string IBHE((std::string)"std::string");
std::string IBHF((std::string)"std::string");
std::string IBHG((std::string)"std::string");
std::string IBHH((std::string)"std::string");
std::string IBHI((std::string)"std::string");
std::string IBHJ((std::string)"std::string");
std::string IBIA((std::string)"std::string");
std::string IBIB((std::string)"std::string");
std::string IBIC((std::string)"std::string");
std::string IBID((std::string)"std::string");
std::string IBIE((std::string)"std::string");
std::string IBIF((std::string)"std::string");
std::string IBIG((std::string)"std::string");
std::string IBIH((std::string)"std::string");
std::string IBII((std::string)"std::string");
std::string IBIJ((std::string)"std::string");
std::string IBJA((std::string)"std::string");
std::string IBJB((std::string)"std::string");
std::string IBJC((std::string)"std::string");
std::string IBJD((std::string)"std::string");
std::string IBJE((std::string)"std::string");
std::string IBJF((std::string)"std::string");
std::string IBJG((std::string)"std::string");
std::string IBJH((std::string)"std::string");
std::string IBJI((std::string)"std::string");
std::string IBJJ((std::string)"std::string");
std::string ICAA((std::string)"std::string");
std::string ICAB((std::string)"std::string");
std::string ICAC((std::string)"std::string");
std::string ICAD((std::string)"std::string");
std::string ICAE((std::string)"std::string");
std::string ICAF((std::string)"std::string");
std::string ICAG((std::string)"std::string");
std::string ICAH((std::string)"std::string");
std::string ICAI((std::string)"std::string");
std::string ICAJ((std::string)"std::string");
std::string ICBA((std::string)"std::string");
std::string ICBB((std::string)"std::string");
std::string ICBC((std::string)"std::string");
std::string ICBD((std::string)"std::string");
std::string ICBE((std::string)"std::string");
std::string ICBF((std::string)"std::string");
std::string ICBG((std::string)"std::string");
std::string ICBH((std::string)"std::string");
std::string ICBI((std::string)"std::string");
std::string ICBJ((std::string)"std::string");
std::string ICCA((std::string)"std::string");
std::string ICCB((std::string)"std::string");
std::string ICCC((std::string)"std::string");
std::string ICCD((std::string)"std::string");
std::string ICCE((std::string)"std::string");
std::string ICCF((std::string)"std::string");
std::string ICCG((std::string)"std::string");
std::string ICCH((std::string)"std::string");
std::string ICCI((std::string)"std::string");
std::string ICCJ((std::string)"std::string");
std::string ICDA((std::string)"std::string");
std::string ICDB((std::string)"std::string");
std::string ICDC((std::string)"std::string");
std::string ICDD((std::string)"std::string");
std::string ICDE((std::string)"std::string");
std::string ICDF((std::string)"std::string");
std::string ICDG((std::string)"std::string");
std::string ICDH((std::string)"std::string");
std::string ICDI((std::string)"std::string");
std::string ICDJ((std::string)"std::string");
std::string ICEA((std::string)"std::string");
std::string ICEB((std::string)"std::string");
std::string ICEC((std::string)"std::string");
std::string ICED((std::string)"std::string");
std::string ICEE((std::string)"std::string");
std::string ICEF((std::string)"std::string");
std::string ICEG((std::string)"std::string");
std::string ICEH((std::string)"std::string");
std::string ICEI((std::string)"std::string");
std::string ICEJ((std::string)"std::string");
std::string ICFA((std::string)"std::string");
std::string ICFB((std::string)"std::string");
std::string ICFC((std::string)"std::string");
std::string ICFD((std::string)"std::string");
std::string ICFE((std::string)"std::string");
std::string ICFF((std::string)"std::string");
std::string ICFG((std::string)"std::string");
std::string ICFH((std::string)"std::string");
std::string ICFI((std::string)"std::string");
std::string ICFJ((std::string)"std::string");
std::string ICGA((std::string)"std::string");
std::string ICGB((std::string)"std::string");
std::string ICGC((std::string)"std::string");
std::string ICGD((std::string)"std::string");
std::string ICGE((std::string)"std::string");
std::string ICGF((std::string)"std::string");
std::string ICGG((std::string)"std::string");
std::string ICGH((std::string)"std::string");
std::string ICGI((std::string)"std::string");
std::string ICGJ((std::string)"std::string");
std::string ICHA((std::string)"std::string");
std::string ICHB((std::string)"std::string");
std::string ICHC((std::string)"std::string");
std::string ICHD((std::string)"std::string");
std::string ICHE((std::string)"std::string");
std::string ICHF((std::string)"std::string");
std::string ICHG((std::string)"std::string");
std::string ICHH((std::string)"std::string");
std::string ICHI((std::string)"std::string");
std::string ICHJ((std::string)"std::string");
std::string ICIA((std::string)"std::string");
std::string ICIB((std::string)"std::string");
std::string ICIC((std::string)"std::string");
std::string ICID((std::string)"std::string");
std::string ICIE((std::string)"std::string");
std::string ICIF((std::string)"std::string");
std::string ICIG((std::string)"std::string");
std::string ICIH((std::string)"std::string");
std::string ICII((std::string)"std::string");
std::string ICIJ((std::string)"std::string");
std::string ICJA((std::string)"std::string");
std::string ICJB((std::string)"std::string");
std::string ICJC((std::string)"std::string");
std::string ICJD((std::string)"std::string");
std::string ICJE((std::string)"std::string");
std::string ICJF((std::string)"std::string");
std::string ICJG((std::string)"std::string");
std::string ICJH((std::string)"std::string");
std::string ICJI((std::string)"std::string");
std::string ICJJ((std::string)"std::string");
std::string IDAA((std::string)"std::string");
std::string IDAB((std::string)"std::string");
std::string IDAC((std::string)"std::string");
std::string IDAD((std::string)"std::string");
std::string IDAE((std::string)"std::string");
std::string IDAF((std::string)"std::string");
std::string IDAG((std::string)"std::string");
std::string IDAH((std::string)"std::string");
std::string IDAI((std::string)"std::string");
std::string IDAJ((std::string)"std::string");
std::string IDBA((std::string)"std::string");
std::string IDBB((std::string)"std::string");
std::string IDBC((std::string)"std::string");
std::string IDBD((std::string)"std::string");
std::string IDBE((std::string)"std::string");
std::string IDBF((std::string)"std::string");
std::string IDBG((std::string)"std::string");
std::string IDBH((std::string)"std::string");
std::string IDBI((std::string)"std::string");
std::string IDBJ((std::string)"std::string");
std::string IDCA((std::string)"std::string");
std::string IDCB((std::string)"std::string");
std::string IDCC((std::string)"std::string");
std::string IDCD((std::string)"std::string");
std::string IDCE((std::string)"std::string");
std::string IDCF((std::string)"std::string");
std::string IDCG((std::string)"std::string");
std::string IDCH((std::string)"std::string");
std::string IDCI((std::string)"std::string");
std::string IDCJ((std::string)"std::string");
std::string IDDA((std::string)"std::string");
std::string IDDB((std::string)"std::string");
std::string IDDC((std::string)"std::string");
std::string IDDD((std::string)"std::string");
std::string IDDE((std::string)"std::string");
std::string IDDF((std::string)"std::string");
std::string IDDG((std::string)"std::string");
std::string IDDH((std::string)"std::string");
std::string IDDI((std::string)"std::string");
std::string IDDJ((std::string)"std::string");
std::string IDEA((std::string)"std::string");
std::string IDEB((std::string)"std::string");
std::string IDEC((std::string)"std::string");
std::string IDED((std::string)"std::string");
std::string IDEE((std::string)"std::string");
std::string IDEF((std::string)"std::string");
std::string IDEG((std::string)"std::string");
std::string IDEH((std::string)"std::string");
std::string IDEI((std::string)"std::string");
std::string IDEJ((std::string)"std::string");
std::string IDFA((std::string)"std::string");
std::string IDFB((std::string)"std::string");
std::string IDFC((std::string)"std::string");
std::string IDFD((std::string)"std::string");
std::string IDFE((std::string)"std::string");
std::string IDFF((std::string)"std::string");
std::string IDFG((std::string)"std::string");
std::string IDFH((std::string)"std::string");
std::string IDFI((std::string)"std::string");
std::string IDFJ((std::string)"std::string");
std::string IDGA((std::string)"std::string");
std::string IDGB((std::string)"std::string");
std::string IDGC((std::string)"std::string");
std::string IDGD((std::string)"std::string");
std::string IDGE((std::string)"std::string");
std::string IDGF((std::string)"std::string");
std::string IDGG((std::string)"std::string");
std::string IDGH((std::string)"std::string");
std::string IDGI((std::string)"std::string");
std::string IDGJ((std::string)"std::string");
std::string IDHA((std::string)"std::string");
std::string IDHB((std::string)"std::string");
std::string IDHC((std::string)"std::string");
std::string IDHD((std::string)"std::string");
std::string IDHE((std::string)"std::string");
std::string IDHF((std::string)"std::string");
std::string IDHG((std::string)"std::string");
std::string IDHH((std::string)"std::string");
std::string IDHI((std::string)"std::string");
std::string IDHJ((std::string)"std::string");
std::string IDIA((std::string)"std::string");
std::string IDIB((std::string)"std::string");
std::string IDIC((std::string)"std::string");
std::string IDID((std::string)"std::string");
std::string IDIE((std::string)"std::string");
std::string IDIF((std::string)"std::string");
std::string IDIG((std::string)"std::string");
std::string IDIH((std::string)"std::string");
std::string IDII((std::string)"std::string");
std::string IDIJ((std::string)"std::string");
std::string IDJA((std::string)"std::string");
std::string IDJB((std::string)"std::string");
std::string IDJC((std::string)"std::string");
std::string IDJD((std::string)"std::string");
std::string IDJE((std::string)"std::string");
std::string IDJF((std::string)"std::string");
std::string IDJG((std::string)"std::string");
std::string IDJH((std::string)"std::string");
std::string IDJI((std::string)"std::string");
std::string IDJJ((std::string)"std::string");
std::string IEAA((std::string)"std::string");
std::string IEAB((std::string)"std::string");
std::string IEAC((std::string)"std::string");
std::string IEAD((std::string)"std::string");
std::string IEAE((std::string)"std::string");
std::string IEAF((std::string)"std::string");
std::string IEAG((std::string)"std::string");
std::string IEAH((std::string)"std::string");
std::string IEAI((std::string)"std::string");
std::string IEAJ((std::string)"std::string");
std::string IEBA((std::string)"std::string");
std::string IEBB((std::string)"std::string");
std::string IEBC((std::string)"std::string");
std::string IEBD((std::string)"std::string");
std::string IEBE((std::string)"std::string");
std::string IEBF((std::string)"std::string");
std::string IEBG((std::string)"std::string");
std::string IEBH((std::string)"std::string");
std::string IEBI((std::string)"std::string");
std::string IEBJ((std::string)"std::string");
std::string IECA((std::string)"std::string");
std::string IECB((std::string)"std::string");
std::string IECC((std::string)"std::string");
std::string IECD((std::string)"std::string");
std::string IECE((std::string)"std::string");
std::string IECF((std::string)"std::string");
std::string IECG((std::string)"std::string");
std::string IECH((std::string)"std::string");
std::string IECI((std::string)"std::string");
std::string IECJ((std::string)"std::string");
std::string IEDA((std::string)"std::string");
std::string IEDB((std::string)"std::string");
std::string IEDC((std::string)"std::string");
std::string IEDD((std::string)"std::string");
std::string IEDE((std::string)"std::string");
std::string IEDF((std::string)"std::string");
std::string IEDG((std::string)"std::string");
std::string IEDH((std::string)"std::string");
std::string IEDI((std::string)"std::string");
std::string IEDJ((std::string)"std::string");
std::string IEEA((std::string)"std::string");
std::string IEEB((std::string)"std::string");
std::string IEEC((std::string)"std::string");
std::string IEED((std::string)"std::string");
std::string IEEE((std::string)"std::string");
std::string IEEF((std::string)"std::string");
std::string IEEG((std::string)"std::string");
std::string IEEH((std::string)"std::string");
std::string IEEI((std::string)"std::string");
std::string IEEJ((std::string)"std::string");
std::string IEFA((std::string)"std::string");
std::string IEFB((std::string)"std::string");
std::string IEFC((std::string)"std::string");
std::string IEFD((std::string)"std::string");
std::string IEFE((std::string)"std::string");
std::string IEFF((std::string)"std::string");
std::string IEFG((std::string)"std::string");
std::string IEFH((std::string)"std::string");
std::string IEFI((std::string)"std::string");
std::string IEFJ((std::string)"std::string");
std::string IEGA((std::string)"std::string");
std::string IEGB((std::string)"std::string");
std::string IEGC((std::string)"std::string");
std::string IEGD((std::string)"std::string");
std::string IEGE((std::string)"std::string");
std::string IEGF((std::string)"std::string");
std::string IEGG((std::string)"std::string");
std::string IEGH((std::string)"std::string");
std::string IEGI((std::string)"std::string");
std::string IEGJ((std::string)"std::string");
std::string IEHA((std::string)"std::string");
std::string IEHB((std::string)"std::string");
std::string IEHC((std::string)"std::string");
std::string IEHD((std::string)"std::string");
std::string IEHE((std::string)"std::string");
std::string IEHF((std::string)"std::string");
std::string IEHG((std::string)"std::string");
std::string IEHH((std::string)"std::string");
std::string IEHI((std::string)"std::string");
std::string IEHJ((std::string)"std::string");
std::string IEIA((std::string)"std::string");
std::string IEIB((std::string)"std::string");
std::string IEIC((std::string)"std::string");
std::string IEID((std::string)"std::string");
std::string IEIE((std::string)"std::string");
std::string IEIF((std::string)"std::string");
std::string IEIG((std::string)"std::string");
std::string IEIH((std::string)"std::string");
std::string IEII((std::string)"std::string");
std::string IEIJ((std::string)"std::string");
std::string IEJA((std::string)"std::string");
std::string IEJB((std::string)"std::string");
std::string IEJC((std::string)"std::string");
std::string IEJD((std::string)"std::string");
std::string IEJE((std::string)"std::string");
std::string IEJF((std::string)"std::string");
std::string IEJG((std::string)"std::string");
std::string IEJH((std::string)"std::string");
std::string IEJI((std::string)"std::string");
std::string IEJJ((std::string)"std::string");
std::string IFAA((std::string)"std::string");
std::string IFAB((std::string)"std::string");
std::string IFAC((std::string)"std::string");
std::string IFAD((std::string)"std::string");
std::string IFAE((std::string)"std::string");
std::string IFAF((std::string)"std::string");
std::string IFAG((std::string)"std::string");
std::string IFAH((std::string)"std::string");
std::string IFAI((std::string)"std::string");
std::string IFAJ((std::string)"std::string");
std::string IFBA((std::string)"std::string");
std::string IFBB((std::string)"std::string");
std::string IFBC((std::string)"std::string");
std::string IFBD((std::string)"std::string");
std::string IFBE((std::string)"std::string");
std::string IFBF((std::string)"std::string");
std::string IFBG((std::string)"std::string");
std::string IFBH((std::string)"std::string");
std::string IFBI((std::string)"std::string");
std::string IFBJ((std::string)"std::string");
std::string IFCA((std::string)"std::string");
std::string IFCB((std::string)"std::string");
std::string IFCC((std::string)"std::string");
std::string IFCD((std::string)"std::string");
std::string IFCE((std::string)"std::string");
std::string IFCF((std::string)"std::string");
std::string IFCG((std::string)"std::string");
std::string IFCH((std::string)"std::string");
std::string IFCI((std::string)"std::string");
std::string IFCJ((std::string)"std::string");
std::string IFDA((std::string)"std::string");
std::string IFDB((std::string)"std::string");
std::string IFDC((std::string)"std::string");
std::string IFDD((std::string)"std::string");
std::string IFDE((std::string)"std::string");
std::string IFDF((std::string)"std::string");
std::string IFDG((std::string)"std::string");
std::string IFDH((std::string)"std::string");
std::string IFDI((std::string)"std::string");
std::string IFDJ((std::string)"std::string");
std::string IFEA((std::string)"std::string");
std::string IFEB((std::string)"std::string");
std::string IFEC((std::string)"std::string");
std::string IFED((std::string)"std::string");
std::string IFEE((std::string)"std::string");
std::string IFEF((std::string)"std::string");
std::string IFEG((std::string)"std::string");
std::string IFEH((std::string)"std::string");
std::string IFEI((std::string)"std::string");
std::string IFEJ((std::string)"std::string");
std::string IFFA((std::string)"std::string");
std::string IFFB((std::string)"std::string");
std::string IFFC((std::string)"std::string");
std::string IFFD((std::string)"std::string");
std::string IFFE((std::string)"std::string");
std::string IFFF((std::string)"std::string");
std::string IFFG((std::string)"std::string");
std::string IFFH((std::string)"std::string");
std::string IFFI((std::string)"std::string");
std::string IFFJ((std::string)"std::string");
std::string IFGA((std::string)"std::string");
std::string IFGB((std::string)"std::string");
std::string IFGC((std::string)"std::string");
std::string IFGD((std::string)"std::string");
std::string IFGE((std::string)"std::string");
std::string IFGF((std::string)"std::string");
std::string IFGG((std::string)"std::string");
std::string IFGH((std::string)"std::string");
std::string IFGI((std::string)"std::string");
std::string IFGJ((std::string)"std::string");
std::string IFHA((std::string)"std::string");
std::string IFHB((std::string)"std::string");
std::string IFHC((std::string)"std::string");
std::string IFHD((std::string)"std::string");
std::string IFHE((std::string)"std::string");
std::string IFHF((std::string)"std::string");
std::string IFHG((std::string)"std::string");
std::string IFHH((std::string)"std::string");
std::string IFHI((std::string)"std::string");
std::string IFHJ((std::string)"std::string");
std::string IFIA((std::string)"std::string");
std::string IFIB((std::string)"std::string");
std::string IFIC((std::string)"std::string");
std::string IFID((std::string)"std::string");
std::string IFIE((std::string)"std::string");
std::string IFIF((std::string)"std::string");
std::string IFIG((std::string)"std::string");
std::string IFIH((std::string)"std::string");
std::string IFII((std::string)"std::string");
std::string IFIJ((std::string)"std::string");
std::string IFJA((std::string)"std::string");
std::string IFJB((std::string)"std::string");
std::string IFJC((std::string)"std::string");
std::string IFJD((std::string)"std::string");
std::string IFJE((std::string)"std::string");
std::string IFJF((std::string)"std::string");
std::string IFJG((std::string)"std::string");
std::string IFJH((std::string)"std::string");
std::string IFJI((std::string)"std::string");
std::string IFJJ((std::string)"std::string");
std::string IGAA((std::string)"std::string");
std::string IGAB((std::string)"std::string");
std::string IGAC((std::string)"std::string");
std::string IGAD((std::string)"std::string");
std::string IGAE((std::string)"std::string");
std::string IGAF((std::string)"std::string");
std::string IGAG((std::string)"std::string");
std::string IGAH((std::string)"std::string");
std::string IGAI((std::string)"std::string");
std::string IGAJ((std::string)"std::string");
std::string IGBA((std::string)"std::string");
std::string IGBB((std::string)"std::string");
std::string IGBC((std::string)"std::string");
std::string IGBD((std::string)"std::string");
std::string IGBE((std::string)"std::string");
std::string IGBF((std::string)"std::string");
std::string IGBG((std::string)"std::string");
std::string IGBH((std::string)"std::string");
std::string IGBI((std::string)"std::string");
std::string IGBJ((std::string)"std::string");
std::string IGCA((std::string)"std::string");
std::string IGCB((std::string)"std::string");
std::string IGCC((std::string)"std::string");
std::string IGCD((std::string)"std::string");
std::string IGCE((std::string)"std::string");
std::string IGCF((std::string)"std::string");
std::string IGCG((std::string)"std::string");
std::string IGCH((std::string)"std::string");
std::string IGCI((std::string)"std::string");
std::string IGCJ((std::string)"std::string");
std::string IGDA((std::string)"std::string");
std::string IGDB((std::string)"std::string");
std::string IGDC((std::string)"std::string");
std::string IGDD((std::string)"std::string");
std::string IGDE((std::string)"std::string");
std::string IGDF((std::string)"std::string");
std::string IGDG((std::string)"std::string");
std::string IGDH((std::string)"std::string");
std::string IGDI((std::string)"std::string");
std::string IGDJ((std::string)"std::string");
std::string IGEA((std::string)"std::string");
std::string IGEB((std::string)"std::string");
std::string IGEC((std::string)"std::string");
std::string IGED((std::string)"std::string");
std::string IGEE((std::string)"std::string");
std::string IGEF((std::string)"std::string");
std::string IGEG((std::string)"std::string");
std::string IGEH((std::string)"std::string");
std::string IGEI((std::string)"std::string");
std::string IGEJ((std::string)"std::string");
std::string IGFA((std::string)"std::string");
std::string IGFB((std::string)"std::string");
std::string IGFC((std::string)"std::string");
std::string IGFD((std::string)"std::string");
std::string IGFE((std::string)"std::string");
std::string IGFF((std::string)"std::string");
std::string IGFG((std::string)"std::string");
std::string IGFH((std::string)"std::string");
std::string IGFI((std::string)"std::string");
std::string IGFJ((std::string)"std::string");
std::string IGGA((std::string)"std::string");
std::string IGGB((std::string)"std::string");
std::string IGGC((std::string)"std::string");
std::string IGGD((std::string)"std::string");
std::string IGGE((std::string)"std::string");
std::string IGGF((std::string)"std::string");
std::string IGGG((std::string)"std::string");
std::string IGGH((std::string)"std::string");
std::string IGGI((std::string)"std::string");
std::string IGGJ((std::string)"std::string");
std::string IGHA((std::string)"std::string");
std::string IGHB((std::string)"std::string");
std::string IGHC((std::string)"std::string");
std::string IGHD((std::string)"std::string");
std::string IGHE((std::string)"std::string");
std::string IGHF((std::string)"std::string");
std::string IGHG((std::string)"std::string");
std::string IGHH((std::string)"std::string");
std::string IGHI((std::string)"std::string");
std::string IGHJ((std::string)"std::string");
std::string IGIA((std::string)"std::string");
std::string IGIB((std::string)"std::string");
std::string IGIC((std::string)"std::string");
std::string IGID((std::string)"std::string");
std::string IGIE((std::string)"std::string");
std::string IGIF((std::string)"std::string");
std::string IGIG((std::string)"std::string");
std::string IGIH((std::string)"std::string");
std::string IGII((std::string)"std::string");
std::string IGIJ((std::string)"std::string");
std::string IGJA((std::string)"std::string");
std::string IGJB((std::string)"std::string");
std::string IGJC((std::string)"std::string");
std::string IGJD((std::string)"std::string");
std::string IGJE((std::string)"std::string");
std::string IGJF((std::string)"std::string");
std::string IGJG((std::string)"std::string");
std::string IGJH((std::string)"std::string");
std::string IGJI((std::string)"std::string");
std::string IGJJ((std::string)"std::string");
std::string IHAA((std::string)"std::string");
std::string IHAB((std::string)"std::string");
std::string IHAC((std::string)"std::string");
std::string IHAD((std::string)"std::string");
std::string IHAE((std::string)"std::string");
std::string IHAF((std::string)"std::string");
std::string IHAG((std::string)"std::string");
std::string IHAH((std::string)"std::string");
std::string IHAI((std::string)"std::string");
std::string IHAJ((std::string)"std::string");
std::string IHBA((std::string)"std::string");
std::string IHBB((std::string)"std::string");
std::string IHBC((std::string)"std::string");
std::string IHBD((std::string)"std::string");
std::string IHBE((std::string)"std::string");
std::string IHBF((std::string)"std::string");
std::string IHBG((std::string)"std::string");
std::string IHBH((std::string)"std::string");
std::string IHBI((std::string)"std::string");
std::string IHBJ((std::string)"std::string");
std::string IHCA((std::string)"std::string");
std::string IHCB((std::string)"std::string");
std::string IHCC((std::string)"std::string");
std::string IHCD((std::string)"std::string");
std::string IHCE((std::string)"std::string");
std::string IHCF((std::string)"std::string");
std::string IHCG((std::string)"std::string");
std::string IHCH((std::string)"std::string");
std::string IHCI((std::string)"std::string");
std::string IHCJ((std::string)"std::string");
std::string IHDA((std::string)"std::string");
std::string IHDB((std::string)"std::string");
std::string IHDC((std::string)"std::string");
std::string IHDD((std::string)"std::string");
std::string IHDE((std::string)"std::string");
std::string IHDF((std::string)"std::string");
std::string IHDG((std::string)"std::string");
std::string IHDH((std::string)"std::string");
std::string IHDI((std::string)"std::string");
std::string IHDJ((std::string)"std::string");
std::string IHEA((std::string)"std::string");
std::string IHEB((std::string)"std::string");
std::string IHEC((std::string)"std::string");
std::string IHED((std::string)"std::string");
std::string IHEE((std::string)"std::string");
std::string IHEF((std::string)"std::string");
std::string IHEG((std::string)"std::string");
std::string IHEH((std::string)"std::string");
std::string IHEI((std::string)"std::string");
std::string IHEJ((std::string)"std::string");
std::string IHFA((std::string)"std::string");
std::string IHFB((std::string)"std::string");
std::string IHFC((std::string)"std::string");
std::string IHFD((std::string)"std::string");
std::string IHFE((std::string)"std::string");
std::string IHFF((std::string)"std::string");
std::string IHFG((std::string)"std::string");
std::string IHFH((std::string)"std::string");
std::string IHFI((std::string)"std::string");
std::string IHFJ((std::string)"std::string");
std::string IHGA((std::string)"std::string");
std::string IHGB((std::string)"std::string");
std::string IHGC((std::string)"std::string");
std::string IHGD((std::string)"std::string");
std::string IHGE((std::string)"std::string");
std::string IHGF((std::string)"std::string");
std::string IHGG((std::string)"std::string");
std::string IHGH((std::string)"std::string");
std::string IHGI((std::string)"std::string");
std::string IHGJ((std::string)"std::string");
std::string IHHA((std::string)"std::string");
std::string IHHB((std::string)"std::string");
std::string IHHC((std::string)"std::string");
std::string IHHD((std::string)"std::string");
std::string IHHE((std::string)"std::string");
std::string IHHF((std::string)"std::string");
std::string IHHG((std::string)"std::string");
std::string IHHH((std::string)"std::string");
std::string IHHI((std::string)"std::string");
std::string IHHJ((std::string)"std::string");
std::string IHIA((std::string)"std::string");
std::string IHIB((std::string)"std::string");
std::string IHIC((std::string)"std::string");
std::string IHID((std::string)"std::string");
std::string IHIE((std::string)"std::string");
std::string IHIF((std::string)"std::string");
std::string IHIG((std::string)"std::string");
std::string IHIH((std::string)"std::string");
std::string IHII((std::string)"std::string");
std::string IHIJ((std::string)"std::string");
std::string IHJA((std::string)"std::string");
std::string IHJB((std::string)"std::string");
std::string IHJC((std::string)"std::string");
std::string IHJD((std::string)"std::string");
std::string IHJE((std::string)"std::string");
std::string IHJF((std::string)"std::string");
std::string IHJG((std::string)"std::string");
std::string IHJH((std::string)"std::string");
std::string IHJI((std::string)"std::string");
std::string IHJJ((std::string)"std::string");
std::string IIAA((std::string)"std::string");
std::string IIAB((std::string)"std::string");
std::string IIAC((std::string)"std::string");
std::string IIAD((std::string)"std::string");
std::string IIAE((std::string)"std::string");
std::string IIAF((std::string)"std::string");
std::string IIAG((std::string)"std::string");
std::string IIAH((std::string)"std::string");
std::string IIAI((std::string)"std::string");
std::string IIAJ((std::string)"std::string");
std::string IIBA((std::string)"std::string");
std::string IIBB((std::string)"std::string");
std::string IIBC((std::string)"std::string");
std::string IIBD((std::string)"std::string");
std::string IIBE((std::string)"std::string");
std::string IIBF((std::string)"std::string");
std::string IIBG((std::string)"std::string");
std::string IIBH((std::string)"std::string");
std::string IIBI((std::string)"std::string");
std::string IIBJ((std::string)"std::string");
std::string IICA((std::string)"std::string");
std::string IICB((std::string)"std::string");
std::string IICC((std::string)"std::string");
std::string IICD((std::string)"std::string");
std::string IICE((std::string)"std::string");
std::string IICF((std::string)"std::string");
std::string IICG((std::string)"std::string");
std::string IICH((std::string)"std::string");
std::string IICI((std::string)"std::string");
std::string IICJ((std::string)"std::string");
std::string IIDA((std::string)"std::string");
std::string IIDB((std::string)"std::string");
std::string IIDC((std::string)"std::string");
std::string IIDD((std::string)"std::string");
std::string IIDE((std::string)"std::string");
std::string IIDF((std::string)"std::string");
std::string IIDG((std::string)"std::string");
std::string IIDH((std::string)"std::string");
std::string IIDI((std::string)"std::string");
std::string IIDJ((std::string)"std::string");
std::string IIEA((std::string)"std::string");
std::string IIEB((std::string)"std::string");
std::string IIEC((std::string)"std::string");
std::string IIED((std::string)"std::string");
std::string IIEE((std::string)"std::string");
std::string IIEF((std::string)"std::string");
std::string IIEG((std::string)"std::string");
std::string IIEH((std::string)"std::string");
std::string IIEI((std::string)"std::string");
std::string IIEJ((std::string)"std::string");
std::string IIFA((std::string)"std::string");
std::string IIFB((std::string)"std::string");
std::string IIFC((std::string)"std::string");
std::string IIFD((std::string)"std::string");
std::string IIFE((std::string)"std::string");
std::string IIFF((std::string)"std::string");
std::string IIFG((std::string)"std::string");
std::string IIFH((std::string)"std::string");
std::string IIFI((std::string)"std::string");
std::string IIFJ((std::string)"std::string");
std::string IIGA((std::string)"std::string");
std::string IIGB((std::string)"std::string");
std::string IIGC((std::string)"std::string");
std::string IIGD((std::string)"std::string");
std::string IIGE((std::string)"std::string");
std::string IIGF((std::string)"std::string");
std::string IIGG((std::string)"std::string");
std::string IIGH((std::string)"std::string");
std::string IIGI((std::string)"std::string");
std::string IIGJ((std::string)"std::string");
std::string IIHA((std::string)"std::string");
std::string IIHB((std::string)"std::string");
std::string IIHC((std::string)"std::string");
std::string IIHD((std::string)"std::string");
std::string IIHE((std::string)"std::string");
std::string IIHF((std::string)"std::string");
std::string IIHG((std::string)"std::string");
std::string IIHH((std::string)"std::string");
std::string IIHI((std::string)"std::string");
std::string IIHJ((std::string)"std::string");
std::string IIIA((std::string)"std::string");
std::string IIIB((std::string)"std::string");
std::string IIIC((std::string)"std::string");
std::string IIID((std::string)"std::string");
std::string IIIE((std::string)"std::string");
std::string IIIF((std::string)"std::string");
std::string IIIG((std::string)"std::string");
std::string IIIH((std::string)"std::string");
std::string IIII((std::string)"std::string");
std::string IIIJ((std::string)"std::string");
std::string IIJA((std::string)"std::string");
std::string IIJB((std::string)"std::string");
std::string IIJC((std::string)"std::string");
std::string IIJD((std::string)"std::string");
std::string IIJE((std::string)"std::string");
std::string IIJF((std::string)"std::string");
std::string IIJG((std::string)"std::string");
std::string IIJH((std::string)"std::string");
std::string IIJI((std::string)"std::string");
std::string IIJJ((std::string)"std::string");
std::string IJAA((std::string)"std::string");
std::string IJAB((std::string)"std::string");
std::string IJAC((std::string)"std::string");
std::string IJAD((std::string)"std::string");
std::string IJAE((std::string)"std::string");
std::string IJAF((std::string)"std::string");
std::string IJAG((std::string)"std::string");
std::string IJAH((std::string)"std::string");
std::string IJAI((std::string)"std::string");
std::string IJAJ((std::string)"std::string");
std::string IJBA((std::string)"std::string");
std::string IJBB((std::string)"std::string");
std::string IJBC((std::string)"std::string");
std::string IJBD((std::string)"std::string");
std::string IJBE((std::string)"std::string");
std::string IJBF((std::string)"std::string");
std::string IJBG((std::string)"std::string");
std::string IJBH((std::string)"std::string");
std::string IJBI((std::string)"std::string");
std::string IJBJ((std::string)"std::string");
std::string IJCA((std::string)"std::string");
std::string IJCB((std::string)"std::string");
std::string IJCC((std::string)"std::string");
std::string IJCD((std::string)"std::string");
std::string IJCE((std::string)"std::string");
std::string IJCF((std::string)"std::string");
std::string IJCG((std::string)"std::string");
std::string IJCH((std::string)"std::string");
std::string IJCI((std::string)"std::string");
std::string IJCJ((std::string)"std::string");
std::string IJDA((std::string)"std::string");
std::string IJDB((std::string)"std::string");
std::string IJDC((std::string)"std::string");
std::string IJDD((std::string)"std::string");
std::string IJDE((std::string)"std::string");
std::string IJDF((std::string)"std::string");
std::string IJDG((std::string)"std::string");
std::string IJDH((std::string)"std::string");
std::string IJDI((std::string)"std::string");
std::string IJDJ((std::string)"std::string");
std::string IJEA((std::string)"std::string");
std::string IJEB((std::string)"std::string");
std::string IJEC((std::string)"std::string");
std::string IJED((std::string)"std::string");
std::string IJEE((std::string)"std::string");
std::string IJEF((std::string)"std::string");
std::string IJEG((std::string)"std::string");
std::string IJEH((std::string)"std::string");
std::string IJEI((std::string)"std::string");
std::string IJEJ((std::string)"std::string");
std::string IJFA((std::string)"std::string");
std::string IJFB((std::string)"std::string");
std::string IJFC((std::string)"std::string");
std::string IJFD((std::string)"std::string");
std::string IJFE((std::string)"std::string");
std::string IJFF((std::string)"std::string");
std::string IJFG((std::string)"std::string");
std::string IJFH((std::string)"std::string");
std::string IJFI((std::string)"std::string");
std::string IJFJ((std::string)"std::string");
std::string IJGA((std::string)"std::string");
std::string IJGB((std::string)"std::string");
std::string IJGC((std::string)"std::string");
std::string IJGD((std::string)"std::string");
std::string IJGE((std::string)"std::string");
std::string IJGF((std::string)"std::string");
std::string IJGG((std::string)"std::string");
std::string IJGH((std::string)"std::string");
std::string IJGI((std::string)"std::string");
std::string IJGJ((std::string)"std::string");
std::string IJHA((std::string)"std::string");
std::string IJHB((std::string)"std::string");
std::string IJHC((std::string)"std::string");
std::string IJHD((std::string)"std::string");
std::string IJHE((std::string)"std::string");
std::string IJHF((std::string)"std::string");
std::string IJHG((std::string)"std::string");
std::string IJHH((std::string)"std::string");
std::string IJHI((std::string)"std::string");
std::string IJHJ((std::string)"std::string");
std::string IJIA((std::string)"std::string");
std::string IJIB((std::string)"std::string");
std::string IJIC((std::string)"std::string");
std::string IJID((std::string)"std::string");
std::string IJIE((std::string)"std::string");
std::string IJIF((std::string)"std::string");
std::string IJIG((std::string)"std::string");
std::string IJIH((std::string)"std::string");
std::string IJII((std::string)"std::string");
std::string IJIJ((std::string)"std::string");
std::string IJJA((std::string)"std::string");
std::string IJJB((std::string)"std::string");
std::string IJJC((std::string)"std::string");
std::string IJJD((std::string)"std::string");
std::string IJJE((std::string)"std::string");
std::string IJJF((std::string)"std::string");
std::string IJJG((std::string)"std::string");
std::string IJJH((std::string)"std::string");
std::string IJJI((std::string)"std::string");
std::string IJJJ((std::string)"std::string");
std::string JAAA((std::string)"std::string");
std::string JAAB((std::string)"std::string");
std::string JAAC((std::string)"std::string");
std::string JAAD((std::string)"std::string");
std::string JAAE((std::string)"std::string");
std::string JAAF((std::string)"std::string");
std::string JAAG((std::string)"std::string");
std::string JAAH((std::string)"std::string");
std::string JAAI((std::string)"std::string");
std::string JAAJ((std::string)"std::string");
std::string JABA((std::string)"std::string");
std::string JABB((std::string)"std::string");
std::string JABC((std::string)"std::string");
std::string JABD((std::string)"std::string");
std::string JABE((std::string)"std::string");
std::string JABF((std::string)"std::string");
std::string JABG((std::string)"std::string");
std::string JABH((std::string)"std::string");
std::string JABI((std::string)"std::string");
std::string JABJ((std::string)"std::string");
std::string JACA((std::string)"std::string");
std::string JACB((std::string)"std::string");
std::string JACC((std::string)"std::string");
std::string JACD((std::string)"std::string");
std::string JACE((std::string)"std::string");
std::string JACF((std::string)"std::string");
std::string JACG((std::string)"std::string");
std::string JACH((std::string)"std::string");
std::string JACI((std::string)"std::string");
std::string JACJ((std::string)"std::string");
std::string JADA((std::string)"std::string");
std::string JADB((std::string)"std::string");
std::string JADC((std::string)"std::string");
std::string JADD((std::string)"std::string");
std::string JADE((std::string)"std::string");
std::string JADF((std::string)"std::string");
std::string JADG((std::string)"std::string");
std::string JADH((std::string)"std::string");
std::string JADI((std::string)"std::string");
std::string JADJ((std::string)"std::string");
std::string JAEA((std::string)"std::string");
std::string JAEB((std::string)"std::string");
std::string JAEC((std::string)"std::string");
std::string JAED((std::string)"std::string");
std::string JAEE((std::string)"std::string");
std::string JAEF((std::string)"std::string");
std::string JAEG((std::string)"std::string");
std::string JAEH((std::string)"std::string");
std::string JAEI((std::string)"std::string");
std::string JAEJ((std::string)"std::string");
std::string JAFA((std::string)"std::string");
std::string JAFB((std::string)"std::string");
std::string JAFC((std::string)"std::string");
std::string JAFD((std::string)"std::string");
std::string JAFE((std::string)"std::string");
std::string JAFF((std::string)"std::string");
std::string JAFG((std::string)"std::string");
std::string JAFH((std::string)"std::string");
std::string JAFI((std::string)"std::string");
std::string JAFJ((std::string)"std::string");
std::string JAGA((std::string)"std::string");
std::string JAGB((std::string)"std::string");
std::string JAGC((std::string)"std::string");
std::string JAGD((std::string)"std::string");
std::string JAGE((std::string)"std::string");
std::string JAGF((std::string)"std::string");
std::string JAGG((std::string)"std::string");
std::string JAGH((std::string)"std::string");
std::string JAGI((std::string)"std::string");
std::string JAGJ((std::string)"std::string");
std::string JAHA((std::string)"std::string");
std::string JAHB((std::string)"std::string");
std::string JAHC((std::string)"std::string");
std::string JAHD((std::string)"std::string");
std::string JAHE((std::string)"std::string");
std::string JAHF((std::string)"std::string");
std::string JAHG((std::string)"std::string");
std::string JAHH((std::string)"std::string");
std::string JAHI((std::string)"std::string");
std::string JAHJ((std::string)"std::string");
std::string JAIA((std::string)"std::string");
std::string JAIB((std::string)"std::string");
std::string JAIC((std::string)"std::string");
std::string JAID((std::string)"std::string");
std::string JAIE((std::string)"std::string");
std::string JAIF((std::string)"std::string");
std::string JAIG((std::string)"std::string");
std::string JAIH((std::string)"std::string");
std::string JAII((std::string)"std::string");
std::string JAIJ((std::string)"std::string");
std::string JAJA((std::string)"std::string");
std::string JAJB((std::string)"std::string");
std::string JAJC((std::string)"std::string");
std::string JAJD((std::string)"std::string");
std::string JAJE((std::string)"std::string");
std::string JAJF((std::string)"std::string");
std::string JAJG((std::string)"std::string");
std::string JAJH((std::string)"std::string");
std::string JAJI((std::string)"std::string");
std::string JAJJ((std::string)"std::string");
std::string JBAA((std::string)"std::string");
std::string JBAB((std::string)"std::string");
std::string JBAC((std::string)"std::string");
std::string JBAD((std::string)"std::string");
std::string JBAE((std::string)"std::string");
std::string JBAF((std::string)"std::string");
std::string JBAG((std::string)"std::string");
std::string JBAH((std::string)"std::string");
std::string JBAI((std::string)"std::string");
std::string JBAJ((std::string)"std::string");
std::string JBBA((std::string)"std::string");
std::string JBBB((std::string)"std::string");
std::string JBBC((std::string)"std::string");
std::string JBBD((std::string)"std::string");
std::string JBBE((std::string)"std::string");
std::string JBBF((std::string)"std::string");
std::string JBBG((std::string)"std::string");
std::string JBBH((std::string)"std::string");
std::string JBBI((std::string)"std::string");
std::string JBBJ((std::string)"std::string");
std::string JBCA((std::string)"std::string");
std::string JBCB((std::string)"std::string");
std::string JBCC((std::string)"std::string");
std::string JBCD((std::string)"std::string");
std::string JBCE((std::string)"std::string");
std::string JBCF((std::string)"std::string");
std::string JBCG((std::string)"std::string");
std::string JBCH((std::string)"std::string");
std::string JBCI((std::string)"std::string");
std::string JBCJ((std::string)"std::string");
std::string JBDA((std::string)"std::string");
std::string JBDB((std::string)"std::string");
std::string JBDC((std::string)"std::string");
std::string JBDD((std::string)"std::string");
std::string JBDE((std::string)"std::string");
std::string JBDF((std::string)"std::string");
std::string JBDG((std::string)"std::string");
std::string JBDH((std::string)"std::string");
std::string JBDI((std::string)"std::string");
std::string JBDJ((std::string)"std::string");
std::string JBEA((std::string)"std::string");
std::string JBEB((std::string)"std::string");
std::string JBEC((std::string)"std::string");
std::string JBED((std::string)"std::string");
std::string JBEE((std::string)"std::string");
std::string JBEF((std::string)"std::string");
std::string JBEG((std::string)"std::string");
std::string JBEH((std::string)"std::string");
std::string JBEI((std::string)"std::string");
std::string JBEJ((std::string)"std::string");
std::string JBFA((std::string)"std::string");
std::string JBFB((std::string)"std::string");
std::string JBFC((std::string)"std::string");
std::string JBFD((std::string)"std::string");
std::string JBFE((std::string)"std::string");
std::string JBFF((std::string)"std::string");
std::string JBFG((std::string)"std::string");
std::string JBFH((std::string)"std::string");
std::string JBFI((std::string)"std::string");
std::string JBFJ((std::string)"std::string");
std::string JBGA((std::string)"std::string");
std::string JBGB((std::string)"std::string");
std::string JBGC((std::string)"std::string");
std::string JBGD((std::string)"std::string");
std::string JBGE((std::string)"std::string");
std::string JBGF((std::string)"std::string");
std::string JBGG((std::string)"std::string");
std::string JBGH((std::string)"std::string");
std::string JBGI((std::string)"std::string");
std::string JBGJ((std::string)"std::string");
std::string JBHA((std::string)"std::string");
std::string JBHB((std::string)"std::string");
std::string JBHC((std::string)"std::string");
std::string JBHD((std::string)"std::string");
std::string JBHE((std::string)"std::string");
std::string JBHF((std::string)"std::string");
std::string JBHG((std::string)"std::string");
std::string JBHH((std::string)"std::string");
std::string JBHI((std::string)"std::string");
std::string JBHJ((std::string)"std::string");
std::string JBIA((std::string)"std::string");
std::string JBIB((std::string)"std::string");
std::string JBIC((std::string)"std::string");
std::string JBID((std::string)"std::string");
std::string JBIE((std::string)"std::string");
std::string JBIF((std::string)"std::string");
std::string JBIG((std::string)"std::string");
std::string JBIH((std::string)"std::string");
std::string JBII((std::string)"std::string");
std::string JBIJ((std::string)"std::string");
std::string JBJA((std::string)"std::string");
std::string JBJB((std::string)"std::string");
std::string JBJC((std::string)"std::string");
std::string JBJD((std::string)"std::string");
std::string JBJE((std::string)"std::string");
std::string JBJF((std::string)"std::string");
std::string JBJG((std::string)"std::string");
std::string JBJH((std::string)"std::string");
std::string JBJI((std::string)"std::string");
std::string JBJJ((std::string)"std::string");
std::string JCAA((std::string)"std::string");
std::string JCAB((std::string)"std::string");
std::string JCAC((std::string)"std::string");
std::string JCAD((std::string)"std::string");
std::string JCAE((std::string)"std::string");
std::string JCAF((std::string)"std::string");
std::string JCAG((std::string)"std::string");
std::string JCAH((std::string)"std::string");
std::string JCAI((std::string)"std::string");
std::string JCAJ((std::string)"std::string");
std::string JCBA((std::string)"std::string");
std::string JCBB((std::string)"std::string");
std::string JCBC((std::string)"std::string");
std::string JCBD((std::string)"std::string");
std::string JCBE((std::string)"std::string");
std::string JCBF((std::string)"std::string");
std::string JCBG((std::string)"std::string");
std::string JCBH((std::string)"std::string");
std::string JCBI((std::string)"std::string");
std::string JCBJ((std::string)"std::string");
std::string JCCA((std::string)"std::string");
std::string JCCB((std::string)"std::string");
std::string JCCC((std::string)"std::string");
std::string JCCD((std::string)"std::string");
std::string JCCE((std::string)"std::string");
std::string JCCF((std::string)"std::string");
std::string JCCG((std::string)"std::string");
std::string JCCH((std::string)"std::string");
std::string JCCI((std::string)"std::string");
std::string JCCJ((std::string)"std::string");
std::string JCDA((std::string)"std::string");
std::string JCDB((std::string)"std::string");
std::string JCDC((std::string)"std::string");
std::string JCDD((std::string)"std::string");
std::string JCDE((std::string)"std::string");
std::string JCDF((std::string)"std::string");
std::string JCDG((std::string)"std::string");
std::string JCDH((std::string)"std::string");
std::string JCDI((std::string)"std::string");
std::string JCDJ((std::string)"std::string");
std::string JCEA((std::string)"std::string");
std::string JCEB((std::string)"std::string");
std::string JCEC((std::string)"std::string");
std::string JCED((std::string)"std::string");
std::string JCEE((std::string)"std::string");
std::string JCEF((std::string)"std::string");
std::string JCEG((std::string)"std::string");
std::string JCEH((std::string)"std::string");
std::string JCEI((std::string)"std::string");
std::string JCEJ((std::string)"std::string");
std::string JCFA((std::string)"std::string");
std::string JCFB((std::string)"std::string");
std::string JCFC((std::string)"std::string");
std::string JCFD((std::string)"std::string");
std::string JCFE((std::string)"std::string");
std::string JCFF((std::string)"std::string");
std::string JCFG((std::string)"std::string");
std::string JCFH((std::string)"std::string");
std::string JCFI((std::string)"std::string");
std::string JCFJ((std::string)"std::string");
std::string JCGA((std::string)"std::string");
std::string JCGB((std::string)"std::string");
std::string JCGC((std::string)"std::string");
std::string JCGD((std::string)"std::string");
std::string JCGE((std::string)"std::string");
std::string JCGF((std::string)"std::string");
std::string JCGG((std::string)"std::string");
std::string JCGH((std::string)"std::string");
std::string JCGI((std::string)"std::string");
std::string JCGJ((std::string)"std::string");
std::string JCHA((std::string)"std::string");
std::string JCHB((std::string)"std::string");
std::string JCHC((std::string)"std::string");
std::string JCHD((std::string)"std::string");
std::string JCHE((std::string)"std::string");
std::string JCHF((std::string)"std::string");
std::string JCHG((std::string)"std::string");
std::string JCHH((std::string)"std::string");
std::string JCHI((std::string)"std::string");
std::string JCHJ((std::string)"std::string");
std::string JCIA((std::string)"std::string");
std::string JCIB((std::string)"std::string");
std::string JCIC((std::string)"std::string");
std::string JCID((std::string)"std::string");
std::string JCIE((std::string)"std::string");
std::string JCIF((std::string)"std::string");
std::string JCIG((std::string)"std::string");
std::string JCIH((std::string)"std::string");
std::string JCII((std::string)"std::string");
std::string JCIJ((std::string)"std::string");
std::string JCJA((std::string)"std::string");
std::string JCJB((std::string)"std::string");
std::string JCJC((std::string)"std::string");
std::string JCJD((std::string)"std::string");
std::string JCJE((std::string)"std::string");
std::string JCJF((std::string)"std::string");
std::string JCJG((std::string)"std::string");
std::string JCJH((std::string)"std::string");
std::string JCJI((std::string)"std::string");
std::string JCJJ((std::string)"std::string");
std::string JDAA((std::string)"std::string");
std::string JDAB((std::string)"std::string");
std::string JDAC((std::string)"std::string");
std::string JDAD((std::string)"std::string");
std::string JDAE((std::string)"std::string");
std::string JDAF((std::string)"std::string");
std::string JDAG((std::string)"std::string");
std::string JDAH((std::string)"std::string");
std::string JDAI((std::string)"std::string");
std::string JDAJ((std::string)"std::string");
std::string JDBA((std::string)"std::string");
std::string JDBB((std::string)"std::string");
std::string JDBC((std::string)"std::string");
std::string JDBD((std::string)"std::string");
std::string JDBE((std::string)"std::string");
std::string JDBF((std::string)"std::string");
std::string JDBG((std::string)"std::string");
std::string JDBH((std::string)"std::string");
std::string JDBI((std::string)"std::string");
std::string JDBJ((std::string)"std::string");
std::string JDCA((std::string)"std::string");
std::string JDCB((std::string)"std::string");
std::string JDCC((std::string)"std::string");
std::string JDCD((std::string)"std::string");
std::string JDCE((std::string)"std::string");
std::string JDCF((std::string)"std::string");
std::string JDCG((std::string)"std::string");
std::string JDCH((std::string)"std::string");
std::string JDCI((std::string)"std::string");
std::string JDCJ((std::string)"std::string");
std::string JDDA((std::string)"std::string");
std::string JDDB((std::string)"std::string");
std::string JDDC((std::string)"std::string");
std::string JDDD((std::string)"std::string");
std::string JDDE((std::string)"std::string");
std::string JDDF((std::string)"std::string");
std::string JDDG((std::string)"std::string");
std::string JDDH((std::string)"std::string");
std::string JDDI((std::string)"std::string");
std::string JDDJ((std::string)"std::string");
std::string JDEA((std::string)"std::string");
std::string JDEB((std::string)"std::string");
std::string JDEC((std::string)"std::string");
std::string JDED((std::string)"std::string");
std::string JDEE((std::string)"std::string");
std::string JDEF((std::string)"std::string");
std::string JDEG((std::string)"std::string");
std::string JDEH((std::string)"std::string");
std::string JDEI((std::string)"std::string");
std::string JDEJ((std::string)"std::string");
std::string JDFA((std::string)"std::string");
std::string JDFB((std::string)"std::string");
std::string JDFC((std::string)"std::string");
std::string JDFD((std::string)"std::string");
std::string JDFE((std::string)"std::string");
std::string JDFF((std::string)"std::string");
std::string JDFG((std::string)"std::string");
std::string JDFH((std::string)"std::string");
std::string JDFI((std::string)"std::string");
std::string JDFJ((std::string)"std::string");
std::string JDGA((std::string)"std::string");
std::string JDGB((std::string)"std::string");
std::string JDGC((std::string)"std::string");
std::string JDGD((std::string)"std::string");
std::string JDGE((std::string)"std::string");
std::string JDGF((std::string)"std::string");
std::string JDGG((std::string)"std::string");
std::string JDGH((std::string)"std::string");
std::string JDGI((std::string)"std::string");
std::string JDGJ((std::string)"std::string");
std::string JDHA((std::string)"std::string");
std::string JDHB((std::string)"std::string");
std::string JDHC((std::string)"std::string");
std::string JDHD((std::string)"std::string");
std::string JDHE((std::string)"std::string");
std::string JDHF((std::string)"std::string");
std::string JDHG((std::string)"std::string");
std::string JDHH((std::string)"std::string");
std::string JDHI((std::string)"std::string");
std::string JDHJ((std::string)"std::string");
std::string JDIA((std::string)"std::string");
std::string JDIB((std::string)"std::string");
std::string JDIC((std::string)"std::string");
std::string JDID((std::string)"std::string");
std::string JDIE((std::string)"std::string");
std::string JDIF((std::string)"std::string");
std::string JDIG((std::string)"std::string");
std::string JDIH((std::string)"std::string");
std::string JDII((std::string)"std::string");
std::string JDIJ((std::string)"std::string");
std::string JDJA((std::string)"std::string");
std::string JDJB((std::string)"std::string");
std::string JDJC((std::string)"std::string");
std::string JDJD((std::string)"std::string");
std::string JDJE((std::string)"std::string");
std::string JDJF((std::string)"std::string");
std::string JDJG((std::string)"std::string");
std::string JDJH((std::string)"std::string");
std::string JDJI((std::string)"std::string");
std::string JDJJ((std::string)"std::string");
std::string JEAA((std::string)"std::string");
std::string JEAB((std::string)"std::string");
std::string JEAC((std::string)"std::string");
std::string JEAD((std::string)"std::string");
std::string JEAE((std::string)"std::string");
std::string JEAF((std::string)"std::string");
std::string JEAG((std::string)"std::string");
std::string JEAH((std::string)"std::string");
std::string JEAI((std::string)"std::string");
std::string JEAJ((std::string)"std::string");
std::string JEBA((std::string)"std::string");
std::string JEBB((std::string)"std::string");
std::string JEBC((std::string)"std::string");
std::string JEBD((std::string)"std::string");
std::string JEBE((std::string)"std::string");
std::string JEBF((std::string)"std::string");
std::string JEBG((std::string)"std::string");
std::string JEBH((std::string)"std::string");
std::string JEBI((std::string)"std::string");
std::string JEBJ((std::string)"std::string");
std::string JECA((std::string)"std::string");
std::string JECB((std::string)"std::string");
std::string JECC((std::string)"std::string");
std::string JECD((std::string)"std::string");
std::string JECE((std::string)"std::string");
std::string JECF((std::string)"std::string");
std::string JECG((std::string)"std::string");
std::string JECH((std::string)"std::string");
std::string JECI((std::string)"std::string");
std::string JECJ((std::string)"std::string");
std::string JEDA((std::string)"std::string");
std::string JEDB((std::string)"std::string");
std::string JEDC((std::string)"std::string");
std::string JEDD((std::string)"std::string");
std::string JEDE((std::string)"std::string");
std::string JEDF((std::string)"std::string");
std::string JEDG((std::string)"std::string");
std::string JEDH((std::string)"std::string");
std::string JEDI((std::string)"std::string");
std::string JEDJ((std::string)"std::string");
std::string JEEA((std::string)"std::string");
std::string JEEB((std::string)"std::string");
std::string JEEC((std::string)"std::string");
std::string JEED((std::string)"std::string");
std::string JEEE((std::string)"std::string");
std::string JEEF((std::string)"std::string");
std::string JEEG((std::string)"std::string");
std::string JEEH((std::string)"std::string");
std::string JEEI((std::string)"std::string");
std::string JEEJ((std::string)"std::string");
std::string JEFA((std::string)"std::string");
std::string JEFB((std::string)"std::string");
std::string JEFC((std::string)"std::string");
std::string JEFD((std::string)"std::string");
std::string JEFE((std::string)"std::string");
std::string JEFF((std::string)"std::string");
std::string JEFG((std::string)"std::string");
std::string JEFH((std::string)"std::string");
std::string JEFI((std::string)"std::string");
std::string JEFJ((std::string)"std::string");
std::string JEGA((std::string)"std::string");
std::string JEGB((std::string)"std::string");
std::string JEGC((std::string)"std::string");
std::string JEGD((std::string)"std::string");
std::string JEGE((std::string)"std::string");
std::string JEGF((std::string)"std::string");
std::string JEGG((std::string)"std::string");
std::string JEGH((std::string)"std::string");
std::string JEGI((std::string)"std::string");
std::string JEGJ((std::string)"std::string");
std::string JEHA((std::string)"std::string");
std::string JEHB((std::string)"std::string");
std::string JEHC((std::string)"std::string");
std::string JEHD((std::string)"std::string");
std::string JEHE((std::string)"std::string");
std::string JEHF((std::string)"std::string");
std::string JEHG((std::string)"std::string");
std::string JEHH((std::string)"std::string");
std::string JEHI((std::string)"std::string");
std::string JEHJ((std::string)"std::string");
std::string JEIA((std::string)"std::string");
std::string JEIB((std::string)"std::string");
std::string JEIC((std::string)"std::string");
std::string JEID((std::string)"std::string");
std::string JEIE((std::string)"std::string");
std::string JEIF((std::string)"std::string");
std::string JEIG((std::string)"std::string");
std::string JEIH((std::string)"std::string");
std::string JEII((std::string)"std::string");
std::string JEIJ((std::string)"std::string");
std::string JEJA((std::string)"std::string");
std::string JEJB((std::string)"std::string");
std::string JEJC((std::string)"std::string");
std::string JEJD((std::string)"std::string");
std::string JEJE((std::string)"std::string");
std::string JEJF((std::string)"std::string");
std::string JEJG((std::string)"std::string");
std::string JEJH((std::string)"std::string");
std::string JEJI((std::string)"std::string");
std::string JEJJ((std::string)"std::string");
std::string JFAA((std::string)"std::string");
std::string JFAB((std::string)"std::string");
std::string JFAC((std::string)"std::string");
std::string JFAD((std::string)"std::string");
std::string JFAE((std::string)"std::string");
std::string JFAF((std::string)"std::string");
std::string JFAG((std::string)"std::string");
std::string JFAH((std::string)"std::string");
std::string JFAI((std::string)"std::string");
std::string JFAJ((std::string)"std::string");
std::string JFBA((std::string)"std::string");
std::string JFBB((std::string)"std::string");
std::string JFBC((std::string)"std::string");
std::string JFBD((std::string)"std::string");
std::string JFBE((std::string)"std::string");
std::string JFBF((std::string)"std::string");
std::string JFBG((std::string)"std::string");
std::string JFBH((std::string)"std::string");
std::string JFBI((std::string)"std::string");
std::string JFBJ((std::string)"std::string");
std::string JFCA((std::string)"std::string");
std::string JFCB((std::string)"std::string");
std::string JFCC((std::string)"std::string");
std::string JFCD((std::string)"std::string");
std::string JFCE((std::string)"std::string");
std::string JFCF((std::string)"std::string");
std::string JFCG((std::string)"std::string");
std::string JFCH((std::string)"std::string");
std::string JFCI((std::string)"std::string");
std::string JFCJ((std::string)"std::string");
std::string JFDA((std::string)"std::string");
std::string JFDB((std::string)"std::string");
std::string JFDC((std::string)"std::string");
std::string JFDD((std::string)"std::string");
std::string JFDE((std::string)"std::string");
std::string JFDF((std::string)"std::string");
std::string JFDG((std::string)"std::string");
std::string JFDH((std::string)"std::string");
std::string JFDI((std::string)"std::string");
std::string JFDJ((std::string)"std::string");
std::string JFEA((std::string)"std::string");
std::string JFEB((std::string)"std::string");
std::string JFEC((std::string)"std::string");
std::string JFED((std::string)"std::string");
std::string JFEE((std::string)"std::string");
std::string JFEF((std::string)"std::string");
std::string JFEG((std::string)"std::string");
std::string JFEH((std::string)"std::string");
std::string JFEI((std::string)"std::string");
std::string JFEJ((std::string)"std::string");
std::string JFFA((std::string)"std::string");
std::string JFFB((std::string)"std::string");
std::string JFFC((std::string)"std::string");
std::string JFFD((std::string)"std::string");
std::string JFFE((std::string)"std::string");
std::string JFFF((std::string)"std::string");
std::string JFFG((std::string)"std::string");
std::string JFFH((std::string)"std::string");
std::string JFFI((std::string)"std::string");
std::string JFFJ((std::string)"std::string");
std::string JFGA((std::string)"std::string");
std::string JFGB((std::string)"std::string");
std::string JFGC((std::string)"std::string");
std::string JFGD((std::string)"std::string");
std::string JFGE((std::string)"std::string");
std::string JFGF((std::string)"std::string");
std::string JFGG((std::string)"std::string");
std::string JFGH((std::string)"std::string");
std::string JFGI((std::string)"std::string");
std::string JFGJ((std::string)"std::string");
std::string JFHA((std::string)"std::string");
std::string JFHB((std::string)"std::string");
std::string JFHC((std::string)"std::string");
std::string JFHD((std::string)"std::string");
std::string JFHE((std::string)"std::string");
std::string JFHF((std::string)"std::string");
std::string JFHG((std::string)"std::string");
std::string JFHH((std::string)"std::string");
std::string JFHI((std::string)"std::string");
std::string JFHJ((std::string)"std::string");
std::string JFIA((std::string)"std::string");
std::string JFIB((std::string)"std::string");
std::string JFIC((std::string)"std::string");
std::string JFID((std::string)"std::string");
std::string JFIE((std::string)"std::string");
std::string JFIF((std::string)"std::string");
std::string JFIG((std::string)"std::string");
std::string JFIH((std::string)"std::string");
std::string JFII((std::string)"std::string");
std::string JFIJ((std::string)"std::string");
std::string JFJA((std::string)"std::string");
std::string JFJB((std::string)"std::string");
std::string JFJC((std::string)"std::string");
std::string JFJD((std::string)"std::string");
std::string JFJE((std::string)"std::string");
std::string JFJF((std::string)"std::string");
std::string JFJG((std::string)"std::string");
std::string JFJH((std::string)"std::string");
std::string JFJI((std::string)"std::string");
std::string JFJJ((std::string)"std::string");
std::string JGAA((std::string)"std::string");
std::string JGAB((std::string)"std::string");
std::string JGAC((std::string)"std::string");
std::string JGAD((std::string)"std::string");
std::string JGAE((std::string)"std::string");
std::string JGAF((std::string)"std::string");
std::string JGAG((std::string)"std::string");
std::string JGAH((std::string)"std::string");
std::string JGAI((std::string)"std::string");
std::string JGAJ((std::string)"std::string");
std::string JGBA((std::string)"std::string");
std::string JGBB((std::string)"std::string");
std::string JGBC((std::string)"std::string");
std::string JGBD((std::string)"std::string");
std::string JGBE((std::string)"std::string");
std::string JGBF((std::string)"std::string");
std::string JGBG((std::string)"std::string");
std::string JGBH((std::string)"std::string");
std::string JGBI((std::string)"std::string");
std::string JGBJ((std::string)"std::string");
std::string JGCA((std::string)"std::string");
std::string JGCB((std::string)"std::string");
std::string JGCC((std::string)"std::string");
std::string JGCD((std::string)"std::string");
std::string JGCE((std::string)"std::string");
std::string JGCF((std::string)"std::string");
std::string JGCG((std::string)"std::string");
std::string JGCH((std::string)"std::string");
std::string JGCI((std::string)"std::string");
std::string JGCJ((std::string)"std::string");
std::string JGDA((std::string)"std::string");
std::string JGDB((std::string)"std::string");
std::string JGDC((std::string)"std::string");
std::string JGDD((std::string)"std::string");
std::string JGDE((std::string)"std::string");
std::string JGDF((std::string)"std::string");
std::string JGDG((std::string)"std::string");
std::string JGDH((std::string)"std::string");
std::string JGDI((std::string)"std::string");
std::string JGDJ((std::string)"std::string");
std::string JGEA((std::string)"std::string");
std::string JGEB((std::string)"std::string");
std::string JGEC((std::string)"std::string");
std::string JGED((std::string)"std::string");
std::string JGEE((std::string)"std::string");
std::string JGEF((std::string)"std::string");
std::string JGEG((std::string)"std::string");
std::string JGEH((std::string)"std::string");
std::string JGEI((std::string)"std::string");
std::string JGEJ((std::string)"std::string");
std::string JGFA((std::string)"std::string");
std::string JGFB((std::string)"std::string");
std::string JGFC((std::string)"std::string");
std::string JGFD((std::string)"std::string");
std::string JGFE((std::string)"std::string");
std::string JGFF((std::string)"std::string");
std::string JGFG((std::string)"std::string");
std::string JGFH((std::string)"std::string");
std::string JGFI((std::string)"std::string");
std::string JGFJ((std::string)"std::string");
std::string JGGA((std::string)"std::string");
std::string JGGB((std::string)"std::string");
std::string JGGC((std::string)"std::string");
std::string JGGD((std::string)"std::string");
std::string JGGE((std::string)"std::string");
std::string JGGF((std::string)"std::string");
std::string JGGG((std::string)"std::string");
std::string JGGH((std::string)"std::string");
std::string JGGI((std::string)"std::string");
std::string JGGJ((std::string)"std::string");
std::string JGHA((std::string)"std::string");
std::string JGHB((std::string)"std::string");
std::string JGHC((std::string)"std::string");
std::string JGHD((std::string)"std::string");
std::string JGHE((std::string)"std::string");
std::string JGHF((std::string)"std::string");
std::string JGHG((std::string)"std::string");
std::string JGHH((std::string)"std::string");
std::string JGHI((std::string)"std::string");
std::string JGHJ((std::string)"std::string");
std::string JGIA((std::string)"std::string");
std::string JGIB((std::string)"std::string");
std::string JGIC((std::string)"std::string");
std::string JGID((std::string)"std::string");
std::string JGIE((std::string)"std::string");
std::string JGIF((std::string)"std::string");
std::string JGIG((std::string)"std::string");
std::string JGIH((std::string)"std::string");
std::string JGII((std::string)"std::string");
std::string JGIJ((std::string)"std::string");
std::string JGJA((std::string)"std::string");
std::string JGJB((std::string)"std::string");
std::string JGJC((std::string)"std::string");
std::string JGJD((std::string)"std::string");
std::string JGJE((std::string)"std::string");
std::string JGJF((std::string)"std::string");
std::string JGJG((std::string)"std::string");
std::string JGJH((std::string)"std::string");
std::string JGJI((std::string)"std::string");
std::string JGJJ((std::string)"std::string");
std::string JHAA((std::string)"std::string");
std::string JHAB((std::string)"std::string");
std::string JHAC((std::string)"std::string");
std::string JHAD((std::string)"std::string");
std::string JHAE((std::string)"std::string");
std::string JHAF((std::string)"std::string");
std::string JHAG((std::string)"std::string");
std::string JHAH((std::string)"std::string");
std::string JHAI((std::string)"std::string");
std::string JHAJ((std::string)"std::string");
std::string JHBA((std::string)"std::string");
std::string JHBB((std::string)"std::string");
std::string JHBC((std::string)"std::string");
std::string JHBD((std::string)"std::string");
std::string JHBE((std::string)"std::string");
std::string JHBF((std::string)"std::string");
std::string JHBG((std::string)"std::string");
std::string JHBH((std::string)"std::string");
std::string JHBI((std::string)"std::string");
std::string JHBJ((std::string)"std::string");
std::string JHCA((std::string)"std::string");
std::string JHCB((std::string)"std::string");
std::string JHCC((std::string)"std::string");
std::string JHCD((std::string)"std::string");
std::string JHCE((std::string)"std::string");
std::string JHCF((std::string)"std::string");
std::string JHCG((std::string)"std::string");
std::string JHCH((std::string)"std::string");
std::string JHCI((std::string)"std::string");
std::string JHCJ((std::string)"std::string");
std::string JHDA((std::string)"std::string");
std::string JHDB((std::string)"std::string");
std::string JHDC((std::string)"std::string");
std::string JHDD((std::string)"std::string");
std::string JHDE((std::string)"std::string");
std::string JHDF((std::string)"std::string");
std::string JHDG((std::string)"std::string");
std::string JHDH((std::string)"std::string");
std::string JHDI((std::string)"std::string");
std::string JHDJ((std::string)"std::string");
std::string JHEA((std::string)"std::string");
std::string JHEB((std::string)"std::string");
std::string JHEC((std::string)"std::string");
std::string JHED((std::string)"std::string");
std::string JHEE((std::string)"std::string");
std::string JHEF((std::string)"std::string");
std::string JHEG((std::string)"std::string");
std::string JHEH((std::string)"std::string");
std::string JHEI((std::string)"std::string");
std::string JHEJ((std::string)"std::string");
std::string JHFA((std::string)"std::string");
std::string JHFB((std::string)"std::string");
std::string JHFC((std::string)"std::string");
std::string JHFD((std::string)"std::string");
std::string JHFE((std::string)"std::string");
std::string JHFF((std::string)"std::string");
std::string JHFG((std::string)"std::string");
std::string JHFH((std::string)"std::string");
std::string JHFI((std::string)"std::string");
std::string JHFJ((std::string)"std::string");
std::string JHGA((std::string)"std::string");
std::string JHGB((std::string)"std::string");
std::string JHGC((std::string)"std::string");
std::string JHGD((std::string)"std::string");
std::string JHGE((std::string)"std::string");
std::string JHGF((std::string)"std::string");
std::string JHGG((std::string)"std::string");
std::string JHGH((std::string)"std::string");
std::string JHGI((std::string)"std::string");
std::string JHGJ((std::string)"std::string");
std::string JHHA((std::string)"std::string");
std::string JHHB((std::string)"std::string");
std::string JHHC((std::string)"std::string");
std::string JHHD((std::string)"std::string");
std::string JHHE((std::string)"std::string");
std::string JHHF((std::string)"std::string");
std::string JHHG((std::string)"std::string");
std::string JHHH((std::string)"std::string");
std::string JHHI((std::string)"std::string");
std::string JHHJ((std::string)"std::string");
std::string JHIA((std::string)"std::string");
std::string JHIB((std::string)"std::string");
std::string JHIC((std::string)"std::string");
std::string JHID((std::string)"std::string");
std::string JHIE((std::string)"std::string");
std::string JHIF((std::string)"std::string");
std::string JHIG((std::string)"std::string");
std::string JHIH((std::string)"std::string");
std::string JHII((std::string)"std::string");
std::string JHIJ((std::string)"std::string");
std::string JHJA((std::string)"std::string");
std::string JHJB((std::string)"std::string");
std::string JHJC((std::string)"std::string");
std::string JHJD((std::string)"std::string");
std::string JHJE((std::string)"std::string");
std::string JHJF((std::string)"std::string");
std::string JHJG((std::string)"std::string");
std::string JHJH((std::string)"std::string");
std::string JHJI((std::string)"std::string");
std::string JHJJ((std::string)"std::string");
std::string JIAA((std::string)"std::string");
std::string JIAB((std::string)"std::string");
std::string JIAC((std::string)"std::string");
std::string JIAD((std::string)"std::string");
std::string JIAE((std::string)"std::string");
std::string JIAF((std::string)"std::string");
std::string JIAG((std::string)"std::string");
std::string JIAH((std::string)"std::string");
std::string JIAI((std::string)"std::string");
std::string JIAJ((std::string)"std::string");
std::string JIBA((std::string)"std::string");
std::string JIBB((std::string)"std::string");
std::string JIBC((std::string)"std::string");
std::string JIBD((std::string)"std::string");
std::string JIBE((std::string)"std::string");
std::string JIBF((std::string)"std::string");
std::string JIBG((std::string)"std::string");
std::string JIBH((std::string)"std::string");
std::string JIBI((std::string)"std::string");
std::string JIBJ((std::string)"std::string");
std::string JICA((std::string)"std::string");
std::string JICB((std::string)"std::string");
std::string JICC((std::string)"std::string");
std::string JICD((std::string)"std::string");
std::string JICE((std::string)"std::string");
std::string JICF((std::string)"std::string");
std::string JICG((std::string)"std::string");
std::string JICH((std::string)"std::string");
std::string JICI((std::string)"std::string");
std::string JICJ((std::string)"std::string");
std::string JIDA((std::string)"std::string");
std::string JIDB((std::string)"std::string");
std::string JIDC((std::string)"std::string");
std::string JIDD((std::string)"std::string");
std::string JIDE((std::string)"std::string");
std::string JIDF((std::string)"std::string");
std::string JIDG((std::string)"std::string");
std::string JIDH((std::string)"std::string");
std::string JIDI((std::string)"std::string");
std::string JIDJ((std::string)"std::string");
std::string JIEA((std::string)"std::string");
std::string JIEB((std::string)"std::string");
std::string JIEC((std::string)"std::string");
std::string JIED((std::string)"std::string");
std::string JIEE((std::string)"std::string");
std::string JIEF((std::string)"std::string");
std::string JIEG((std::string)"std::string");
std::string JIEH((std::string)"std::string");
std::string JIEI((std::string)"std::string");
std::string JIEJ((std::string)"std::string");
std::string JIFA((std::string)"std::string");
std::string JIFB((std::string)"std::string");
std::string JIFC((std::string)"std::string");
std::string JIFD((std::string)"std::string");
std::string JIFE((std::string)"std::string");
std::string JIFF((std::string)"std::string");
std::string JIFG((std::string)"std::string");
std::string JIFH((std::string)"std::string");
std::string JIFI((std::string)"std::string");
std::string JIFJ((std::string)"std::string");
std::string JIGA((std::string)"std::string");
std::string JIGB((std::string)"std::string");
std::string JIGC((std::string)"std::string");
std::string JIGD((std::string)"std::string");
std::string JIGE((std::string)"std::string");
std::string JIGF((std::string)"std::string");
std::string JIGG((std::string)"std::string");
std::string JIGH((std::string)"std::string");
std::string JIGI((std::string)"std::string");
std::string JIGJ((std::string)"std::string");
std::string JIHA((std::string)"std::string");
std::string JIHB((std::string)"std::string");
std::string JIHC((std::string)"std::string");
std::string JIHD((std::string)"std::string");
std::string JIHE((std::string)"std::string");
std::string JIHF((std::string)"std::string");
std::string JIHG((std::string)"std::string");
std::string JIHH((std::string)"std::string");
std::string JIHI((std::string)"std::string");
std::string JIHJ((std::string)"std::string");
std::string JIIA((std::string)"std::string");
std::string JIIB((std::string)"std::string");
std::string JIIC((std::string)"std::string");
std::string JIID((std::string)"std::string");
std::string JIIE((std::string)"std::string");
std::string JIIF((std::string)"std::string");
std::string JIIG((std::string)"std::string");
std::string JIIH((std::string)"std::string");
std::string JIII((std::string)"std::string");
std::string JIIJ((std::string)"std::string");
std::string JIJA((std::string)"std::string");
std::string JIJB((std::string)"std::string");
std::string JIJC((std::string)"std::string");
std::string JIJD((std::string)"std::string");
std::string JIJE((std::string)"std::string");
std::string JIJF((std::string)"std::string");
std::string JIJG((std::string)"std::string");
std::string JIJH((std::string)"std::string");
std::string JIJI((std::string)"std::string");
std::string JIJJ((std::string)"std::string");
std::string JJAA((std::string)"std::string");
std::string JJAB((std::string)"std::string");
std::string JJAC((std::string)"std::string");
std::string JJAD((std::string)"std::string");
std::string JJAE((std::string)"std::string");
std::string JJAF((std::string)"std::string");
std::string JJAG((std::string)"std::string");
std::string JJAH((std::string)"std::string");
std::string JJAI((std::string)"std::string");
std::string JJAJ((std::string)"std::string");
std::string JJBA((std::string)"std::string");
std::string JJBB((std::string)"std::string");
std::string JJBC((std::string)"std::string");
std::string JJBD((std::string)"std::string");
std::string JJBE((std::string)"std::string");
std::string JJBF((std::string)"std::string");
std::string JJBG((std::string)"std::string");
std::string JJBH((std::string)"std::string");
std::string JJBI((std::string)"std::string");
std::string JJBJ((std::string)"std::string");
std::string JJCA((std::string)"std::string");
std::string JJCB((std::string)"std::string");
std::string JJCC((std::string)"std::string");
std::string JJCD((std::string)"std::string");
std::string JJCE((std::string)"std::string");
std::string JJCF((std::string)"std::string");
std::string JJCG((std::string)"std::string");
std::string JJCH((std::string)"std::string");
std::string JJCI((std::string)"std::string");
std::string JJCJ((std::string)"std::string");
std::string JJDA((std::string)"std::string");
std::string JJDB((std::string)"std::string");
std::string JJDC((std::string)"std::string");
std::string JJDD((std::string)"std::string");
std::string JJDE((std::string)"std::string");
std::string JJDF((std::string)"std::string");
std::string JJDG((std::string)"std::string");
std::string JJDH((std::string)"std::string");
std::string JJDI((std::string)"std::string");
std::string JJDJ((std::string)"std::string");
std::string JJEA((std::string)"std::string");
std::string JJEB((std::string)"std::string");
std::string JJEC((std::string)"std::string");
std::string JJED((std::string)"std::string");
std::string JJEE((std::string)"std::string");
std::string JJEF((std::string)"std::string");
std::string JJEG((std::string)"std::string");
std::string JJEH((std::string)"std::string");
std::string JJEI((std::string)"std::string");
std::string JJEJ((std::string)"std::string");
std::string JJFA((std::string)"std::string");
std::string JJFB((std::string)"std::string");
std::string JJFC((std::string)"std::string");
std::string JJFD((std::string)"std::string");
std::string JJFE((std::string)"std::string");
std::string JJFF((std::string)"std::string");
std::string JJFG((std::string)"std::string");
std::string JJFH((std::string)"std::string");
std::string JJFI((std::string)"std::string");
std::string JJFJ((std::string)"std::string");
std::string JJGA((std::string)"std::string");
std::string JJGB((std::string)"std::string");
std::string JJGC((std::string)"std::string");
std::string JJGD((std::string)"std::string");
std::string JJGE((std::string)"std::string");
std::string JJGF((std::string)"std::string");
std::string JJGG((std::string)"std::string");
std::string JJGH((std::string)"std::string");
std::string JJGI((std::string)"std::string");
std::string JJGJ((std::string)"std::string");
std::string JJHA((std::string)"std::string");
std::string JJHB((std::string)"std::string");
std::string JJHC((std::string)"std::string");
std::string JJHD((std::string)"std::string");
std::string JJHE((std::string)"std::string");
std::string JJHF((std::string)"std::string");
std::string JJHG((std::string)"std::string");
std::string JJHH((std::string)"std::string");
std::string JJHI((std::string)"std::string");
std::string JJHJ((std::string)"std::string");
std::string JJIA((std::string)"std::string");
std::string JJIB((std::string)"std::string");
std::string JJIC((std::string)"std::string");
std::string JJID((std::string)"std::string");
std::string JJIE((std::string)"std::string");
std::string JJIF((std::string)"std::string");
std::string JJIG((std::string)"std::string");
std::string JJIH((std::string)"std::string");
std::string JJII((std::string)"std::string");
std::string JJIJ((std::string)"std::string");
std::string JJJA((std::string)"std::string");
std::string JJJB((std::string)"std::string");
std::string JJJC((std::string)"std::string");
std::string JJJD((std::string)"std::string");
std::string JJJE((std::string)"std::string");
std::string JJJF((std::string)"std::string");
std::string JJJG((std::string)"std::string");
std::string JJJH((std::string)"std::string");
std::string JJJI((std::string)"std::string");
std::string JJJJ((std::string)"std::string");
}