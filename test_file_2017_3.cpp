#include <type_traits>

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
A(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
B(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
C(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
D(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
E(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
F(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
G(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
H(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
I(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
J(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
II(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
III(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BCJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
BJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CCJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
CJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DCJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
DJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ECJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
EJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FCJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
FJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GCJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
GJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HCJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
HJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
ICJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
IJJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JABJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JACJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JADJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JAJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JBJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JCJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JDJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JECJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JEJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JFJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JGJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JHJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JICJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JIJJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJAJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJBJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJCJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJDJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJED(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJEJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJFJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJGJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJHJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJID(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJII(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJIJ(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJA(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJB(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJC(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJD(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJE(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJF(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJG(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJH(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJI(T a, T b, T c)
{
    return a + b + c;
}

template <typename T>
typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, T>::type
JJJJ(T a, T b, T c)
{
    return a + b + c;
}

int main(){
A<int>(1,2,3);
B<int>(1,2,3);
C<int>(1,2,3);
D<int>(1,2,3);
E<int>(1,2,3);
F<int>(1,2,3);
G<int>(1,2,3);
H<int>(1,2,3);
I<int>(1,2,3);
J<int>(1,2,3);
BA<int>(1,2,3);
BB<int>(1,2,3);
BC<int>(1,2,3);
BD<int>(1,2,3);
BE<int>(1,2,3);
BF<int>(1,2,3);
BG<int>(1,2,3);
BH<int>(1,2,3);
BI<int>(1,2,3);
BJ<int>(1,2,3);
CA<int>(1,2,3);
CB<int>(1,2,3);
CC<int>(1,2,3);
CD<int>(1,2,3);
CE<int>(1,2,3);
CF<int>(1,2,3);
CG<int>(1,2,3);
CH<int>(1,2,3);
CI<int>(1,2,3);
CJ<int>(1,2,3);
DA<int>(1,2,3);
DB<int>(1,2,3);
DC<int>(1,2,3);
DD<int>(1,2,3);
DE<int>(1,2,3);
DF<int>(1,2,3);
DG<int>(1,2,3);
DH<int>(1,2,3);
DI<int>(1,2,3);
DJ<int>(1,2,3);
EA<int>(1,2,3);
EB<int>(1,2,3);
EC<int>(1,2,3);
ED<int>(1,2,3);
EE<int>(1,2,3);
EF<int>(1,2,3);
EG<int>(1,2,3);
EH<int>(1,2,3);
EI<int>(1,2,3);
EJ<int>(1,2,3);
FA<int>(1,2,3);
FB<int>(1,2,3);
FC<int>(1,2,3);
FD<int>(1,2,3);
FE<int>(1,2,3);
FF<int>(1,2,3);
FG<int>(1,2,3);
FH<int>(1,2,3);
FI<int>(1,2,3);
FJ<int>(1,2,3);
GA<int>(1,2,3);
GB<int>(1,2,3);
GC<int>(1,2,3);
GD<int>(1,2,3);
GE<int>(1,2,3);
GF<int>(1,2,3);
GG<int>(1,2,3);
GH<int>(1,2,3);
GI<int>(1,2,3);
GJ<int>(1,2,3);
HA<int>(1,2,3);
HB<int>(1,2,3);
HC<int>(1,2,3);
HD<int>(1,2,3);
HE<int>(1,2,3);
HF<int>(1,2,3);
HG<int>(1,2,3);
HH<int>(1,2,3);
HI<int>(1,2,3);
HJ<int>(1,2,3);
IA<int>(1,2,3);
IB<int>(1,2,3);
IC<int>(1,2,3);
ID<int>(1,2,3);
IE<int>(1,2,3);
IF<int>(1,2,3);
IG<int>(1,2,3);
IH<int>(1,2,3);
II<int>(1,2,3);
IJ<int>(1,2,3);
JA<int>(1,2,3);
JB<int>(1,2,3);
JC<int>(1,2,3);
JD<int>(1,2,3);
JE<int>(1,2,3);
JF<int>(1,2,3);
JG<int>(1,2,3);
JH<int>(1,2,3);
JI<int>(1,2,3);
JJ<int>(1,2,3);
BAA<int>(1,2,3);
BAB<int>(1,2,3);
BAC<int>(1,2,3);
BAD<int>(1,2,3);
BAE<int>(1,2,3);
BAF<int>(1,2,3);
BAG<int>(1,2,3);
BAH<int>(1,2,3);
BAI<int>(1,2,3);
BAJ<int>(1,2,3);
BBA<int>(1,2,3);
BBB<int>(1,2,3);
BBC<int>(1,2,3);
BBD<int>(1,2,3);
BBE<int>(1,2,3);
BBF<int>(1,2,3);
BBG<int>(1,2,3);
BBH<int>(1,2,3);
BBI<int>(1,2,3);
BBJ<int>(1,2,3);
BCA<int>(1,2,3);
BCB<int>(1,2,3);
BCC<int>(1,2,3);
BCD<int>(1,2,3);
BCE<int>(1,2,3);
BCF<int>(1,2,3);
BCG<int>(1,2,3);
BCH<int>(1,2,3);
BCI<int>(1,2,3);
BCJ<int>(1,2,3);
BDA<int>(1,2,3);
BDB<int>(1,2,3);
BDC<int>(1,2,3);
BDD<int>(1,2,3);
BDE<int>(1,2,3);
BDF<int>(1,2,3);
BDG<int>(1,2,3);
BDH<int>(1,2,3);
BDI<int>(1,2,3);
BDJ<int>(1,2,3);
BEA<int>(1,2,3);
BEB<int>(1,2,3);
BEC<int>(1,2,3);
BED<int>(1,2,3);
BEE<int>(1,2,3);
BEF<int>(1,2,3);
BEG<int>(1,2,3);
BEH<int>(1,2,3);
BEI<int>(1,2,3);
BEJ<int>(1,2,3);
BFA<int>(1,2,3);
BFB<int>(1,2,3);
BFC<int>(1,2,3);
BFD<int>(1,2,3);
BFE<int>(1,2,3);
BFF<int>(1,2,3);
BFG<int>(1,2,3);
BFH<int>(1,2,3);
BFI<int>(1,2,3);
BFJ<int>(1,2,3);
BGA<int>(1,2,3);
BGB<int>(1,2,3);
BGC<int>(1,2,3);
BGD<int>(1,2,3);
BGE<int>(1,2,3);
BGF<int>(1,2,3);
BGG<int>(1,2,3);
BGH<int>(1,2,3);
BGI<int>(1,2,3);
BGJ<int>(1,2,3);
BHA<int>(1,2,3);
BHB<int>(1,2,3);
BHC<int>(1,2,3);
BHD<int>(1,2,3);
BHE<int>(1,2,3);
BHF<int>(1,2,3);
BHG<int>(1,2,3);
BHH<int>(1,2,3);
BHI<int>(1,2,3);
BHJ<int>(1,2,3);
BIA<int>(1,2,3);
BIB<int>(1,2,3);
BIC<int>(1,2,3);
BID<int>(1,2,3);
BIE<int>(1,2,3);
BIF<int>(1,2,3);
BIG<int>(1,2,3);
BIH<int>(1,2,3);
BII<int>(1,2,3);
BIJ<int>(1,2,3);
BJA<int>(1,2,3);
BJB<int>(1,2,3);
BJC<int>(1,2,3);
BJD<int>(1,2,3);
BJE<int>(1,2,3);
BJF<int>(1,2,3);
BJG<int>(1,2,3);
BJH<int>(1,2,3);
BJI<int>(1,2,3);
BJJ<int>(1,2,3);
CAA<int>(1,2,3);
CAB<int>(1,2,3);
CAC<int>(1,2,3);
CAD<int>(1,2,3);
CAE<int>(1,2,3);
CAF<int>(1,2,3);
CAG<int>(1,2,3);
CAH<int>(1,2,3);
CAI<int>(1,2,3);
CAJ<int>(1,2,3);
CBA<int>(1,2,3);
CBB<int>(1,2,3);
CBC<int>(1,2,3);
CBD<int>(1,2,3);
CBE<int>(1,2,3);
CBF<int>(1,2,3);
CBG<int>(1,2,3);
CBH<int>(1,2,3);
CBI<int>(1,2,3);
CBJ<int>(1,2,3);
CCA<int>(1,2,3);
CCB<int>(1,2,3);
CCC<int>(1,2,3);
CCD<int>(1,2,3);
CCE<int>(1,2,3);
CCF<int>(1,2,3);
CCG<int>(1,2,3);
CCH<int>(1,2,3);
CCI<int>(1,2,3);
CCJ<int>(1,2,3);
CDA<int>(1,2,3);
CDB<int>(1,2,3);
CDC<int>(1,2,3);
CDD<int>(1,2,3);
CDE<int>(1,2,3);
CDF<int>(1,2,3);
CDG<int>(1,2,3);
CDH<int>(1,2,3);
CDI<int>(1,2,3);
CDJ<int>(1,2,3);
CEA<int>(1,2,3);
CEB<int>(1,2,3);
CEC<int>(1,2,3);
CED<int>(1,2,3);
CEE<int>(1,2,3);
CEF<int>(1,2,3);
CEG<int>(1,2,3);
CEH<int>(1,2,3);
CEI<int>(1,2,3);
CEJ<int>(1,2,3);
CFA<int>(1,2,3);
CFB<int>(1,2,3);
CFC<int>(1,2,3);
CFD<int>(1,2,3);
CFE<int>(1,2,3);
CFF<int>(1,2,3);
CFG<int>(1,2,3);
CFH<int>(1,2,3);
CFI<int>(1,2,3);
CFJ<int>(1,2,3);
CGA<int>(1,2,3);
CGB<int>(1,2,3);
CGC<int>(1,2,3);
CGD<int>(1,2,3);
CGE<int>(1,2,3);
CGF<int>(1,2,3);
CGG<int>(1,2,3);
CGH<int>(1,2,3);
CGI<int>(1,2,3);
CGJ<int>(1,2,3);
CHA<int>(1,2,3);
CHB<int>(1,2,3);
CHC<int>(1,2,3);
CHD<int>(1,2,3);
CHE<int>(1,2,3);
CHF<int>(1,2,3);
CHG<int>(1,2,3);
CHH<int>(1,2,3);
CHI<int>(1,2,3);
CHJ<int>(1,2,3);
CIA<int>(1,2,3);
CIB<int>(1,2,3);
CIC<int>(1,2,3);
CID<int>(1,2,3);
CIE<int>(1,2,3);
CIF<int>(1,2,3);
CIG<int>(1,2,3);
CIH<int>(1,2,3);
CII<int>(1,2,3);
CIJ<int>(1,2,3);
CJA<int>(1,2,3);
CJB<int>(1,2,3);
CJC<int>(1,2,3);
CJD<int>(1,2,3);
CJE<int>(1,2,3);
CJF<int>(1,2,3);
CJG<int>(1,2,3);
CJH<int>(1,2,3);
CJI<int>(1,2,3);
CJJ<int>(1,2,3);
DAA<int>(1,2,3);
DAB<int>(1,2,3);
DAC<int>(1,2,3);
DAD<int>(1,2,3);
DAE<int>(1,2,3);
DAF<int>(1,2,3);
DAG<int>(1,2,3);
DAH<int>(1,2,3);
DAI<int>(1,2,3);
DAJ<int>(1,2,3);
DBA<int>(1,2,3);
DBB<int>(1,2,3);
DBC<int>(1,2,3);
DBD<int>(1,2,3);
DBE<int>(1,2,3);
DBF<int>(1,2,3);
DBG<int>(1,2,3);
DBH<int>(1,2,3);
DBI<int>(1,2,3);
DBJ<int>(1,2,3);
DCA<int>(1,2,3);
DCB<int>(1,2,3);
DCC<int>(1,2,3);
DCD<int>(1,2,3);
DCE<int>(1,2,3);
DCF<int>(1,2,3);
DCG<int>(1,2,3);
DCH<int>(1,2,3);
DCI<int>(1,2,3);
DCJ<int>(1,2,3);
DDA<int>(1,2,3);
DDB<int>(1,2,3);
DDC<int>(1,2,3);
DDD<int>(1,2,3);
DDE<int>(1,2,3);
DDF<int>(1,2,3);
DDG<int>(1,2,3);
DDH<int>(1,2,3);
DDI<int>(1,2,3);
DDJ<int>(1,2,3);
DEA<int>(1,2,3);
DEB<int>(1,2,3);
DEC<int>(1,2,3);
DED<int>(1,2,3);
DEE<int>(1,2,3);
DEF<int>(1,2,3);
DEG<int>(1,2,3);
DEH<int>(1,2,3);
DEI<int>(1,2,3);
DEJ<int>(1,2,3);
DFA<int>(1,2,3);
DFB<int>(1,2,3);
DFC<int>(1,2,3);
DFD<int>(1,2,3);
DFE<int>(1,2,3);
DFF<int>(1,2,3);
DFG<int>(1,2,3);
DFH<int>(1,2,3);
DFI<int>(1,2,3);
DFJ<int>(1,2,3);
DGA<int>(1,2,3);
DGB<int>(1,2,3);
DGC<int>(1,2,3);
DGD<int>(1,2,3);
DGE<int>(1,2,3);
DGF<int>(1,2,3);
DGG<int>(1,2,3);
DGH<int>(1,2,3);
DGI<int>(1,2,3);
DGJ<int>(1,2,3);
DHA<int>(1,2,3);
DHB<int>(1,2,3);
DHC<int>(1,2,3);
DHD<int>(1,2,3);
DHE<int>(1,2,3);
DHF<int>(1,2,3);
DHG<int>(1,2,3);
DHH<int>(1,2,3);
DHI<int>(1,2,3);
DHJ<int>(1,2,3);
DIA<int>(1,2,3);
DIB<int>(1,2,3);
DIC<int>(1,2,3);
DID<int>(1,2,3);
DIE<int>(1,2,3);
DIF<int>(1,2,3);
DIG<int>(1,2,3);
DIH<int>(1,2,3);
DII<int>(1,2,3);
DIJ<int>(1,2,3);
DJA<int>(1,2,3);
DJB<int>(1,2,3);
DJC<int>(1,2,3);
DJD<int>(1,2,3);
DJE<int>(1,2,3);
DJF<int>(1,2,3);
DJG<int>(1,2,3);
DJH<int>(1,2,3);
DJI<int>(1,2,3);
DJJ<int>(1,2,3);
EAA<int>(1,2,3);
EAB<int>(1,2,3);
EAC<int>(1,2,3);
EAD<int>(1,2,3);
EAE<int>(1,2,3);
EAF<int>(1,2,3);
EAG<int>(1,2,3);
EAH<int>(1,2,3);
EAI<int>(1,2,3);
EAJ<int>(1,2,3);
EBA<int>(1,2,3);
EBB<int>(1,2,3);
EBC<int>(1,2,3);
EBD<int>(1,2,3);
EBE<int>(1,2,3);
EBF<int>(1,2,3);
EBG<int>(1,2,3);
EBH<int>(1,2,3);
EBI<int>(1,2,3);
EBJ<int>(1,2,3);
ECA<int>(1,2,3);
ECB<int>(1,2,3);
ECC<int>(1,2,3);
ECD<int>(1,2,3);
ECE<int>(1,2,3);
ECF<int>(1,2,3);
ECG<int>(1,2,3);
ECH<int>(1,2,3);
ECI<int>(1,2,3);
ECJ<int>(1,2,3);
EDA<int>(1,2,3);
EDB<int>(1,2,3);
EDC<int>(1,2,3);
EDD<int>(1,2,3);
EDE<int>(1,2,3);
EDF<int>(1,2,3);
EDG<int>(1,2,3);
EDH<int>(1,2,3);
EDI<int>(1,2,3);
EDJ<int>(1,2,3);
EEA<int>(1,2,3);
EEB<int>(1,2,3);
EEC<int>(1,2,3);
EED<int>(1,2,3);
EEE<int>(1,2,3);
EEF<int>(1,2,3);
EEG<int>(1,2,3);
EEH<int>(1,2,3);
EEI<int>(1,2,3);
EEJ<int>(1,2,3);
EFA<int>(1,2,3);
EFB<int>(1,2,3);
EFC<int>(1,2,3);
EFD<int>(1,2,3);
EFE<int>(1,2,3);
EFF<int>(1,2,3);
EFG<int>(1,2,3);
EFH<int>(1,2,3);
EFI<int>(1,2,3);
EFJ<int>(1,2,3);
EGA<int>(1,2,3);
EGB<int>(1,2,3);
EGC<int>(1,2,3);
EGD<int>(1,2,3);
EGE<int>(1,2,3);
EGF<int>(1,2,3);
EGG<int>(1,2,3);
EGH<int>(1,2,3);
EGI<int>(1,2,3);
EGJ<int>(1,2,3);
EHA<int>(1,2,3);
EHB<int>(1,2,3);
EHC<int>(1,2,3);
EHD<int>(1,2,3);
EHE<int>(1,2,3);
EHF<int>(1,2,3);
EHG<int>(1,2,3);
EHH<int>(1,2,3);
EHI<int>(1,2,3);
EHJ<int>(1,2,3);
EIA<int>(1,2,3);
EIB<int>(1,2,3);
EIC<int>(1,2,3);
EID<int>(1,2,3);
EIE<int>(1,2,3);
EIF<int>(1,2,3);
EIG<int>(1,2,3);
EIH<int>(1,2,3);
EII<int>(1,2,3);
EIJ<int>(1,2,3);
EJA<int>(1,2,3);
EJB<int>(1,2,3);
EJC<int>(1,2,3);
EJD<int>(1,2,3);
EJE<int>(1,2,3);
EJF<int>(1,2,3);
EJG<int>(1,2,3);
EJH<int>(1,2,3);
EJI<int>(1,2,3);
EJJ<int>(1,2,3);
FAA<int>(1,2,3);
FAB<int>(1,2,3);
FAC<int>(1,2,3);
FAD<int>(1,2,3);
FAE<int>(1,2,3);
FAF<int>(1,2,3);
FAG<int>(1,2,3);
FAH<int>(1,2,3);
FAI<int>(1,2,3);
FAJ<int>(1,2,3);
FBA<int>(1,2,3);
FBB<int>(1,2,3);
FBC<int>(1,2,3);
FBD<int>(1,2,3);
FBE<int>(1,2,3);
FBF<int>(1,2,3);
FBG<int>(1,2,3);
FBH<int>(1,2,3);
FBI<int>(1,2,3);
FBJ<int>(1,2,3);
FCA<int>(1,2,3);
FCB<int>(1,2,3);
FCC<int>(1,2,3);
FCD<int>(1,2,3);
FCE<int>(1,2,3);
FCF<int>(1,2,3);
FCG<int>(1,2,3);
FCH<int>(1,2,3);
FCI<int>(1,2,3);
FCJ<int>(1,2,3);
FDA<int>(1,2,3);
FDB<int>(1,2,3);
FDC<int>(1,2,3);
FDD<int>(1,2,3);
FDE<int>(1,2,3);
FDF<int>(1,2,3);
FDG<int>(1,2,3);
FDH<int>(1,2,3);
FDI<int>(1,2,3);
FDJ<int>(1,2,3);
FEA<int>(1,2,3);
FEB<int>(1,2,3);
FEC<int>(1,2,3);
FED<int>(1,2,3);
FEE<int>(1,2,3);
FEF<int>(1,2,3);
FEG<int>(1,2,3);
FEH<int>(1,2,3);
FEI<int>(1,2,3);
FEJ<int>(1,2,3);
FFA<int>(1,2,3);
FFB<int>(1,2,3);
FFC<int>(1,2,3);
FFD<int>(1,2,3);
FFE<int>(1,2,3);
FFF<int>(1,2,3);
FFG<int>(1,2,3);
FFH<int>(1,2,3);
FFI<int>(1,2,3);
FFJ<int>(1,2,3);
FGA<int>(1,2,3);
FGB<int>(1,2,3);
FGC<int>(1,2,3);
FGD<int>(1,2,3);
FGE<int>(1,2,3);
FGF<int>(1,2,3);
FGG<int>(1,2,3);
FGH<int>(1,2,3);
FGI<int>(1,2,3);
FGJ<int>(1,2,3);
FHA<int>(1,2,3);
FHB<int>(1,2,3);
FHC<int>(1,2,3);
FHD<int>(1,2,3);
FHE<int>(1,2,3);
FHF<int>(1,2,3);
FHG<int>(1,2,3);
FHH<int>(1,2,3);
FHI<int>(1,2,3);
FHJ<int>(1,2,3);
FIA<int>(1,2,3);
FIB<int>(1,2,3);
FIC<int>(1,2,3);
FID<int>(1,2,3);
FIE<int>(1,2,3);
FIF<int>(1,2,3);
FIG<int>(1,2,3);
FIH<int>(1,2,3);
FII<int>(1,2,3);
FIJ<int>(1,2,3);
FJA<int>(1,2,3);
FJB<int>(1,2,3);
FJC<int>(1,2,3);
FJD<int>(1,2,3);
FJE<int>(1,2,3);
FJF<int>(1,2,3);
FJG<int>(1,2,3);
FJH<int>(1,2,3);
FJI<int>(1,2,3);
FJJ<int>(1,2,3);
GAA<int>(1,2,3);
GAB<int>(1,2,3);
GAC<int>(1,2,3);
GAD<int>(1,2,3);
GAE<int>(1,2,3);
GAF<int>(1,2,3);
GAG<int>(1,2,3);
GAH<int>(1,2,3);
GAI<int>(1,2,3);
GAJ<int>(1,2,3);
GBA<int>(1,2,3);
GBB<int>(1,2,3);
GBC<int>(1,2,3);
GBD<int>(1,2,3);
GBE<int>(1,2,3);
GBF<int>(1,2,3);
GBG<int>(1,2,3);
GBH<int>(1,2,3);
GBI<int>(1,2,3);
GBJ<int>(1,2,3);
GCA<int>(1,2,3);
GCB<int>(1,2,3);
GCC<int>(1,2,3);
GCD<int>(1,2,3);
GCE<int>(1,2,3);
GCF<int>(1,2,3);
GCG<int>(1,2,3);
GCH<int>(1,2,3);
GCI<int>(1,2,3);
GCJ<int>(1,2,3);
GDA<int>(1,2,3);
GDB<int>(1,2,3);
GDC<int>(1,2,3);
GDD<int>(1,2,3);
GDE<int>(1,2,3);
GDF<int>(1,2,3);
GDG<int>(1,2,3);
GDH<int>(1,2,3);
GDI<int>(1,2,3);
GDJ<int>(1,2,3);
GEA<int>(1,2,3);
GEB<int>(1,2,3);
GEC<int>(1,2,3);
GED<int>(1,2,3);
GEE<int>(1,2,3);
GEF<int>(1,2,3);
GEG<int>(1,2,3);
GEH<int>(1,2,3);
GEI<int>(1,2,3);
GEJ<int>(1,2,3);
GFA<int>(1,2,3);
GFB<int>(1,2,3);
GFC<int>(1,2,3);
GFD<int>(1,2,3);
GFE<int>(1,2,3);
GFF<int>(1,2,3);
GFG<int>(1,2,3);
GFH<int>(1,2,3);
GFI<int>(1,2,3);
GFJ<int>(1,2,3);
GGA<int>(1,2,3);
GGB<int>(1,2,3);
GGC<int>(1,2,3);
GGD<int>(1,2,3);
GGE<int>(1,2,3);
GGF<int>(1,2,3);
GGG<int>(1,2,3);
GGH<int>(1,2,3);
GGI<int>(1,2,3);
GGJ<int>(1,2,3);
GHA<int>(1,2,3);
GHB<int>(1,2,3);
GHC<int>(1,2,3);
GHD<int>(1,2,3);
GHE<int>(1,2,3);
GHF<int>(1,2,3);
GHG<int>(1,2,3);
GHH<int>(1,2,3);
GHI<int>(1,2,3);
GHJ<int>(1,2,3);
GIA<int>(1,2,3);
GIB<int>(1,2,3);
GIC<int>(1,2,3);
GID<int>(1,2,3);
GIE<int>(1,2,3);
GIF<int>(1,2,3);
GIG<int>(1,2,3);
GIH<int>(1,2,3);
GII<int>(1,2,3);
GIJ<int>(1,2,3);
GJA<int>(1,2,3);
GJB<int>(1,2,3);
GJC<int>(1,2,3);
GJD<int>(1,2,3);
GJE<int>(1,2,3);
GJF<int>(1,2,3);
GJG<int>(1,2,3);
GJH<int>(1,2,3);
GJI<int>(1,2,3);
GJJ<int>(1,2,3);
HAA<int>(1,2,3);
HAB<int>(1,2,3);
HAC<int>(1,2,3);
HAD<int>(1,2,3);
HAE<int>(1,2,3);
HAF<int>(1,2,3);
HAG<int>(1,2,3);
HAH<int>(1,2,3);
HAI<int>(1,2,3);
HAJ<int>(1,2,3);
HBA<int>(1,2,3);
HBB<int>(1,2,3);
HBC<int>(1,2,3);
HBD<int>(1,2,3);
HBE<int>(1,2,3);
HBF<int>(1,2,3);
HBG<int>(1,2,3);
HBH<int>(1,2,3);
HBI<int>(1,2,3);
HBJ<int>(1,2,3);
HCA<int>(1,2,3);
HCB<int>(1,2,3);
HCC<int>(1,2,3);
HCD<int>(1,2,3);
HCE<int>(1,2,3);
HCF<int>(1,2,3);
HCG<int>(1,2,3);
HCH<int>(1,2,3);
HCI<int>(1,2,3);
HCJ<int>(1,2,3);
HDA<int>(1,2,3);
HDB<int>(1,2,3);
HDC<int>(1,2,3);
HDD<int>(1,2,3);
HDE<int>(1,2,3);
HDF<int>(1,2,3);
HDG<int>(1,2,3);
HDH<int>(1,2,3);
HDI<int>(1,2,3);
HDJ<int>(1,2,3);
HEA<int>(1,2,3);
HEB<int>(1,2,3);
HEC<int>(1,2,3);
HED<int>(1,2,3);
HEE<int>(1,2,3);
HEF<int>(1,2,3);
HEG<int>(1,2,3);
HEH<int>(1,2,3);
HEI<int>(1,2,3);
HEJ<int>(1,2,3);
HFA<int>(1,2,3);
HFB<int>(1,2,3);
HFC<int>(1,2,3);
HFD<int>(1,2,3);
HFE<int>(1,2,3);
HFF<int>(1,2,3);
HFG<int>(1,2,3);
HFH<int>(1,2,3);
HFI<int>(1,2,3);
HFJ<int>(1,2,3);
HGA<int>(1,2,3);
HGB<int>(1,2,3);
HGC<int>(1,2,3);
HGD<int>(1,2,3);
HGE<int>(1,2,3);
HGF<int>(1,2,3);
HGG<int>(1,2,3);
HGH<int>(1,2,3);
HGI<int>(1,2,3);
HGJ<int>(1,2,3);
HHA<int>(1,2,3);
HHB<int>(1,2,3);
HHC<int>(1,2,3);
HHD<int>(1,2,3);
HHE<int>(1,2,3);
HHF<int>(1,2,3);
HHG<int>(1,2,3);
HHH<int>(1,2,3);
HHI<int>(1,2,3);
HHJ<int>(1,2,3);
HIA<int>(1,2,3);
HIB<int>(1,2,3);
HIC<int>(1,2,3);
HID<int>(1,2,3);
HIE<int>(1,2,3);
HIF<int>(1,2,3);
HIG<int>(1,2,3);
HIH<int>(1,2,3);
HII<int>(1,2,3);
HIJ<int>(1,2,3);
HJA<int>(1,2,3);
HJB<int>(1,2,3);
HJC<int>(1,2,3);
HJD<int>(1,2,3);
HJE<int>(1,2,3);
HJF<int>(1,2,3);
HJG<int>(1,2,3);
HJH<int>(1,2,3);
HJI<int>(1,2,3);
HJJ<int>(1,2,3);
IAA<int>(1,2,3);
IAB<int>(1,2,3);
IAC<int>(1,2,3);
IAD<int>(1,2,3);
IAE<int>(1,2,3);
IAF<int>(1,2,3);
IAG<int>(1,2,3);
IAH<int>(1,2,3);
IAI<int>(1,2,3);
IAJ<int>(1,2,3);
IBA<int>(1,2,3);
IBB<int>(1,2,3);
IBC<int>(1,2,3);
IBD<int>(1,2,3);
IBE<int>(1,2,3);
IBF<int>(1,2,3);
IBG<int>(1,2,3);
IBH<int>(1,2,3);
IBI<int>(1,2,3);
IBJ<int>(1,2,3);
ICA<int>(1,2,3);
ICB<int>(1,2,3);
ICC<int>(1,2,3);
ICD<int>(1,2,3);
ICE<int>(1,2,3);
ICF<int>(1,2,3);
ICG<int>(1,2,3);
ICH<int>(1,2,3);
ICI<int>(1,2,3);
ICJ<int>(1,2,3);
IDA<int>(1,2,3);
IDB<int>(1,2,3);
IDC<int>(1,2,3);
IDD<int>(1,2,3);
IDE<int>(1,2,3);
IDF<int>(1,2,3);
IDG<int>(1,2,3);
IDH<int>(1,2,3);
IDI<int>(1,2,3);
IDJ<int>(1,2,3);
IEA<int>(1,2,3);
IEB<int>(1,2,3);
IEC<int>(1,2,3);
IED<int>(1,2,3);
IEE<int>(1,2,3);
IEF<int>(1,2,3);
IEG<int>(1,2,3);
IEH<int>(1,2,3);
IEI<int>(1,2,3);
IEJ<int>(1,2,3);
IFA<int>(1,2,3);
IFB<int>(1,2,3);
IFC<int>(1,2,3);
IFD<int>(1,2,3);
IFE<int>(1,2,3);
IFF<int>(1,2,3);
IFG<int>(1,2,3);
IFH<int>(1,2,3);
IFI<int>(1,2,3);
IFJ<int>(1,2,3);
IGA<int>(1,2,3);
IGB<int>(1,2,3);
IGC<int>(1,2,3);
IGD<int>(1,2,3);
IGE<int>(1,2,3);
IGF<int>(1,2,3);
IGG<int>(1,2,3);
IGH<int>(1,2,3);
IGI<int>(1,2,3);
IGJ<int>(1,2,3);
IHA<int>(1,2,3);
IHB<int>(1,2,3);
IHC<int>(1,2,3);
IHD<int>(1,2,3);
IHE<int>(1,2,3);
IHF<int>(1,2,3);
IHG<int>(1,2,3);
IHH<int>(1,2,3);
IHI<int>(1,2,3);
IHJ<int>(1,2,3);
IIA<int>(1,2,3);
IIB<int>(1,2,3);
IIC<int>(1,2,3);
IID<int>(1,2,3);
IIE<int>(1,2,3);
IIF<int>(1,2,3);
IIG<int>(1,2,3);
IIH<int>(1,2,3);
III<int>(1,2,3);
IIJ<int>(1,2,3);
IJA<int>(1,2,3);
IJB<int>(1,2,3);
IJC<int>(1,2,3);
IJD<int>(1,2,3);
IJE<int>(1,2,3);
IJF<int>(1,2,3);
IJG<int>(1,2,3);
IJH<int>(1,2,3);
IJI<int>(1,2,3);
IJJ<int>(1,2,3);
JAA<int>(1,2,3);
JAB<int>(1,2,3);
JAC<int>(1,2,3);
JAD<int>(1,2,3);
JAE<int>(1,2,3);
JAF<int>(1,2,3);
JAG<int>(1,2,3);
JAH<int>(1,2,3);
JAI<int>(1,2,3);
JAJ<int>(1,2,3);
JBA<int>(1,2,3);
JBB<int>(1,2,3);
JBC<int>(1,2,3);
JBD<int>(1,2,3);
JBE<int>(1,2,3);
JBF<int>(1,2,3);
JBG<int>(1,2,3);
JBH<int>(1,2,3);
JBI<int>(1,2,3);
JBJ<int>(1,2,3);
JCA<int>(1,2,3);
JCB<int>(1,2,3);
JCC<int>(1,2,3);
JCD<int>(1,2,3);
JCE<int>(1,2,3);
JCF<int>(1,2,3);
JCG<int>(1,2,3);
JCH<int>(1,2,3);
JCI<int>(1,2,3);
JCJ<int>(1,2,3);
JDA<int>(1,2,3);
JDB<int>(1,2,3);
JDC<int>(1,2,3);
JDD<int>(1,2,3);
JDE<int>(1,2,3);
JDF<int>(1,2,3);
JDG<int>(1,2,3);
JDH<int>(1,2,3);
JDI<int>(1,2,3);
JDJ<int>(1,2,3);
JEA<int>(1,2,3);
JEB<int>(1,2,3);
JEC<int>(1,2,3);
JED<int>(1,2,3);
JEE<int>(1,2,3);
JEF<int>(1,2,3);
JEG<int>(1,2,3);
JEH<int>(1,2,3);
JEI<int>(1,2,3);
JEJ<int>(1,2,3);
JFA<int>(1,2,3);
JFB<int>(1,2,3);
JFC<int>(1,2,3);
JFD<int>(1,2,3);
JFE<int>(1,2,3);
JFF<int>(1,2,3);
JFG<int>(1,2,3);
JFH<int>(1,2,3);
JFI<int>(1,2,3);
JFJ<int>(1,2,3);
JGA<int>(1,2,3);
JGB<int>(1,2,3);
JGC<int>(1,2,3);
JGD<int>(1,2,3);
JGE<int>(1,2,3);
JGF<int>(1,2,3);
JGG<int>(1,2,3);
JGH<int>(1,2,3);
JGI<int>(1,2,3);
JGJ<int>(1,2,3);
JHA<int>(1,2,3);
JHB<int>(1,2,3);
JHC<int>(1,2,3);
JHD<int>(1,2,3);
JHE<int>(1,2,3);
JHF<int>(1,2,3);
JHG<int>(1,2,3);
JHH<int>(1,2,3);
JHI<int>(1,2,3);
JHJ<int>(1,2,3);
JIA<int>(1,2,3);
JIB<int>(1,2,3);
JIC<int>(1,2,3);
JID<int>(1,2,3);
JIE<int>(1,2,3);
JIF<int>(1,2,3);
JIG<int>(1,2,3);
JIH<int>(1,2,3);
JII<int>(1,2,3);
JIJ<int>(1,2,3);
JJA<int>(1,2,3);
JJB<int>(1,2,3);
JJC<int>(1,2,3);
JJD<int>(1,2,3);
JJE<int>(1,2,3);
JJF<int>(1,2,3);
JJG<int>(1,2,3);
JJH<int>(1,2,3);
JJI<int>(1,2,3);
JJJ<int>(1,2,3);
BAAA<int>(1,2,3);
BAAB<int>(1,2,3);
BAAC<int>(1,2,3);
BAAD<int>(1,2,3);
BAAE<int>(1,2,3);
BAAF<int>(1,2,3);
BAAG<int>(1,2,3);
BAAH<int>(1,2,3);
BAAI<int>(1,2,3);
BAAJ<int>(1,2,3);
BABA<int>(1,2,3);
BABB<int>(1,2,3);
BABC<int>(1,2,3);
BABD<int>(1,2,3);
BABE<int>(1,2,3);
BABF<int>(1,2,3);
BABG<int>(1,2,3);
BABH<int>(1,2,3);
BABI<int>(1,2,3);
BABJ<int>(1,2,3);
BACA<int>(1,2,3);
BACB<int>(1,2,3);
BACC<int>(1,2,3);
BACD<int>(1,2,3);
BACE<int>(1,2,3);
BACF<int>(1,2,3);
BACG<int>(1,2,3);
BACH<int>(1,2,3);
BACI<int>(1,2,3);
BACJ<int>(1,2,3);
BADA<int>(1,2,3);
BADB<int>(1,2,3);
BADC<int>(1,2,3);
BADD<int>(1,2,3);
BADE<int>(1,2,3);
BADF<int>(1,2,3);
BADG<int>(1,2,3);
BADH<int>(1,2,3);
BADI<int>(1,2,3);
BADJ<int>(1,2,3);
BAEA<int>(1,2,3);
BAEB<int>(1,2,3);
BAEC<int>(1,2,3);
BAED<int>(1,2,3);
BAEE<int>(1,2,3);
BAEF<int>(1,2,3);
BAEG<int>(1,2,3);
BAEH<int>(1,2,3);
BAEI<int>(1,2,3);
BAEJ<int>(1,2,3);
BAFA<int>(1,2,3);
BAFB<int>(1,2,3);
BAFC<int>(1,2,3);
BAFD<int>(1,2,3);
BAFE<int>(1,2,3);
BAFF<int>(1,2,3);
BAFG<int>(1,2,3);
BAFH<int>(1,2,3);
BAFI<int>(1,2,3);
BAFJ<int>(1,2,3);
BAGA<int>(1,2,3);
BAGB<int>(1,2,3);
BAGC<int>(1,2,3);
BAGD<int>(1,2,3);
BAGE<int>(1,2,3);
BAGF<int>(1,2,3);
BAGG<int>(1,2,3);
BAGH<int>(1,2,3);
BAGI<int>(1,2,3);
BAGJ<int>(1,2,3);
BAHA<int>(1,2,3);
BAHB<int>(1,2,3);
BAHC<int>(1,2,3);
BAHD<int>(1,2,3);
BAHE<int>(1,2,3);
BAHF<int>(1,2,3);
BAHG<int>(1,2,3);
BAHH<int>(1,2,3);
BAHI<int>(1,2,3);
BAHJ<int>(1,2,3);
BAIA<int>(1,2,3);
BAIB<int>(1,2,3);
BAIC<int>(1,2,3);
BAID<int>(1,2,3);
BAIE<int>(1,2,3);
BAIF<int>(1,2,3);
BAIG<int>(1,2,3);
BAIH<int>(1,2,3);
BAII<int>(1,2,3);
BAIJ<int>(1,2,3);
BAJA<int>(1,2,3);
BAJB<int>(1,2,3);
BAJC<int>(1,2,3);
BAJD<int>(1,2,3);
BAJE<int>(1,2,3);
BAJF<int>(1,2,3);
BAJG<int>(1,2,3);
BAJH<int>(1,2,3);
BAJI<int>(1,2,3);
BAJJ<int>(1,2,3);
BBAA<int>(1,2,3);
BBAB<int>(1,2,3);
BBAC<int>(1,2,3);
BBAD<int>(1,2,3);
BBAE<int>(1,2,3);
BBAF<int>(1,2,3);
BBAG<int>(1,2,3);
BBAH<int>(1,2,3);
BBAI<int>(1,2,3);
BBAJ<int>(1,2,3);
BBBA<int>(1,2,3);
BBBB<int>(1,2,3);
BBBC<int>(1,2,3);
BBBD<int>(1,2,3);
BBBE<int>(1,2,3);
BBBF<int>(1,2,3);
BBBG<int>(1,2,3);
BBBH<int>(1,2,3);
BBBI<int>(1,2,3);
BBBJ<int>(1,2,3);
BBCA<int>(1,2,3);
BBCB<int>(1,2,3);
BBCC<int>(1,2,3);
BBCD<int>(1,2,3);
BBCE<int>(1,2,3);
BBCF<int>(1,2,3);
BBCG<int>(1,2,3);
BBCH<int>(1,2,3);
BBCI<int>(1,2,3);
BBCJ<int>(1,2,3);
BBDA<int>(1,2,3);
BBDB<int>(1,2,3);
BBDC<int>(1,2,3);
BBDD<int>(1,2,3);
BBDE<int>(1,2,3);
BBDF<int>(1,2,3);
BBDG<int>(1,2,3);
BBDH<int>(1,2,3);
BBDI<int>(1,2,3);
BBDJ<int>(1,2,3);
BBEA<int>(1,2,3);
BBEB<int>(1,2,3);
BBEC<int>(1,2,3);
BBED<int>(1,2,3);
BBEE<int>(1,2,3);
BBEF<int>(1,2,3);
BBEG<int>(1,2,3);
BBEH<int>(1,2,3);
BBEI<int>(1,2,3);
BBEJ<int>(1,2,3);
BBFA<int>(1,2,3);
BBFB<int>(1,2,3);
BBFC<int>(1,2,3);
BBFD<int>(1,2,3);
BBFE<int>(1,2,3);
BBFF<int>(1,2,3);
BBFG<int>(1,2,3);
BBFH<int>(1,2,3);
BBFI<int>(1,2,3);
BBFJ<int>(1,2,3);
BBGA<int>(1,2,3);
BBGB<int>(1,2,3);
BBGC<int>(1,2,3);
BBGD<int>(1,2,3);
BBGE<int>(1,2,3);
BBGF<int>(1,2,3);
BBGG<int>(1,2,3);
BBGH<int>(1,2,3);
BBGI<int>(1,2,3);
BBGJ<int>(1,2,3);
BBHA<int>(1,2,3);
BBHB<int>(1,2,3);
BBHC<int>(1,2,3);
BBHD<int>(1,2,3);
BBHE<int>(1,2,3);
BBHF<int>(1,2,3);
BBHG<int>(1,2,3);
BBHH<int>(1,2,3);
BBHI<int>(1,2,3);
BBHJ<int>(1,2,3);
BBIA<int>(1,2,3);
BBIB<int>(1,2,3);
BBIC<int>(1,2,3);
BBID<int>(1,2,3);
BBIE<int>(1,2,3);
BBIF<int>(1,2,3);
BBIG<int>(1,2,3);
BBIH<int>(1,2,3);
BBII<int>(1,2,3);
BBIJ<int>(1,2,3);
BBJA<int>(1,2,3);
BBJB<int>(1,2,3);
BBJC<int>(1,2,3);
BBJD<int>(1,2,3);
BBJE<int>(1,2,3);
BBJF<int>(1,2,3);
BBJG<int>(1,2,3);
BBJH<int>(1,2,3);
BBJI<int>(1,2,3);
BBJJ<int>(1,2,3);
BCAA<int>(1,2,3);
BCAB<int>(1,2,3);
BCAC<int>(1,2,3);
BCAD<int>(1,2,3);
BCAE<int>(1,2,3);
BCAF<int>(1,2,3);
BCAG<int>(1,2,3);
BCAH<int>(1,2,3);
BCAI<int>(1,2,3);
BCAJ<int>(1,2,3);
BCBA<int>(1,2,3);
BCBB<int>(1,2,3);
BCBC<int>(1,2,3);
BCBD<int>(1,2,3);
BCBE<int>(1,2,3);
BCBF<int>(1,2,3);
BCBG<int>(1,2,3);
BCBH<int>(1,2,3);
BCBI<int>(1,2,3);
BCBJ<int>(1,2,3);
BCCA<int>(1,2,3);
BCCB<int>(1,2,3);
BCCC<int>(1,2,3);
BCCD<int>(1,2,3);
BCCE<int>(1,2,3);
BCCF<int>(1,2,3);
BCCG<int>(1,2,3);
BCCH<int>(1,2,3);
BCCI<int>(1,2,3);
BCCJ<int>(1,2,3);
BCDA<int>(1,2,3);
BCDB<int>(1,2,3);
BCDC<int>(1,2,3);
BCDD<int>(1,2,3);
BCDE<int>(1,2,3);
BCDF<int>(1,2,3);
BCDG<int>(1,2,3);
BCDH<int>(1,2,3);
BCDI<int>(1,2,3);
BCDJ<int>(1,2,3);
BCEA<int>(1,2,3);
BCEB<int>(1,2,3);
BCEC<int>(1,2,3);
BCED<int>(1,2,3);
BCEE<int>(1,2,3);
BCEF<int>(1,2,3);
BCEG<int>(1,2,3);
BCEH<int>(1,2,3);
BCEI<int>(1,2,3);
BCEJ<int>(1,2,3);
BCFA<int>(1,2,3);
BCFB<int>(1,2,3);
BCFC<int>(1,2,3);
BCFD<int>(1,2,3);
BCFE<int>(1,2,3);
BCFF<int>(1,2,3);
BCFG<int>(1,2,3);
BCFH<int>(1,2,3);
BCFI<int>(1,2,3);
BCFJ<int>(1,2,3);
BCGA<int>(1,2,3);
BCGB<int>(1,2,3);
BCGC<int>(1,2,3);
BCGD<int>(1,2,3);
BCGE<int>(1,2,3);
BCGF<int>(1,2,3);
BCGG<int>(1,2,3);
BCGH<int>(1,2,3);
BCGI<int>(1,2,3);
BCGJ<int>(1,2,3);
BCHA<int>(1,2,3);
BCHB<int>(1,2,3);
BCHC<int>(1,2,3);
BCHD<int>(1,2,3);
BCHE<int>(1,2,3);
BCHF<int>(1,2,3);
BCHG<int>(1,2,3);
BCHH<int>(1,2,3);
BCHI<int>(1,2,3);
BCHJ<int>(1,2,3);
BCIA<int>(1,2,3);
BCIB<int>(1,2,3);
BCIC<int>(1,2,3);
BCID<int>(1,2,3);
BCIE<int>(1,2,3);
BCIF<int>(1,2,3);
BCIG<int>(1,2,3);
BCIH<int>(1,2,3);
BCII<int>(1,2,3);
BCIJ<int>(1,2,3);
BCJA<int>(1,2,3);
BCJB<int>(1,2,3);
BCJC<int>(1,2,3);
BCJD<int>(1,2,3);
BCJE<int>(1,2,3);
BCJF<int>(1,2,3);
BCJG<int>(1,2,3);
BCJH<int>(1,2,3);
BCJI<int>(1,2,3);
BCJJ<int>(1,2,3);
BDAA<int>(1,2,3);
BDAB<int>(1,2,3);
BDAC<int>(1,2,3);
BDAD<int>(1,2,3);
BDAE<int>(1,2,3);
BDAF<int>(1,2,3);
BDAG<int>(1,2,3);
BDAH<int>(1,2,3);
BDAI<int>(1,2,3);
BDAJ<int>(1,2,3);
BDBA<int>(1,2,3);
BDBB<int>(1,2,3);
BDBC<int>(1,2,3);
BDBD<int>(1,2,3);
BDBE<int>(1,2,3);
BDBF<int>(1,2,3);
BDBG<int>(1,2,3);
BDBH<int>(1,2,3);
BDBI<int>(1,2,3);
BDBJ<int>(1,2,3);
BDCA<int>(1,2,3);
BDCB<int>(1,2,3);
BDCC<int>(1,2,3);
BDCD<int>(1,2,3);
BDCE<int>(1,2,3);
BDCF<int>(1,2,3);
BDCG<int>(1,2,3);
BDCH<int>(1,2,3);
BDCI<int>(1,2,3);
BDCJ<int>(1,2,3);
BDDA<int>(1,2,3);
BDDB<int>(1,2,3);
BDDC<int>(1,2,3);
BDDD<int>(1,2,3);
BDDE<int>(1,2,3);
BDDF<int>(1,2,3);
BDDG<int>(1,2,3);
BDDH<int>(1,2,3);
BDDI<int>(1,2,3);
BDDJ<int>(1,2,3);
BDEA<int>(1,2,3);
BDEB<int>(1,2,3);
BDEC<int>(1,2,3);
BDED<int>(1,2,3);
BDEE<int>(1,2,3);
BDEF<int>(1,2,3);
BDEG<int>(1,2,3);
BDEH<int>(1,2,3);
BDEI<int>(1,2,3);
BDEJ<int>(1,2,3);
BDFA<int>(1,2,3);
BDFB<int>(1,2,3);
BDFC<int>(1,2,3);
BDFD<int>(1,2,3);
BDFE<int>(1,2,3);
BDFF<int>(1,2,3);
BDFG<int>(1,2,3);
BDFH<int>(1,2,3);
BDFI<int>(1,2,3);
BDFJ<int>(1,2,3);
BDGA<int>(1,2,3);
BDGB<int>(1,2,3);
BDGC<int>(1,2,3);
BDGD<int>(1,2,3);
BDGE<int>(1,2,3);
BDGF<int>(1,2,3);
BDGG<int>(1,2,3);
BDGH<int>(1,2,3);
BDGI<int>(1,2,3);
BDGJ<int>(1,2,3);
BDHA<int>(1,2,3);
BDHB<int>(1,2,3);
BDHC<int>(1,2,3);
BDHD<int>(1,2,3);
BDHE<int>(1,2,3);
BDHF<int>(1,2,3);
BDHG<int>(1,2,3);
BDHH<int>(1,2,3);
BDHI<int>(1,2,3);
BDHJ<int>(1,2,3);
BDIA<int>(1,2,3);
BDIB<int>(1,2,3);
BDIC<int>(1,2,3);
BDID<int>(1,2,3);
BDIE<int>(1,2,3);
BDIF<int>(1,2,3);
BDIG<int>(1,2,3);
BDIH<int>(1,2,3);
BDII<int>(1,2,3);
BDIJ<int>(1,2,3);
BDJA<int>(1,2,3);
BDJB<int>(1,2,3);
BDJC<int>(1,2,3);
BDJD<int>(1,2,3);
BDJE<int>(1,2,3);
BDJF<int>(1,2,3);
BDJG<int>(1,2,3);
BDJH<int>(1,2,3);
BDJI<int>(1,2,3);
BDJJ<int>(1,2,3);
BEAA<int>(1,2,3);
BEAB<int>(1,2,3);
BEAC<int>(1,2,3);
BEAD<int>(1,2,3);
BEAE<int>(1,2,3);
BEAF<int>(1,2,3);
BEAG<int>(1,2,3);
BEAH<int>(1,2,3);
BEAI<int>(1,2,3);
BEAJ<int>(1,2,3);
BEBA<int>(1,2,3);
BEBB<int>(1,2,3);
BEBC<int>(1,2,3);
BEBD<int>(1,2,3);
BEBE<int>(1,2,3);
BEBF<int>(1,2,3);
BEBG<int>(1,2,3);
BEBH<int>(1,2,3);
BEBI<int>(1,2,3);
BEBJ<int>(1,2,3);
BECA<int>(1,2,3);
BECB<int>(1,2,3);
BECC<int>(1,2,3);
BECD<int>(1,2,3);
BECE<int>(1,2,3);
BECF<int>(1,2,3);
BECG<int>(1,2,3);
BECH<int>(1,2,3);
BECI<int>(1,2,3);
BECJ<int>(1,2,3);
BEDA<int>(1,2,3);
BEDB<int>(1,2,3);
BEDC<int>(1,2,3);
BEDD<int>(1,2,3);
BEDE<int>(1,2,3);
BEDF<int>(1,2,3);
BEDG<int>(1,2,3);
BEDH<int>(1,2,3);
BEDI<int>(1,2,3);
BEDJ<int>(1,2,3);
BEEA<int>(1,2,3);
BEEB<int>(1,2,3);
BEEC<int>(1,2,3);
BEED<int>(1,2,3);
BEEE<int>(1,2,3);
BEEF<int>(1,2,3);
BEEG<int>(1,2,3);
BEEH<int>(1,2,3);
BEEI<int>(1,2,3);
BEEJ<int>(1,2,3);
BEFA<int>(1,2,3);
BEFB<int>(1,2,3);
BEFC<int>(1,2,3);
BEFD<int>(1,2,3);
BEFE<int>(1,2,3);
BEFF<int>(1,2,3);
BEFG<int>(1,2,3);
BEFH<int>(1,2,3);
BEFI<int>(1,2,3);
BEFJ<int>(1,2,3);
BEGA<int>(1,2,3);
BEGB<int>(1,2,3);
BEGC<int>(1,2,3);
BEGD<int>(1,2,3);
BEGE<int>(1,2,3);
BEGF<int>(1,2,3);
BEGG<int>(1,2,3);
BEGH<int>(1,2,3);
BEGI<int>(1,2,3);
BEGJ<int>(1,2,3);
BEHA<int>(1,2,3);
BEHB<int>(1,2,3);
BEHC<int>(1,2,3);
BEHD<int>(1,2,3);
BEHE<int>(1,2,3);
BEHF<int>(1,2,3);
BEHG<int>(1,2,3);
BEHH<int>(1,2,3);
BEHI<int>(1,2,3);
BEHJ<int>(1,2,3);
BEIA<int>(1,2,3);
BEIB<int>(1,2,3);
BEIC<int>(1,2,3);
BEID<int>(1,2,3);
BEIE<int>(1,2,3);
BEIF<int>(1,2,3);
BEIG<int>(1,2,3);
BEIH<int>(1,2,3);
BEII<int>(1,2,3);
BEIJ<int>(1,2,3);
BEJA<int>(1,2,3);
BEJB<int>(1,2,3);
BEJC<int>(1,2,3);
BEJD<int>(1,2,3);
BEJE<int>(1,2,3);
BEJF<int>(1,2,3);
BEJG<int>(1,2,3);
BEJH<int>(1,2,3);
BEJI<int>(1,2,3);
BEJJ<int>(1,2,3);
BFAA<int>(1,2,3);
BFAB<int>(1,2,3);
BFAC<int>(1,2,3);
BFAD<int>(1,2,3);
BFAE<int>(1,2,3);
BFAF<int>(1,2,3);
BFAG<int>(1,2,3);
BFAH<int>(1,2,3);
BFAI<int>(1,2,3);
BFAJ<int>(1,2,3);
BFBA<int>(1,2,3);
BFBB<int>(1,2,3);
BFBC<int>(1,2,3);
BFBD<int>(1,2,3);
BFBE<int>(1,2,3);
BFBF<int>(1,2,3);
BFBG<int>(1,2,3);
BFBH<int>(1,2,3);
BFBI<int>(1,2,3);
BFBJ<int>(1,2,3);
BFCA<int>(1,2,3);
BFCB<int>(1,2,3);
BFCC<int>(1,2,3);
BFCD<int>(1,2,3);
BFCE<int>(1,2,3);
BFCF<int>(1,2,3);
BFCG<int>(1,2,3);
BFCH<int>(1,2,3);
BFCI<int>(1,2,3);
BFCJ<int>(1,2,3);
BFDA<int>(1,2,3);
BFDB<int>(1,2,3);
BFDC<int>(1,2,3);
BFDD<int>(1,2,3);
BFDE<int>(1,2,3);
BFDF<int>(1,2,3);
BFDG<int>(1,2,3);
BFDH<int>(1,2,3);
BFDI<int>(1,2,3);
BFDJ<int>(1,2,3);
BFEA<int>(1,2,3);
BFEB<int>(1,2,3);
BFEC<int>(1,2,3);
BFED<int>(1,2,3);
BFEE<int>(1,2,3);
BFEF<int>(1,2,3);
BFEG<int>(1,2,3);
BFEH<int>(1,2,3);
BFEI<int>(1,2,3);
BFEJ<int>(1,2,3);
BFFA<int>(1,2,3);
BFFB<int>(1,2,3);
BFFC<int>(1,2,3);
BFFD<int>(1,2,3);
BFFE<int>(1,2,3);
BFFF<int>(1,2,3);
BFFG<int>(1,2,3);
BFFH<int>(1,2,3);
BFFI<int>(1,2,3);
BFFJ<int>(1,2,3);
BFGA<int>(1,2,3);
BFGB<int>(1,2,3);
BFGC<int>(1,2,3);
BFGD<int>(1,2,3);
BFGE<int>(1,2,3);
BFGF<int>(1,2,3);
BFGG<int>(1,2,3);
BFGH<int>(1,2,3);
BFGI<int>(1,2,3);
BFGJ<int>(1,2,3);
BFHA<int>(1,2,3);
BFHB<int>(1,2,3);
BFHC<int>(1,2,3);
BFHD<int>(1,2,3);
BFHE<int>(1,2,3);
BFHF<int>(1,2,3);
BFHG<int>(1,2,3);
BFHH<int>(1,2,3);
BFHI<int>(1,2,3);
BFHJ<int>(1,2,3);
BFIA<int>(1,2,3);
BFIB<int>(1,2,3);
BFIC<int>(1,2,3);
BFID<int>(1,2,3);
BFIE<int>(1,2,3);
BFIF<int>(1,2,3);
BFIG<int>(1,2,3);
BFIH<int>(1,2,3);
BFII<int>(1,2,3);
BFIJ<int>(1,2,3);
BFJA<int>(1,2,3);
BFJB<int>(1,2,3);
BFJC<int>(1,2,3);
BFJD<int>(1,2,3);
BFJE<int>(1,2,3);
BFJF<int>(1,2,3);
BFJG<int>(1,2,3);
BFJH<int>(1,2,3);
BFJI<int>(1,2,3);
BFJJ<int>(1,2,3);
BGAA<int>(1,2,3);
BGAB<int>(1,2,3);
BGAC<int>(1,2,3);
BGAD<int>(1,2,3);
BGAE<int>(1,2,3);
BGAF<int>(1,2,3);
BGAG<int>(1,2,3);
BGAH<int>(1,2,3);
BGAI<int>(1,2,3);
BGAJ<int>(1,2,3);
BGBA<int>(1,2,3);
BGBB<int>(1,2,3);
BGBC<int>(1,2,3);
BGBD<int>(1,2,3);
BGBE<int>(1,2,3);
BGBF<int>(1,2,3);
BGBG<int>(1,2,3);
BGBH<int>(1,2,3);
BGBI<int>(1,2,3);
BGBJ<int>(1,2,3);
BGCA<int>(1,2,3);
BGCB<int>(1,2,3);
BGCC<int>(1,2,3);
BGCD<int>(1,2,3);
BGCE<int>(1,2,3);
BGCF<int>(1,2,3);
BGCG<int>(1,2,3);
BGCH<int>(1,2,3);
BGCI<int>(1,2,3);
BGCJ<int>(1,2,3);
BGDA<int>(1,2,3);
BGDB<int>(1,2,3);
BGDC<int>(1,2,3);
BGDD<int>(1,2,3);
BGDE<int>(1,2,3);
BGDF<int>(1,2,3);
BGDG<int>(1,2,3);
BGDH<int>(1,2,3);
BGDI<int>(1,2,3);
BGDJ<int>(1,2,3);
BGEA<int>(1,2,3);
BGEB<int>(1,2,3);
BGEC<int>(1,2,3);
BGED<int>(1,2,3);
BGEE<int>(1,2,3);
BGEF<int>(1,2,3);
BGEG<int>(1,2,3);
BGEH<int>(1,2,3);
BGEI<int>(1,2,3);
BGEJ<int>(1,2,3);
BGFA<int>(1,2,3);
BGFB<int>(1,2,3);
BGFC<int>(1,2,3);
BGFD<int>(1,2,3);
BGFE<int>(1,2,3);
BGFF<int>(1,2,3);
BGFG<int>(1,2,3);
BGFH<int>(1,2,3);
BGFI<int>(1,2,3);
BGFJ<int>(1,2,3);
BGGA<int>(1,2,3);
BGGB<int>(1,2,3);
BGGC<int>(1,2,3);
BGGD<int>(1,2,3);
BGGE<int>(1,2,3);
BGGF<int>(1,2,3);
BGGG<int>(1,2,3);
BGGH<int>(1,2,3);
BGGI<int>(1,2,3);
BGGJ<int>(1,2,3);
BGHA<int>(1,2,3);
BGHB<int>(1,2,3);
BGHC<int>(1,2,3);
BGHD<int>(1,2,3);
BGHE<int>(1,2,3);
BGHF<int>(1,2,3);
BGHG<int>(1,2,3);
BGHH<int>(1,2,3);
BGHI<int>(1,2,3);
BGHJ<int>(1,2,3);
BGIA<int>(1,2,3);
BGIB<int>(1,2,3);
BGIC<int>(1,2,3);
BGID<int>(1,2,3);
BGIE<int>(1,2,3);
BGIF<int>(1,2,3);
BGIG<int>(1,2,3);
BGIH<int>(1,2,3);
BGII<int>(1,2,3);
BGIJ<int>(1,2,3);
BGJA<int>(1,2,3);
BGJB<int>(1,2,3);
BGJC<int>(1,2,3);
BGJD<int>(1,2,3);
BGJE<int>(1,2,3);
BGJF<int>(1,2,3);
BGJG<int>(1,2,3);
BGJH<int>(1,2,3);
BGJI<int>(1,2,3);
BGJJ<int>(1,2,3);
BHAA<int>(1,2,3);
BHAB<int>(1,2,3);
BHAC<int>(1,2,3);
BHAD<int>(1,2,3);
BHAE<int>(1,2,3);
BHAF<int>(1,2,3);
BHAG<int>(1,2,3);
BHAH<int>(1,2,3);
BHAI<int>(1,2,3);
BHAJ<int>(1,2,3);
BHBA<int>(1,2,3);
BHBB<int>(1,2,3);
BHBC<int>(1,2,3);
BHBD<int>(1,2,3);
BHBE<int>(1,2,3);
BHBF<int>(1,2,3);
BHBG<int>(1,2,3);
BHBH<int>(1,2,3);
BHBI<int>(1,2,3);
BHBJ<int>(1,2,3);
BHCA<int>(1,2,3);
BHCB<int>(1,2,3);
BHCC<int>(1,2,3);
BHCD<int>(1,2,3);
BHCE<int>(1,2,3);
BHCF<int>(1,2,3);
BHCG<int>(1,2,3);
BHCH<int>(1,2,3);
BHCI<int>(1,2,3);
BHCJ<int>(1,2,3);
BHDA<int>(1,2,3);
BHDB<int>(1,2,3);
BHDC<int>(1,2,3);
BHDD<int>(1,2,3);
BHDE<int>(1,2,3);
BHDF<int>(1,2,3);
BHDG<int>(1,2,3);
BHDH<int>(1,2,3);
BHDI<int>(1,2,3);
BHDJ<int>(1,2,3);
BHEA<int>(1,2,3);
BHEB<int>(1,2,3);
BHEC<int>(1,2,3);
BHED<int>(1,2,3);
BHEE<int>(1,2,3);
BHEF<int>(1,2,3);
BHEG<int>(1,2,3);
BHEH<int>(1,2,3);
BHEI<int>(1,2,3);
BHEJ<int>(1,2,3);
BHFA<int>(1,2,3);
BHFB<int>(1,2,3);
BHFC<int>(1,2,3);
BHFD<int>(1,2,3);
BHFE<int>(1,2,3);
BHFF<int>(1,2,3);
BHFG<int>(1,2,3);
BHFH<int>(1,2,3);
BHFI<int>(1,2,3);
BHFJ<int>(1,2,3);
BHGA<int>(1,2,3);
BHGB<int>(1,2,3);
BHGC<int>(1,2,3);
BHGD<int>(1,2,3);
BHGE<int>(1,2,3);
BHGF<int>(1,2,3);
BHGG<int>(1,2,3);
BHGH<int>(1,2,3);
BHGI<int>(1,2,3);
BHGJ<int>(1,2,3);
BHHA<int>(1,2,3);
BHHB<int>(1,2,3);
BHHC<int>(1,2,3);
BHHD<int>(1,2,3);
BHHE<int>(1,2,3);
BHHF<int>(1,2,3);
BHHG<int>(1,2,3);
BHHH<int>(1,2,3);
BHHI<int>(1,2,3);
BHHJ<int>(1,2,3);
BHIA<int>(1,2,3);
BHIB<int>(1,2,3);
BHIC<int>(1,2,3);
BHID<int>(1,2,3);
BHIE<int>(1,2,3);
BHIF<int>(1,2,3);
BHIG<int>(1,2,3);
BHIH<int>(1,2,3);
BHII<int>(1,2,3);
BHIJ<int>(1,2,3);
BHJA<int>(1,2,3);
BHJB<int>(1,2,3);
BHJC<int>(1,2,3);
BHJD<int>(1,2,3);
BHJE<int>(1,2,3);
BHJF<int>(1,2,3);
BHJG<int>(1,2,3);
BHJH<int>(1,2,3);
BHJI<int>(1,2,3);
BHJJ<int>(1,2,3);
BIAA<int>(1,2,3);
BIAB<int>(1,2,3);
BIAC<int>(1,2,3);
BIAD<int>(1,2,3);
BIAE<int>(1,2,3);
BIAF<int>(1,2,3);
BIAG<int>(1,2,3);
BIAH<int>(1,2,3);
BIAI<int>(1,2,3);
BIAJ<int>(1,2,3);
BIBA<int>(1,2,3);
BIBB<int>(1,2,3);
BIBC<int>(1,2,3);
BIBD<int>(1,2,3);
BIBE<int>(1,2,3);
BIBF<int>(1,2,3);
BIBG<int>(1,2,3);
BIBH<int>(1,2,3);
BIBI<int>(1,2,3);
BIBJ<int>(1,2,3);
BICA<int>(1,2,3);
BICB<int>(1,2,3);
BICC<int>(1,2,3);
BICD<int>(1,2,3);
BICE<int>(1,2,3);
BICF<int>(1,2,3);
BICG<int>(1,2,3);
BICH<int>(1,2,3);
BICI<int>(1,2,3);
BICJ<int>(1,2,3);
BIDA<int>(1,2,3);
BIDB<int>(1,2,3);
BIDC<int>(1,2,3);
BIDD<int>(1,2,3);
BIDE<int>(1,2,3);
BIDF<int>(1,2,3);
BIDG<int>(1,2,3);
BIDH<int>(1,2,3);
BIDI<int>(1,2,3);
BIDJ<int>(1,2,3);
BIEA<int>(1,2,3);
BIEB<int>(1,2,3);
BIEC<int>(1,2,3);
BIED<int>(1,2,3);
BIEE<int>(1,2,3);
BIEF<int>(1,2,3);
BIEG<int>(1,2,3);
BIEH<int>(1,2,3);
BIEI<int>(1,2,3);
BIEJ<int>(1,2,3);
BIFA<int>(1,2,3);
BIFB<int>(1,2,3);
BIFC<int>(1,2,3);
BIFD<int>(1,2,3);
BIFE<int>(1,2,3);
BIFF<int>(1,2,3);
BIFG<int>(1,2,3);
BIFH<int>(1,2,3);
BIFI<int>(1,2,3);
BIFJ<int>(1,2,3);
BIGA<int>(1,2,3);
BIGB<int>(1,2,3);
BIGC<int>(1,2,3);
BIGD<int>(1,2,3);
BIGE<int>(1,2,3);
BIGF<int>(1,2,3);
BIGG<int>(1,2,3);
BIGH<int>(1,2,3);
BIGI<int>(1,2,3);
BIGJ<int>(1,2,3);
BIHA<int>(1,2,3);
BIHB<int>(1,2,3);
BIHC<int>(1,2,3);
BIHD<int>(1,2,3);
BIHE<int>(1,2,3);
BIHF<int>(1,2,3);
BIHG<int>(1,2,3);
BIHH<int>(1,2,3);
BIHI<int>(1,2,3);
BIHJ<int>(1,2,3);
BIIA<int>(1,2,3);
BIIB<int>(1,2,3);
BIIC<int>(1,2,3);
BIID<int>(1,2,3);
BIIE<int>(1,2,3);
BIIF<int>(1,2,3);
BIIG<int>(1,2,3);
BIIH<int>(1,2,3);
BIII<int>(1,2,3);
BIIJ<int>(1,2,3);
BIJA<int>(1,2,3);
BIJB<int>(1,2,3);
BIJC<int>(1,2,3);
BIJD<int>(1,2,3);
BIJE<int>(1,2,3);
BIJF<int>(1,2,3);
BIJG<int>(1,2,3);
BIJH<int>(1,2,3);
BIJI<int>(1,2,3);
BIJJ<int>(1,2,3);
BJAA<int>(1,2,3);
BJAB<int>(1,2,3);
BJAC<int>(1,2,3);
BJAD<int>(1,2,3);
BJAE<int>(1,2,3);
BJAF<int>(1,2,3);
BJAG<int>(1,2,3);
BJAH<int>(1,2,3);
BJAI<int>(1,2,3);
BJAJ<int>(1,2,3);
BJBA<int>(1,2,3);
BJBB<int>(1,2,3);
BJBC<int>(1,2,3);
BJBD<int>(1,2,3);
BJBE<int>(1,2,3);
BJBF<int>(1,2,3);
BJBG<int>(1,2,3);
BJBH<int>(1,2,3);
BJBI<int>(1,2,3);
BJBJ<int>(1,2,3);
BJCA<int>(1,2,3);
BJCB<int>(1,2,3);
BJCC<int>(1,2,3);
BJCD<int>(1,2,3);
BJCE<int>(1,2,3);
BJCF<int>(1,2,3);
BJCG<int>(1,2,3);
BJCH<int>(1,2,3);
BJCI<int>(1,2,3);
BJCJ<int>(1,2,3);
BJDA<int>(1,2,3);
BJDB<int>(1,2,3);
BJDC<int>(1,2,3);
BJDD<int>(1,2,3);
BJDE<int>(1,2,3);
BJDF<int>(1,2,3);
BJDG<int>(1,2,3);
BJDH<int>(1,2,3);
BJDI<int>(1,2,3);
BJDJ<int>(1,2,3);
BJEA<int>(1,2,3);
BJEB<int>(1,2,3);
BJEC<int>(1,2,3);
BJED<int>(1,2,3);
BJEE<int>(1,2,3);
BJEF<int>(1,2,3);
BJEG<int>(1,2,3);
BJEH<int>(1,2,3);
BJEI<int>(1,2,3);
BJEJ<int>(1,2,3);
BJFA<int>(1,2,3);
BJFB<int>(1,2,3);
BJFC<int>(1,2,3);
BJFD<int>(1,2,3);
BJFE<int>(1,2,3);
BJFF<int>(1,2,3);
BJFG<int>(1,2,3);
BJFH<int>(1,2,3);
BJFI<int>(1,2,3);
BJFJ<int>(1,2,3);
BJGA<int>(1,2,3);
BJGB<int>(1,2,3);
BJGC<int>(1,2,3);
BJGD<int>(1,2,3);
BJGE<int>(1,2,3);
BJGF<int>(1,2,3);
BJGG<int>(1,2,3);
BJGH<int>(1,2,3);
BJGI<int>(1,2,3);
BJGJ<int>(1,2,3);
BJHA<int>(1,2,3);
BJHB<int>(1,2,3);
BJHC<int>(1,2,3);
BJHD<int>(1,2,3);
BJHE<int>(1,2,3);
BJHF<int>(1,2,3);
BJHG<int>(1,2,3);
BJHH<int>(1,2,3);
BJHI<int>(1,2,3);
BJHJ<int>(1,2,3);
BJIA<int>(1,2,3);
BJIB<int>(1,2,3);
BJIC<int>(1,2,3);
BJID<int>(1,2,3);
BJIE<int>(1,2,3);
BJIF<int>(1,2,3);
BJIG<int>(1,2,3);
BJIH<int>(1,2,3);
BJII<int>(1,2,3);
BJIJ<int>(1,2,3);
BJJA<int>(1,2,3);
BJJB<int>(1,2,3);
BJJC<int>(1,2,3);
BJJD<int>(1,2,3);
BJJE<int>(1,2,3);
BJJF<int>(1,2,3);
BJJG<int>(1,2,3);
BJJH<int>(1,2,3);
BJJI<int>(1,2,3);
BJJJ<int>(1,2,3);
CAAA<int>(1,2,3);
CAAB<int>(1,2,3);
CAAC<int>(1,2,3);
CAAD<int>(1,2,3);
CAAE<int>(1,2,3);
CAAF<int>(1,2,3);
CAAG<int>(1,2,3);
CAAH<int>(1,2,3);
CAAI<int>(1,2,3);
CAAJ<int>(1,2,3);
CABA<int>(1,2,3);
CABB<int>(1,2,3);
CABC<int>(1,2,3);
CABD<int>(1,2,3);
CABE<int>(1,2,3);
CABF<int>(1,2,3);
CABG<int>(1,2,3);
CABH<int>(1,2,3);
CABI<int>(1,2,3);
CABJ<int>(1,2,3);
CACA<int>(1,2,3);
CACB<int>(1,2,3);
CACC<int>(1,2,3);
CACD<int>(1,2,3);
CACE<int>(1,2,3);
CACF<int>(1,2,3);
CACG<int>(1,2,3);
CACH<int>(1,2,3);
CACI<int>(1,2,3);
CACJ<int>(1,2,3);
CADA<int>(1,2,3);
CADB<int>(1,2,3);
CADC<int>(1,2,3);
CADD<int>(1,2,3);
CADE<int>(1,2,3);
CADF<int>(1,2,3);
CADG<int>(1,2,3);
CADH<int>(1,2,3);
CADI<int>(1,2,3);
CADJ<int>(1,2,3);
CAEA<int>(1,2,3);
CAEB<int>(1,2,3);
CAEC<int>(1,2,3);
CAED<int>(1,2,3);
CAEE<int>(1,2,3);
CAEF<int>(1,2,3);
CAEG<int>(1,2,3);
CAEH<int>(1,2,3);
CAEI<int>(1,2,3);
CAEJ<int>(1,2,3);
CAFA<int>(1,2,3);
CAFB<int>(1,2,3);
CAFC<int>(1,2,3);
CAFD<int>(1,2,3);
CAFE<int>(1,2,3);
CAFF<int>(1,2,3);
CAFG<int>(1,2,3);
CAFH<int>(1,2,3);
CAFI<int>(1,2,3);
CAFJ<int>(1,2,3);
CAGA<int>(1,2,3);
CAGB<int>(1,2,3);
CAGC<int>(1,2,3);
CAGD<int>(1,2,3);
CAGE<int>(1,2,3);
CAGF<int>(1,2,3);
CAGG<int>(1,2,3);
CAGH<int>(1,2,3);
CAGI<int>(1,2,3);
CAGJ<int>(1,2,3);
CAHA<int>(1,2,3);
CAHB<int>(1,2,3);
CAHC<int>(1,2,3);
CAHD<int>(1,2,3);
CAHE<int>(1,2,3);
CAHF<int>(1,2,3);
CAHG<int>(1,2,3);
CAHH<int>(1,2,3);
CAHI<int>(1,2,3);
CAHJ<int>(1,2,3);
CAIA<int>(1,2,3);
CAIB<int>(1,2,3);
CAIC<int>(1,2,3);
CAID<int>(1,2,3);
CAIE<int>(1,2,3);
CAIF<int>(1,2,3);
CAIG<int>(1,2,3);
CAIH<int>(1,2,3);
CAII<int>(1,2,3);
CAIJ<int>(1,2,3);
CAJA<int>(1,2,3);
CAJB<int>(1,2,3);
CAJC<int>(1,2,3);
CAJD<int>(1,2,3);
CAJE<int>(1,2,3);
CAJF<int>(1,2,3);
CAJG<int>(1,2,3);
CAJH<int>(1,2,3);
CAJI<int>(1,2,3);
CAJJ<int>(1,2,3);
CBAA<int>(1,2,3);
CBAB<int>(1,2,3);
CBAC<int>(1,2,3);
CBAD<int>(1,2,3);
CBAE<int>(1,2,3);
CBAF<int>(1,2,3);
CBAG<int>(1,2,3);
CBAH<int>(1,2,3);
CBAI<int>(1,2,3);
CBAJ<int>(1,2,3);
CBBA<int>(1,2,3);
CBBB<int>(1,2,3);
CBBC<int>(1,2,3);
CBBD<int>(1,2,3);
CBBE<int>(1,2,3);
CBBF<int>(1,2,3);
CBBG<int>(1,2,3);
CBBH<int>(1,2,3);
CBBI<int>(1,2,3);
CBBJ<int>(1,2,3);
CBCA<int>(1,2,3);
CBCB<int>(1,2,3);
CBCC<int>(1,2,3);
CBCD<int>(1,2,3);
CBCE<int>(1,2,3);
CBCF<int>(1,2,3);
CBCG<int>(1,2,3);
CBCH<int>(1,2,3);
CBCI<int>(1,2,3);
CBCJ<int>(1,2,3);
CBDA<int>(1,2,3);
CBDB<int>(1,2,3);
CBDC<int>(1,2,3);
CBDD<int>(1,2,3);
CBDE<int>(1,2,3);
CBDF<int>(1,2,3);
CBDG<int>(1,2,3);
CBDH<int>(1,2,3);
CBDI<int>(1,2,3);
CBDJ<int>(1,2,3);
CBEA<int>(1,2,3);
CBEB<int>(1,2,3);
CBEC<int>(1,2,3);
CBED<int>(1,2,3);
CBEE<int>(1,2,3);
CBEF<int>(1,2,3);
CBEG<int>(1,2,3);
CBEH<int>(1,2,3);
CBEI<int>(1,2,3);
CBEJ<int>(1,2,3);
CBFA<int>(1,2,3);
CBFB<int>(1,2,3);
CBFC<int>(1,2,3);
CBFD<int>(1,2,3);
CBFE<int>(1,2,3);
CBFF<int>(1,2,3);
CBFG<int>(1,2,3);
CBFH<int>(1,2,3);
CBFI<int>(1,2,3);
CBFJ<int>(1,2,3);
CBGA<int>(1,2,3);
CBGB<int>(1,2,3);
CBGC<int>(1,2,3);
CBGD<int>(1,2,3);
CBGE<int>(1,2,3);
CBGF<int>(1,2,3);
CBGG<int>(1,2,3);
CBGH<int>(1,2,3);
CBGI<int>(1,2,3);
CBGJ<int>(1,2,3);
CBHA<int>(1,2,3);
CBHB<int>(1,2,3);
CBHC<int>(1,2,3);
CBHD<int>(1,2,3);
CBHE<int>(1,2,3);
CBHF<int>(1,2,3);
CBHG<int>(1,2,3);
CBHH<int>(1,2,3);
CBHI<int>(1,2,3);
CBHJ<int>(1,2,3);
CBIA<int>(1,2,3);
CBIB<int>(1,2,3);
CBIC<int>(1,2,3);
CBID<int>(1,2,3);
CBIE<int>(1,2,3);
CBIF<int>(1,2,3);
CBIG<int>(1,2,3);
CBIH<int>(1,2,3);
CBII<int>(1,2,3);
CBIJ<int>(1,2,3);
CBJA<int>(1,2,3);
CBJB<int>(1,2,3);
CBJC<int>(1,2,3);
CBJD<int>(1,2,3);
CBJE<int>(1,2,3);
CBJF<int>(1,2,3);
CBJG<int>(1,2,3);
CBJH<int>(1,2,3);
CBJI<int>(1,2,3);
CBJJ<int>(1,2,3);
CCAA<int>(1,2,3);
CCAB<int>(1,2,3);
CCAC<int>(1,2,3);
CCAD<int>(1,2,3);
CCAE<int>(1,2,3);
CCAF<int>(1,2,3);
CCAG<int>(1,2,3);
CCAH<int>(1,2,3);
CCAI<int>(1,2,3);
CCAJ<int>(1,2,3);
CCBA<int>(1,2,3);
CCBB<int>(1,2,3);
CCBC<int>(1,2,3);
CCBD<int>(1,2,3);
CCBE<int>(1,2,3);
CCBF<int>(1,2,3);
CCBG<int>(1,2,3);
CCBH<int>(1,2,3);
CCBI<int>(1,2,3);
CCBJ<int>(1,2,3);
CCCA<int>(1,2,3);
CCCB<int>(1,2,3);
CCCC<int>(1,2,3);
CCCD<int>(1,2,3);
CCCE<int>(1,2,3);
CCCF<int>(1,2,3);
CCCG<int>(1,2,3);
CCCH<int>(1,2,3);
CCCI<int>(1,2,3);
CCCJ<int>(1,2,3);
CCDA<int>(1,2,3);
CCDB<int>(1,2,3);
CCDC<int>(1,2,3);
CCDD<int>(1,2,3);
CCDE<int>(1,2,3);
CCDF<int>(1,2,3);
CCDG<int>(1,2,3);
CCDH<int>(1,2,3);
CCDI<int>(1,2,3);
CCDJ<int>(1,2,3);
CCEA<int>(1,2,3);
CCEB<int>(1,2,3);
CCEC<int>(1,2,3);
CCED<int>(1,2,3);
CCEE<int>(1,2,3);
CCEF<int>(1,2,3);
CCEG<int>(1,2,3);
CCEH<int>(1,2,3);
CCEI<int>(1,2,3);
CCEJ<int>(1,2,3);
CCFA<int>(1,2,3);
CCFB<int>(1,2,3);
CCFC<int>(1,2,3);
CCFD<int>(1,2,3);
CCFE<int>(1,2,3);
CCFF<int>(1,2,3);
CCFG<int>(1,2,3);
CCFH<int>(1,2,3);
CCFI<int>(1,2,3);
CCFJ<int>(1,2,3);
CCGA<int>(1,2,3);
CCGB<int>(1,2,3);
CCGC<int>(1,2,3);
CCGD<int>(1,2,3);
CCGE<int>(1,2,3);
CCGF<int>(1,2,3);
CCGG<int>(1,2,3);
CCGH<int>(1,2,3);
CCGI<int>(1,2,3);
CCGJ<int>(1,2,3);
CCHA<int>(1,2,3);
CCHB<int>(1,2,3);
CCHC<int>(1,2,3);
CCHD<int>(1,2,3);
CCHE<int>(1,2,3);
CCHF<int>(1,2,3);
CCHG<int>(1,2,3);
CCHH<int>(1,2,3);
CCHI<int>(1,2,3);
CCHJ<int>(1,2,3);
CCIA<int>(1,2,3);
CCIB<int>(1,2,3);
CCIC<int>(1,2,3);
CCID<int>(1,2,3);
CCIE<int>(1,2,3);
CCIF<int>(1,2,3);
CCIG<int>(1,2,3);
CCIH<int>(1,2,3);
CCII<int>(1,2,3);
CCIJ<int>(1,2,3);
CCJA<int>(1,2,3);
CCJB<int>(1,2,3);
CCJC<int>(1,2,3);
CCJD<int>(1,2,3);
CCJE<int>(1,2,3);
CCJF<int>(1,2,3);
CCJG<int>(1,2,3);
CCJH<int>(1,2,3);
CCJI<int>(1,2,3);
CCJJ<int>(1,2,3);
CDAA<int>(1,2,3);
CDAB<int>(1,2,3);
CDAC<int>(1,2,3);
CDAD<int>(1,2,3);
CDAE<int>(1,2,3);
CDAF<int>(1,2,3);
CDAG<int>(1,2,3);
CDAH<int>(1,2,3);
CDAI<int>(1,2,3);
CDAJ<int>(1,2,3);
CDBA<int>(1,2,3);
CDBB<int>(1,2,3);
CDBC<int>(1,2,3);
CDBD<int>(1,2,3);
CDBE<int>(1,2,3);
CDBF<int>(1,2,3);
CDBG<int>(1,2,3);
CDBH<int>(1,2,3);
CDBI<int>(1,2,3);
CDBJ<int>(1,2,3);
CDCA<int>(1,2,3);
CDCB<int>(1,2,3);
CDCC<int>(1,2,3);
CDCD<int>(1,2,3);
CDCE<int>(1,2,3);
CDCF<int>(1,2,3);
CDCG<int>(1,2,3);
CDCH<int>(1,2,3);
CDCI<int>(1,2,3);
CDCJ<int>(1,2,3);
CDDA<int>(1,2,3);
CDDB<int>(1,2,3);
CDDC<int>(1,2,3);
CDDD<int>(1,2,3);
CDDE<int>(1,2,3);
CDDF<int>(1,2,3);
CDDG<int>(1,2,3);
CDDH<int>(1,2,3);
CDDI<int>(1,2,3);
CDDJ<int>(1,2,3);
CDEA<int>(1,2,3);
CDEB<int>(1,2,3);
CDEC<int>(1,2,3);
CDED<int>(1,2,3);
CDEE<int>(1,2,3);
CDEF<int>(1,2,3);
CDEG<int>(1,2,3);
CDEH<int>(1,2,3);
CDEI<int>(1,2,3);
CDEJ<int>(1,2,3);
CDFA<int>(1,2,3);
CDFB<int>(1,2,3);
CDFC<int>(1,2,3);
CDFD<int>(1,2,3);
CDFE<int>(1,2,3);
CDFF<int>(1,2,3);
CDFG<int>(1,2,3);
CDFH<int>(1,2,3);
CDFI<int>(1,2,3);
CDFJ<int>(1,2,3);
CDGA<int>(1,2,3);
CDGB<int>(1,2,3);
CDGC<int>(1,2,3);
CDGD<int>(1,2,3);
CDGE<int>(1,2,3);
CDGF<int>(1,2,3);
CDGG<int>(1,2,3);
CDGH<int>(1,2,3);
CDGI<int>(1,2,3);
CDGJ<int>(1,2,3);
CDHA<int>(1,2,3);
CDHB<int>(1,2,3);
CDHC<int>(1,2,3);
CDHD<int>(1,2,3);
CDHE<int>(1,2,3);
CDHF<int>(1,2,3);
CDHG<int>(1,2,3);
CDHH<int>(1,2,3);
CDHI<int>(1,2,3);
CDHJ<int>(1,2,3);
CDIA<int>(1,2,3);
CDIB<int>(1,2,3);
CDIC<int>(1,2,3);
CDID<int>(1,2,3);
CDIE<int>(1,2,3);
CDIF<int>(1,2,3);
CDIG<int>(1,2,3);
CDIH<int>(1,2,3);
CDII<int>(1,2,3);
CDIJ<int>(1,2,3);
CDJA<int>(1,2,3);
CDJB<int>(1,2,3);
CDJC<int>(1,2,3);
CDJD<int>(1,2,3);
CDJE<int>(1,2,3);
CDJF<int>(1,2,3);
CDJG<int>(1,2,3);
CDJH<int>(1,2,3);
CDJI<int>(1,2,3);
CDJJ<int>(1,2,3);
CEAA<int>(1,2,3);
CEAB<int>(1,2,3);
CEAC<int>(1,2,3);
CEAD<int>(1,2,3);
CEAE<int>(1,2,3);
CEAF<int>(1,2,3);
CEAG<int>(1,2,3);
CEAH<int>(1,2,3);
CEAI<int>(1,2,3);
CEAJ<int>(1,2,3);
CEBA<int>(1,2,3);
CEBB<int>(1,2,3);
CEBC<int>(1,2,3);
CEBD<int>(1,2,3);
CEBE<int>(1,2,3);
CEBF<int>(1,2,3);
CEBG<int>(1,2,3);
CEBH<int>(1,2,3);
CEBI<int>(1,2,3);
CEBJ<int>(1,2,3);
CECA<int>(1,2,3);
CECB<int>(1,2,3);
CECC<int>(1,2,3);
CECD<int>(1,2,3);
CECE<int>(1,2,3);
CECF<int>(1,2,3);
CECG<int>(1,2,3);
CECH<int>(1,2,3);
CECI<int>(1,2,3);
CECJ<int>(1,2,3);
CEDA<int>(1,2,3);
CEDB<int>(1,2,3);
CEDC<int>(1,2,3);
CEDD<int>(1,2,3);
CEDE<int>(1,2,3);
CEDF<int>(1,2,3);
CEDG<int>(1,2,3);
CEDH<int>(1,2,3);
CEDI<int>(1,2,3);
CEDJ<int>(1,2,3);
CEEA<int>(1,2,3);
CEEB<int>(1,2,3);
CEEC<int>(1,2,3);
CEED<int>(1,2,3);
CEEE<int>(1,2,3);
CEEF<int>(1,2,3);
CEEG<int>(1,2,3);
CEEH<int>(1,2,3);
CEEI<int>(1,2,3);
CEEJ<int>(1,2,3);
CEFA<int>(1,2,3);
CEFB<int>(1,2,3);
CEFC<int>(1,2,3);
CEFD<int>(1,2,3);
CEFE<int>(1,2,3);
CEFF<int>(1,2,3);
CEFG<int>(1,2,3);
CEFH<int>(1,2,3);
CEFI<int>(1,2,3);
CEFJ<int>(1,2,3);
CEGA<int>(1,2,3);
CEGB<int>(1,2,3);
CEGC<int>(1,2,3);
CEGD<int>(1,2,3);
CEGE<int>(1,2,3);
CEGF<int>(1,2,3);
CEGG<int>(1,2,3);
CEGH<int>(1,2,3);
CEGI<int>(1,2,3);
CEGJ<int>(1,2,3);
CEHA<int>(1,2,3);
CEHB<int>(1,2,3);
CEHC<int>(1,2,3);
CEHD<int>(1,2,3);
CEHE<int>(1,2,3);
CEHF<int>(1,2,3);
CEHG<int>(1,2,3);
CEHH<int>(1,2,3);
CEHI<int>(1,2,3);
CEHJ<int>(1,2,3);
CEIA<int>(1,2,3);
CEIB<int>(1,2,3);
CEIC<int>(1,2,3);
CEID<int>(1,2,3);
CEIE<int>(1,2,3);
CEIF<int>(1,2,3);
CEIG<int>(1,2,3);
CEIH<int>(1,2,3);
CEII<int>(1,2,3);
CEIJ<int>(1,2,3);
CEJA<int>(1,2,3);
CEJB<int>(1,2,3);
CEJC<int>(1,2,3);
CEJD<int>(1,2,3);
CEJE<int>(1,2,3);
CEJF<int>(1,2,3);
CEJG<int>(1,2,3);
CEJH<int>(1,2,3);
CEJI<int>(1,2,3);
CEJJ<int>(1,2,3);
CFAA<int>(1,2,3);
CFAB<int>(1,2,3);
CFAC<int>(1,2,3);
CFAD<int>(1,2,3);
CFAE<int>(1,2,3);
CFAF<int>(1,2,3);
CFAG<int>(1,2,3);
CFAH<int>(1,2,3);
CFAI<int>(1,2,3);
CFAJ<int>(1,2,3);
CFBA<int>(1,2,3);
CFBB<int>(1,2,3);
CFBC<int>(1,2,3);
CFBD<int>(1,2,3);
CFBE<int>(1,2,3);
CFBF<int>(1,2,3);
CFBG<int>(1,2,3);
CFBH<int>(1,2,3);
CFBI<int>(1,2,3);
CFBJ<int>(1,2,3);
CFCA<int>(1,2,3);
CFCB<int>(1,2,3);
CFCC<int>(1,2,3);
CFCD<int>(1,2,3);
CFCE<int>(1,2,3);
CFCF<int>(1,2,3);
CFCG<int>(1,2,3);
CFCH<int>(1,2,3);
CFCI<int>(1,2,3);
CFCJ<int>(1,2,3);
CFDA<int>(1,2,3);
CFDB<int>(1,2,3);
CFDC<int>(1,2,3);
CFDD<int>(1,2,3);
CFDE<int>(1,2,3);
CFDF<int>(1,2,3);
CFDG<int>(1,2,3);
CFDH<int>(1,2,3);
CFDI<int>(1,2,3);
CFDJ<int>(1,2,3);
CFEA<int>(1,2,3);
CFEB<int>(1,2,3);
CFEC<int>(1,2,3);
CFED<int>(1,2,3);
CFEE<int>(1,2,3);
CFEF<int>(1,2,3);
CFEG<int>(1,2,3);
CFEH<int>(1,2,3);
CFEI<int>(1,2,3);
CFEJ<int>(1,2,3);
CFFA<int>(1,2,3);
CFFB<int>(1,2,3);
CFFC<int>(1,2,3);
CFFD<int>(1,2,3);
CFFE<int>(1,2,3);
CFFF<int>(1,2,3);
CFFG<int>(1,2,3);
CFFH<int>(1,2,3);
CFFI<int>(1,2,3);
CFFJ<int>(1,2,3);
CFGA<int>(1,2,3);
CFGB<int>(1,2,3);
CFGC<int>(1,2,3);
CFGD<int>(1,2,3);
CFGE<int>(1,2,3);
CFGF<int>(1,2,3);
CFGG<int>(1,2,3);
CFGH<int>(1,2,3);
CFGI<int>(1,2,3);
CFGJ<int>(1,2,3);
CFHA<int>(1,2,3);
CFHB<int>(1,2,3);
CFHC<int>(1,2,3);
CFHD<int>(1,2,3);
CFHE<int>(1,2,3);
CFHF<int>(1,2,3);
CFHG<int>(1,2,3);
CFHH<int>(1,2,3);
CFHI<int>(1,2,3);
CFHJ<int>(1,2,3);
CFIA<int>(1,2,3);
CFIB<int>(1,2,3);
CFIC<int>(1,2,3);
CFID<int>(1,2,3);
CFIE<int>(1,2,3);
CFIF<int>(1,2,3);
CFIG<int>(1,2,3);
CFIH<int>(1,2,3);
CFII<int>(1,2,3);
CFIJ<int>(1,2,3);
CFJA<int>(1,2,3);
CFJB<int>(1,2,3);
CFJC<int>(1,2,3);
CFJD<int>(1,2,3);
CFJE<int>(1,2,3);
CFJF<int>(1,2,3);
CFJG<int>(1,2,3);
CFJH<int>(1,2,3);
CFJI<int>(1,2,3);
CFJJ<int>(1,2,3);
CGAA<int>(1,2,3);
CGAB<int>(1,2,3);
CGAC<int>(1,2,3);
CGAD<int>(1,2,3);
CGAE<int>(1,2,3);
CGAF<int>(1,2,3);
CGAG<int>(1,2,3);
CGAH<int>(1,2,3);
CGAI<int>(1,2,3);
CGAJ<int>(1,2,3);
CGBA<int>(1,2,3);
CGBB<int>(1,2,3);
CGBC<int>(1,2,3);
CGBD<int>(1,2,3);
CGBE<int>(1,2,3);
CGBF<int>(1,2,3);
CGBG<int>(1,2,3);
CGBH<int>(1,2,3);
CGBI<int>(1,2,3);
CGBJ<int>(1,2,3);
CGCA<int>(1,2,3);
CGCB<int>(1,2,3);
CGCC<int>(1,2,3);
CGCD<int>(1,2,3);
CGCE<int>(1,2,3);
CGCF<int>(1,2,3);
CGCG<int>(1,2,3);
CGCH<int>(1,2,3);
CGCI<int>(1,2,3);
CGCJ<int>(1,2,3);
CGDA<int>(1,2,3);
CGDB<int>(1,2,3);
CGDC<int>(1,2,3);
CGDD<int>(1,2,3);
CGDE<int>(1,2,3);
CGDF<int>(1,2,3);
CGDG<int>(1,2,3);
CGDH<int>(1,2,3);
CGDI<int>(1,2,3);
CGDJ<int>(1,2,3);
CGEA<int>(1,2,3);
CGEB<int>(1,2,3);
CGEC<int>(1,2,3);
CGED<int>(1,2,3);
CGEE<int>(1,2,3);
CGEF<int>(1,2,3);
CGEG<int>(1,2,3);
CGEH<int>(1,2,3);
CGEI<int>(1,2,3);
CGEJ<int>(1,2,3);
CGFA<int>(1,2,3);
CGFB<int>(1,2,3);
CGFC<int>(1,2,3);
CGFD<int>(1,2,3);
CGFE<int>(1,2,3);
CGFF<int>(1,2,3);
CGFG<int>(1,2,3);
CGFH<int>(1,2,3);
CGFI<int>(1,2,3);
CGFJ<int>(1,2,3);
CGGA<int>(1,2,3);
CGGB<int>(1,2,3);
CGGC<int>(1,2,3);
CGGD<int>(1,2,3);
CGGE<int>(1,2,3);
CGGF<int>(1,2,3);
CGGG<int>(1,2,3);
CGGH<int>(1,2,3);
CGGI<int>(1,2,3);
CGGJ<int>(1,2,3);
CGHA<int>(1,2,3);
CGHB<int>(1,2,3);
CGHC<int>(1,2,3);
CGHD<int>(1,2,3);
CGHE<int>(1,2,3);
CGHF<int>(1,2,3);
CGHG<int>(1,2,3);
CGHH<int>(1,2,3);
CGHI<int>(1,2,3);
CGHJ<int>(1,2,3);
CGIA<int>(1,2,3);
CGIB<int>(1,2,3);
CGIC<int>(1,2,3);
CGID<int>(1,2,3);
CGIE<int>(1,2,3);
CGIF<int>(1,2,3);
CGIG<int>(1,2,3);
CGIH<int>(1,2,3);
CGII<int>(1,2,3);
CGIJ<int>(1,2,3);
CGJA<int>(1,2,3);
CGJB<int>(1,2,3);
CGJC<int>(1,2,3);
CGJD<int>(1,2,3);
CGJE<int>(1,2,3);
CGJF<int>(1,2,3);
CGJG<int>(1,2,3);
CGJH<int>(1,2,3);
CGJI<int>(1,2,3);
CGJJ<int>(1,2,3);
CHAA<int>(1,2,3);
CHAB<int>(1,2,3);
CHAC<int>(1,2,3);
CHAD<int>(1,2,3);
CHAE<int>(1,2,3);
CHAF<int>(1,2,3);
CHAG<int>(1,2,3);
CHAH<int>(1,2,3);
CHAI<int>(1,2,3);
CHAJ<int>(1,2,3);
CHBA<int>(1,2,3);
CHBB<int>(1,2,3);
CHBC<int>(1,2,3);
CHBD<int>(1,2,3);
CHBE<int>(1,2,3);
CHBF<int>(1,2,3);
CHBG<int>(1,2,3);
CHBH<int>(1,2,3);
CHBI<int>(1,2,3);
CHBJ<int>(1,2,3);
CHCA<int>(1,2,3);
CHCB<int>(1,2,3);
CHCC<int>(1,2,3);
CHCD<int>(1,2,3);
CHCE<int>(1,2,3);
CHCF<int>(1,2,3);
CHCG<int>(1,2,3);
CHCH<int>(1,2,3);
CHCI<int>(1,2,3);
CHCJ<int>(1,2,3);
CHDA<int>(1,2,3);
CHDB<int>(1,2,3);
CHDC<int>(1,2,3);
CHDD<int>(1,2,3);
CHDE<int>(1,2,3);
CHDF<int>(1,2,3);
CHDG<int>(1,2,3);
CHDH<int>(1,2,3);
CHDI<int>(1,2,3);
CHDJ<int>(1,2,3);
CHEA<int>(1,2,3);
CHEB<int>(1,2,3);
CHEC<int>(1,2,3);
CHED<int>(1,2,3);
CHEE<int>(1,2,3);
CHEF<int>(1,2,3);
CHEG<int>(1,2,3);
CHEH<int>(1,2,3);
CHEI<int>(1,2,3);
CHEJ<int>(1,2,3);
CHFA<int>(1,2,3);
CHFB<int>(1,2,3);
CHFC<int>(1,2,3);
CHFD<int>(1,2,3);
CHFE<int>(1,2,3);
CHFF<int>(1,2,3);
CHFG<int>(1,2,3);
CHFH<int>(1,2,3);
CHFI<int>(1,2,3);
CHFJ<int>(1,2,3);
CHGA<int>(1,2,3);
CHGB<int>(1,2,3);
CHGC<int>(1,2,3);
CHGD<int>(1,2,3);
CHGE<int>(1,2,3);
CHGF<int>(1,2,3);
CHGG<int>(1,2,3);
CHGH<int>(1,2,3);
CHGI<int>(1,2,3);
CHGJ<int>(1,2,3);
CHHA<int>(1,2,3);
CHHB<int>(1,2,3);
CHHC<int>(1,2,3);
CHHD<int>(1,2,3);
CHHE<int>(1,2,3);
CHHF<int>(1,2,3);
CHHG<int>(1,2,3);
CHHH<int>(1,2,3);
CHHI<int>(1,2,3);
CHHJ<int>(1,2,3);
CHIA<int>(1,2,3);
CHIB<int>(1,2,3);
CHIC<int>(1,2,3);
CHID<int>(1,2,3);
CHIE<int>(1,2,3);
CHIF<int>(1,2,3);
CHIG<int>(1,2,3);
CHIH<int>(1,2,3);
CHII<int>(1,2,3);
CHIJ<int>(1,2,3);
CHJA<int>(1,2,3);
CHJB<int>(1,2,3);
CHJC<int>(1,2,3);
CHJD<int>(1,2,3);
CHJE<int>(1,2,3);
CHJF<int>(1,2,3);
CHJG<int>(1,2,3);
CHJH<int>(1,2,3);
CHJI<int>(1,2,3);
CHJJ<int>(1,2,3);
CIAA<int>(1,2,3);
CIAB<int>(1,2,3);
CIAC<int>(1,2,3);
CIAD<int>(1,2,3);
CIAE<int>(1,2,3);
CIAF<int>(1,2,3);
CIAG<int>(1,2,3);
CIAH<int>(1,2,3);
CIAI<int>(1,2,3);
CIAJ<int>(1,2,3);
CIBA<int>(1,2,3);
CIBB<int>(1,2,3);
CIBC<int>(1,2,3);
CIBD<int>(1,2,3);
CIBE<int>(1,2,3);
CIBF<int>(1,2,3);
CIBG<int>(1,2,3);
CIBH<int>(1,2,3);
CIBI<int>(1,2,3);
CIBJ<int>(1,2,3);
CICA<int>(1,2,3);
CICB<int>(1,2,3);
CICC<int>(1,2,3);
CICD<int>(1,2,3);
CICE<int>(1,2,3);
CICF<int>(1,2,3);
CICG<int>(1,2,3);
CICH<int>(1,2,3);
CICI<int>(1,2,3);
CICJ<int>(1,2,3);
CIDA<int>(1,2,3);
CIDB<int>(1,2,3);
CIDC<int>(1,2,3);
CIDD<int>(1,2,3);
CIDE<int>(1,2,3);
CIDF<int>(1,2,3);
CIDG<int>(1,2,3);
CIDH<int>(1,2,3);
CIDI<int>(1,2,3);
CIDJ<int>(1,2,3);
CIEA<int>(1,2,3);
CIEB<int>(1,2,3);
CIEC<int>(1,2,3);
CIED<int>(1,2,3);
CIEE<int>(1,2,3);
CIEF<int>(1,2,3);
CIEG<int>(1,2,3);
CIEH<int>(1,2,3);
CIEI<int>(1,2,3);
CIEJ<int>(1,2,3);
CIFA<int>(1,2,3);
CIFB<int>(1,2,3);
CIFC<int>(1,2,3);
CIFD<int>(1,2,3);
CIFE<int>(1,2,3);
CIFF<int>(1,2,3);
CIFG<int>(1,2,3);
CIFH<int>(1,2,3);
CIFI<int>(1,2,3);
CIFJ<int>(1,2,3);
CIGA<int>(1,2,3);
CIGB<int>(1,2,3);
CIGC<int>(1,2,3);
CIGD<int>(1,2,3);
CIGE<int>(1,2,3);
CIGF<int>(1,2,3);
CIGG<int>(1,2,3);
CIGH<int>(1,2,3);
CIGI<int>(1,2,3);
CIGJ<int>(1,2,3);
CIHA<int>(1,2,3);
CIHB<int>(1,2,3);
CIHC<int>(1,2,3);
CIHD<int>(1,2,3);
CIHE<int>(1,2,3);
CIHF<int>(1,2,3);
CIHG<int>(1,2,3);
CIHH<int>(1,2,3);
CIHI<int>(1,2,3);
CIHJ<int>(1,2,3);
CIIA<int>(1,2,3);
CIIB<int>(1,2,3);
CIIC<int>(1,2,3);
CIID<int>(1,2,3);
CIIE<int>(1,2,3);
CIIF<int>(1,2,3);
CIIG<int>(1,2,3);
CIIH<int>(1,2,3);
CIII<int>(1,2,3);
CIIJ<int>(1,2,3);
CIJA<int>(1,2,3);
CIJB<int>(1,2,3);
CIJC<int>(1,2,3);
CIJD<int>(1,2,3);
CIJE<int>(1,2,3);
CIJF<int>(1,2,3);
CIJG<int>(1,2,3);
CIJH<int>(1,2,3);
CIJI<int>(1,2,3);
CIJJ<int>(1,2,3);
CJAA<int>(1,2,3);
CJAB<int>(1,2,3);
CJAC<int>(1,2,3);
CJAD<int>(1,2,3);
CJAE<int>(1,2,3);
CJAF<int>(1,2,3);
CJAG<int>(1,2,3);
CJAH<int>(1,2,3);
CJAI<int>(1,2,3);
CJAJ<int>(1,2,3);
CJBA<int>(1,2,3);
CJBB<int>(1,2,3);
CJBC<int>(1,2,3);
CJBD<int>(1,2,3);
CJBE<int>(1,2,3);
CJBF<int>(1,2,3);
CJBG<int>(1,2,3);
CJBH<int>(1,2,3);
CJBI<int>(1,2,3);
CJBJ<int>(1,2,3);
CJCA<int>(1,2,3);
CJCB<int>(1,2,3);
CJCC<int>(1,2,3);
CJCD<int>(1,2,3);
CJCE<int>(1,2,3);
CJCF<int>(1,2,3);
CJCG<int>(1,2,3);
CJCH<int>(1,2,3);
CJCI<int>(1,2,3);
CJCJ<int>(1,2,3);
CJDA<int>(1,2,3);
CJDB<int>(1,2,3);
CJDC<int>(1,2,3);
CJDD<int>(1,2,3);
CJDE<int>(1,2,3);
CJDF<int>(1,2,3);
CJDG<int>(1,2,3);
CJDH<int>(1,2,3);
CJDI<int>(1,2,3);
CJDJ<int>(1,2,3);
CJEA<int>(1,2,3);
CJEB<int>(1,2,3);
CJEC<int>(1,2,3);
CJED<int>(1,2,3);
CJEE<int>(1,2,3);
CJEF<int>(1,2,3);
CJEG<int>(1,2,3);
CJEH<int>(1,2,3);
CJEI<int>(1,2,3);
CJEJ<int>(1,2,3);
CJFA<int>(1,2,3);
CJFB<int>(1,2,3);
CJFC<int>(1,2,3);
CJFD<int>(1,2,3);
CJFE<int>(1,2,3);
CJFF<int>(1,2,3);
CJFG<int>(1,2,3);
CJFH<int>(1,2,3);
CJFI<int>(1,2,3);
CJFJ<int>(1,2,3);
CJGA<int>(1,2,3);
CJGB<int>(1,2,3);
CJGC<int>(1,2,3);
CJGD<int>(1,2,3);
CJGE<int>(1,2,3);
CJGF<int>(1,2,3);
CJGG<int>(1,2,3);
CJGH<int>(1,2,3);
CJGI<int>(1,2,3);
CJGJ<int>(1,2,3);
CJHA<int>(1,2,3);
CJHB<int>(1,2,3);
CJHC<int>(1,2,3);
CJHD<int>(1,2,3);
CJHE<int>(1,2,3);
CJHF<int>(1,2,3);
CJHG<int>(1,2,3);
CJHH<int>(1,2,3);
CJHI<int>(1,2,3);
CJHJ<int>(1,2,3);
CJIA<int>(1,2,3);
CJIB<int>(1,2,3);
CJIC<int>(1,2,3);
CJID<int>(1,2,3);
CJIE<int>(1,2,3);
CJIF<int>(1,2,3);
CJIG<int>(1,2,3);
CJIH<int>(1,2,3);
CJII<int>(1,2,3);
CJIJ<int>(1,2,3);
CJJA<int>(1,2,3);
CJJB<int>(1,2,3);
CJJC<int>(1,2,3);
CJJD<int>(1,2,3);
CJJE<int>(1,2,3);
CJJF<int>(1,2,3);
CJJG<int>(1,2,3);
CJJH<int>(1,2,3);
CJJI<int>(1,2,3);
CJJJ<int>(1,2,3);
DAAA<int>(1,2,3);
DAAB<int>(1,2,3);
DAAC<int>(1,2,3);
DAAD<int>(1,2,3);
DAAE<int>(1,2,3);
DAAF<int>(1,2,3);
DAAG<int>(1,2,3);
DAAH<int>(1,2,3);
DAAI<int>(1,2,3);
DAAJ<int>(1,2,3);
DABA<int>(1,2,3);
DABB<int>(1,2,3);
DABC<int>(1,2,3);
DABD<int>(1,2,3);
DABE<int>(1,2,3);
DABF<int>(1,2,3);
DABG<int>(1,2,3);
DABH<int>(1,2,3);
DABI<int>(1,2,3);
DABJ<int>(1,2,3);
DACA<int>(1,2,3);
DACB<int>(1,2,3);
DACC<int>(1,2,3);
DACD<int>(1,2,3);
DACE<int>(1,2,3);
DACF<int>(1,2,3);
DACG<int>(1,2,3);
DACH<int>(1,2,3);
DACI<int>(1,2,3);
DACJ<int>(1,2,3);
DADA<int>(1,2,3);
DADB<int>(1,2,3);
DADC<int>(1,2,3);
DADD<int>(1,2,3);
DADE<int>(1,2,3);
DADF<int>(1,2,3);
DADG<int>(1,2,3);
DADH<int>(1,2,3);
DADI<int>(1,2,3);
DADJ<int>(1,2,3);
DAEA<int>(1,2,3);
DAEB<int>(1,2,3);
DAEC<int>(1,2,3);
DAED<int>(1,2,3);
DAEE<int>(1,2,3);
DAEF<int>(1,2,3);
DAEG<int>(1,2,3);
DAEH<int>(1,2,3);
DAEI<int>(1,2,3);
DAEJ<int>(1,2,3);
DAFA<int>(1,2,3);
DAFB<int>(1,2,3);
DAFC<int>(1,2,3);
DAFD<int>(1,2,3);
DAFE<int>(1,2,3);
DAFF<int>(1,2,3);
DAFG<int>(1,2,3);
DAFH<int>(1,2,3);
DAFI<int>(1,2,3);
DAFJ<int>(1,2,3);
DAGA<int>(1,2,3);
DAGB<int>(1,2,3);
DAGC<int>(1,2,3);
DAGD<int>(1,2,3);
DAGE<int>(1,2,3);
DAGF<int>(1,2,3);
DAGG<int>(1,2,3);
DAGH<int>(1,2,3);
DAGI<int>(1,2,3);
DAGJ<int>(1,2,3);
DAHA<int>(1,2,3);
DAHB<int>(1,2,3);
DAHC<int>(1,2,3);
DAHD<int>(1,2,3);
DAHE<int>(1,2,3);
DAHF<int>(1,2,3);
DAHG<int>(1,2,3);
DAHH<int>(1,2,3);
DAHI<int>(1,2,3);
DAHJ<int>(1,2,3);
DAIA<int>(1,2,3);
DAIB<int>(1,2,3);
DAIC<int>(1,2,3);
DAID<int>(1,2,3);
DAIE<int>(1,2,3);
DAIF<int>(1,2,3);
DAIG<int>(1,2,3);
DAIH<int>(1,2,3);
DAII<int>(1,2,3);
DAIJ<int>(1,2,3);
DAJA<int>(1,2,3);
DAJB<int>(1,2,3);
DAJC<int>(1,2,3);
DAJD<int>(1,2,3);
DAJE<int>(1,2,3);
DAJF<int>(1,2,3);
DAJG<int>(1,2,3);
DAJH<int>(1,2,3);
DAJI<int>(1,2,3);
DAJJ<int>(1,2,3);
DBAA<int>(1,2,3);
DBAB<int>(1,2,3);
DBAC<int>(1,2,3);
DBAD<int>(1,2,3);
DBAE<int>(1,2,3);
DBAF<int>(1,2,3);
DBAG<int>(1,2,3);
DBAH<int>(1,2,3);
DBAI<int>(1,2,3);
DBAJ<int>(1,2,3);
DBBA<int>(1,2,3);
DBBB<int>(1,2,3);
DBBC<int>(1,2,3);
DBBD<int>(1,2,3);
DBBE<int>(1,2,3);
DBBF<int>(1,2,3);
DBBG<int>(1,2,3);
DBBH<int>(1,2,3);
DBBI<int>(1,2,3);
DBBJ<int>(1,2,3);
DBCA<int>(1,2,3);
DBCB<int>(1,2,3);
DBCC<int>(1,2,3);
DBCD<int>(1,2,3);
DBCE<int>(1,2,3);
DBCF<int>(1,2,3);
DBCG<int>(1,2,3);
DBCH<int>(1,2,3);
DBCI<int>(1,2,3);
DBCJ<int>(1,2,3);
DBDA<int>(1,2,3);
DBDB<int>(1,2,3);
DBDC<int>(1,2,3);
DBDD<int>(1,2,3);
DBDE<int>(1,2,3);
DBDF<int>(1,2,3);
DBDG<int>(1,2,3);
DBDH<int>(1,2,3);
DBDI<int>(1,2,3);
DBDJ<int>(1,2,3);
DBEA<int>(1,2,3);
DBEB<int>(1,2,3);
DBEC<int>(1,2,3);
DBED<int>(1,2,3);
DBEE<int>(1,2,3);
DBEF<int>(1,2,3);
DBEG<int>(1,2,3);
DBEH<int>(1,2,3);
DBEI<int>(1,2,3);
DBEJ<int>(1,2,3);
DBFA<int>(1,2,3);
DBFB<int>(1,2,3);
DBFC<int>(1,2,3);
DBFD<int>(1,2,3);
DBFE<int>(1,2,3);
DBFF<int>(1,2,3);
DBFG<int>(1,2,3);
DBFH<int>(1,2,3);
DBFI<int>(1,2,3);
DBFJ<int>(1,2,3);
DBGA<int>(1,2,3);
DBGB<int>(1,2,3);
DBGC<int>(1,2,3);
DBGD<int>(1,2,3);
DBGE<int>(1,2,3);
DBGF<int>(1,2,3);
DBGG<int>(1,2,3);
DBGH<int>(1,2,3);
DBGI<int>(1,2,3);
DBGJ<int>(1,2,3);
DBHA<int>(1,2,3);
DBHB<int>(1,2,3);
DBHC<int>(1,2,3);
DBHD<int>(1,2,3);
DBHE<int>(1,2,3);
DBHF<int>(1,2,3);
DBHG<int>(1,2,3);
DBHH<int>(1,2,3);
DBHI<int>(1,2,3);
DBHJ<int>(1,2,3);
DBIA<int>(1,2,3);
DBIB<int>(1,2,3);
DBIC<int>(1,2,3);
DBID<int>(1,2,3);
DBIE<int>(1,2,3);
DBIF<int>(1,2,3);
DBIG<int>(1,2,3);
DBIH<int>(1,2,3);
DBII<int>(1,2,3);
DBIJ<int>(1,2,3);
DBJA<int>(1,2,3);
DBJB<int>(1,2,3);
DBJC<int>(1,2,3);
DBJD<int>(1,2,3);
DBJE<int>(1,2,3);
DBJF<int>(1,2,3);
DBJG<int>(1,2,3);
DBJH<int>(1,2,3);
DBJI<int>(1,2,3);
DBJJ<int>(1,2,3);
DCAA<int>(1,2,3);
DCAB<int>(1,2,3);
DCAC<int>(1,2,3);
DCAD<int>(1,2,3);
DCAE<int>(1,2,3);
DCAF<int>(1,2,3);
DCAG<int>(1,2,3);
DCAH<int>(1,2,3);
DCAI<int>(1,2,3);
DCAJ<int>(1,2,3);
DCBA<int>(1,2,3);
DCBB<int>(1,2,3);
DCBC<int>(1,2,3);
DCBD<int>(1,2,3);
DCBE<int>(1,2,3);
DCBF<int>(1,2,3);
DCBG<int>(1,2,3);
DCBH<int>(1,2,3);
DCBI<int>(1,2,3);
DCBJ<int>(1,2,3);
DCCA<int>(1,2,3);
DCCB<int>(1,2,3);
DCCC<int>(1,2,3);
DCCD<int>(1,2,3);
DCCE<int>(1,2,3);
DCCF<int>(1,2,3);
DCCG<int>(1,2,3);
DCCH<int>(1,2,3);
DCCI<int>(1,2,3);
DCCJ<int>(1,2,3);
DCDA<int>(1,2,3);
DCDB<int>(1,2,3);
DCDC<int>(1,2,3);
DCDD<int>(1,2,3);
DCDE<int>(1,2,3);
DCDF<int>(1,2,3);
DCDG<int>(1,2,3);
DCDH<int>(1,2,3);
DCDI<int>(1,2,3);
DCDJ<int>(1,2,3);
DCEA<int>(1,2,3);
DCEB<int>(1,2,3);
DCEC<int>(1,2,3);
DCED<int>(1,2,3);
DCEE<int>(1,2,3);
DCEF<int>(1,2,3);
DCEG<int>(1,2,3);
DCEH<int>(1,2,3);
DCEI<int>(1,2,3);
DCEJ<int>(1,2,3);
DCFA<int>(1,2,3);
DCFB<int>(1,2,3);
DCFC<int>(1,2,3);
DCFD<int>(1,2,3);
DCFE<int>(1,2,3);
DCFF<int>(1,2,3);
DCFG<int>(1,2,3);
DCFH<int>(1,2,3);
DCFI<int>(1,2,3);
DCFJ<int>(1,2,3);
DCGA<int>(1,2,3);
DCGB<int>(1,2,3);
DCGC<int>(1,2,3);
DCGD<int>(1,2,3);
DCGE<int>(1,2,3);
DCGF<int>(1,2,3);
DCGG<int>(1,2,3);
DCGH<int>(1,2,3);
DCGI<int>(1,2,3);
DCGJ<int>(1,2,3);
DCHA<int>(1,2,3);
DCHB<int>(1,2,3);
DCHC<int>(1,2,3);
DCHD<int>(1,2,3);
DCHE<int>(1,2,3);
DCHF<int>(1,2,3);
DCHG<int>(1,2,3);
DCHH<int>(1,2,3);
DCHI<int>(1,2,3);
DCHJ<int>(1,2,3);
DCIA<int>(1,2,3);
DCIB<int>(1,2,3);
DCIC<int>(1,2,3);
DCID<int>(1,2,3);
DCIE<int>(1,2,3);
DCIF<int>(1,2,3);
DCIG<int>(1,2,3);
DCIH<int>(1,2,3);
DCII<int>(1,2,3);
DCIJ<int>(1,2,3);
DCJA<int>(1,2,3);
DCJB<int>(1,2,3);
DCJC<int>(1,2,3);
DCJD<int>(1,2,3);
DCJE<int>(1,2,3);
DCJF<int>(1,2,3);
DCJG<int>(1,2,3);
DCJH<int>(1,2,3);
DCJI<int>(1,2,3);
DCJJ<int>(1,2,3);
DDAA<int>(1,2,3);
DDAB<int>(1,2,3);
DDAC<int>(1,2,3);
DDAD<int>(1,2,3);
DDAE<int>(1,2,3);
DDAF<int>(1,2,3);
DDAG<int>(1,2,3);
DDAH<int>(1,2,3);
DDAI<int>(1,2,3);
DDAJ<int>(1,2,3);
DDBA<int>(1,2,3);
DDBB<int>(1,2,3);
DDBC<int>(1,2,3);
DDBD<int>(1,2,3);
DDBE<int>(1,2,3);
DDBF<int>(1,2,3);
DDBG<int>(1,2,3);
DDBH<int>(1,2,3);
DDBI<int>(1,2,3);
DDBJ<int>(1,2,3);
DDCA<int>(1,2,3);
DDCB<int>(1,2,3);
DDCC<int>(1,2,3);
DDCD<int>(1,2,3);
DDCE<int>(1,2,3);
DDCF<int>(1,2,3);
DDCG<int>(1,2,3);
DDCH<int>(1,2,3);
DDCI<int>(1,2,3);
DDCJ<int>(1,2,3);
DDDA<int>(1,2,3);
DDDB<int>(1,2,3);
DDDC<int>(1,2,3);
DDDD<int>(1,2,3);
DDDE<int>(1,2,3);
DDDF<int>(1,2,3);
DDDG<int>(1,2,3);
DDDH<int>(1,2,3);
DDDI<int>(1,2,3);
DDDJ<int>(1,2,3);
DDEA<int>(1,2,3);
DDEB<int>(1,2,3);
DDEC<int>(1,2,3);
DDED<int>(1,2,3);
DDEE<int>(1,2,3);
DDEF<int>(1,2,3);
DDEG<int>(1,2,3);
DDEH<int>(1,2,3);
DDEI<int>(1,2,3);
DDEJ<int>(1,2,3);
DDFA<int>(1,2,3);
DDFB<int>(1,2,3);
DDFC<int>(1,2,3);
DDFD<int>(1,2,3);
DDFE<int>(1,2,3);
DDFF<int>(1,2,3);
DDFG<int>(1,2,3);
DDFH<int>(1,2,3);
DDFI<int>(1,2,3);
DDFJ<int>(1,2,3);
DDGA<int>(1,2,3);
DDGB<int>(1,2,3);
DDGC<int>(1,2,3);
DDGD<int>(1,2,3);
DDGE<int>(1,2,3);
DDGF<int>(1,2,3);
DDGG<int>(1,2,3);
DDGH<int>(1,2,3);
DDGI<int>(1,2,3);
DDGJ<int>(1,2,3);
DDHA<int>(1,2,3);
DDHB<int>(1,2,3);
DDHC<int>(1,2,3);
DDHD<int>(1,2,3);
DDHE<int>(1,2,3);
DDHF<int>(1,2,3);
DDHG<int>(1,2,3);
DDHH<int>(1,2,3);
DDHI<int>(1,2,3);
DDHJ<int>(1,2,3);
DDIA<int>(1,2,3);
DDIB<int>(1,2,3);
DDIC<int>(1,2,3);
DDID<int>(1,2,3);
DDIE<int>(1,2,3);
DDIF<int>(1,2,3);
DDIG<int>(1,2,3);
DDIH<int>(1,2,3);
DDII<int>(1,2,3);
DDIJ<int>(1,2,3);
DDJA<int>(1,2,3);
DDJB<int>(1,2,3);
DDJC<int>(1,2,3);
DDJD<int>(1,2,3);
DDJE<int>(1,2,3);
DDJF<int>(1,2,3);
DDJG<int>(1,2,3);
DDJH<int>(1,2,3);
DDJI<int>(1,2,3);
DDJJ<int>(1,2,3);
DEAA<int>(1,2,3);
DEAB<int>(1,2,3);
DEAC<int>(1,2,3);
DEAD<int>(1,2,3);
DEAE<int>(1,2,3);
DEAF<int>(1,2,3);
DEAG<int>(1,2,3);
DEAH<int>(1,2,3);
DEAI<int>(1,2,3);
DEAJ<int>(1,2,3);
DEBA<int>(1,2,3);
DEBB<int>(1,2,3);
DEBC<int>(1,2,3);
DEBD<int>(1,2,3);
DEBE<int>(1,2,3);
DEBF<int>(1,2,3);
DEBG<int>(1,2,3);
DEBH<int>(1,2,3);
DEBI<int>(1,2,3);
DEBJ<int>(1,2,3);
DECA<int>(1,2,3);
DECB<int>(1,2,3);
DECC<int>(1,2,3);
DECD<int>(1,2,3);
DECE<int>(1,2,3);
DECF<int>(1,2,3);
DECG<int>(1,2,3);
DECH<int>(1,2,3);
DECI<int>(1,2,3);
DECJ<int>(1,2,3);
DEDA<int>(1,2,3);
DEDB<int>(1,2,3);
DEDC<int>(1,2,3);
DEDD<int>(1,2,3);
DEDE<int>(1,2,3);
DEDF<int>(1,2,3);
DEDG<int>(1,2,3);
DEDH<int>(1,2,3);
DEDI<int>(1,2,3);
DEDJ<int>(1,2,3);
DEEA<int>(1,2,3);
DEEB<int>(1,2,3);
DEEC<int>(1,2,3);
DEED<int>(1,2,3);
DEEE<int>(1,2,3);
DEEF<int>(1,2,3);
DEEG<int>(1,2,3);
DEEH<int>(1,2,3);
DEEI<int>(1,2,3);
DEEJ<int>(1,2,3);
DEFA<int>(1,2,3);
DEFB<int>(1,2,3);
DEFC<int>(1,2,3);
DEFD<int>(1,2,3);
DEFE<int>(1,2,3);
DEFF<int>(1,2,3);
DEFG<int>(1,2,3);
DEFH<int>(1,2,3);
DEFI<int>(1,2,3);
DEFJ<int>(1,2,3);
DEGA<int>(1,2,3);
DEGB<int>(1,2,3);
DEGC<int>(1,2,3);
DEGD<int>(1,2,3);
DEGE<int>(1,2,3);
DEGF<int>(1,2,3);
DEGG<int>(1,2,3);
DEGH<int>(1,2,3);
DEGI<int>(1,2,3);
DEGJ<int>(1,2,3);
DEHA<int>(1,2,3);
DEHB<int>(1,2,3);
DEHC<int>(1,2,3);
DEHD<int>(1,2,3);
DEHE<int>(1,2,3);
DEHF<int>(1,2,3);
DEHG<int>(1,2,3);
DEHH<int>(1,2,3);
DEHI<int>(1,2,3);
DEHJ<int>(1,2,3);
DEIA<int>(1,2,3);
DEIB<int>(1,2,3);
DEIC<int>(1,2,3);
DEID<int>(1,2,3);
DEIE<int>(1,2,3);
DEIF<int>(1,2,3);
DEIG<int>(1,2,3);
DEIH<int>(1,2,3);
DEII<int>(1,2,3);
DEIJ<int>(1,2,3);
DEJA<int>(1,2,3);
DEJB<int>(1,2,3);
DEJC<int>(1,2,3);
DEJD<int>(1,2,3);
DEJE<int>(1,2,3);
DEJF<int>(1,2,3);
DEJG<int>(1,2,3);
DEJH<int>(1,2,3);
DEJI<int>(1,2,3);
DEJJ<int>(1,2,3);
DFAA<int>(1,2,3);
DFAB<int>(1,2,3);
DFAC<int>(1,2,3);
DFAD<int>(1,2,3);
DFAE<int>(1,2,3);
DFAF<int>(1,2,3);
DFAG<int>(1,2,3);
DFAH<int>(1,2,3);
DFAI<int>(1,2,3);
DFAJ<int>(1,2,3);
DFBA<int>(1,2,3);
DFBB<int>(1,2,3);
DFBC<int>(1,2,3);
DFBD<int>(1,2,3);
DFBE<int>(1,2,3);
DFBF<int>(1,2,3);
DFBG<int>(1,2,3);
DFBH<int>(1,2,3);
DFBI<int>(1,2,3);
DFBJ<int>(1,2,3);
DFCA<int>(1,2,3);
DFCB<int>(1,2,3);
DFCC<int>(1,2,3);
DFCD<int>(1,2,3);
DFCE<int>(1,2,3);
DFCF<int>(1,2,3);
DFCG<int>(1,2,3);
DFCH<int>(1,2,3);
DFCI<int>(1,2,3);
DFCJ<int>(1,2,3);
DFDA<int>(1,2,3);
DFDB<int>(1,2,3);
DFDC<int>(1,2,3);
DFDD<int>(1,2,3);
DFDE<int>(1,2,3);
DFDF<int>(1,2,3);
DFDG<int>(1,2,3);
DFDH<int>(1,2,3);
DFDI<int>(1,2,3);
DFDJ<int>(1,2,3);
DFEA<int>(1,2,3);
DFEB<int>(1,2,3);
DFEC<int>(1,2,3);
DFED<int>(1,2,3);
DFEE<int>(1,2,3);
DFEF<int>(1,2,3);
DFEG<int>(1,2,3);
DFEH<int>(1,2,3);
DFEI<int>(1,2,3);
DFEJ<int>(1,2,3);
DFFA<int>(1,2,3);
DFFB<int>(1,2,3);
DFFC<int>(1,2,3);
DFFD<int>(1,2,3);
DFFE<int>(1,2,3);
DFFF<int>(1,2,3);
DFFG<int>(1,2,3);
DFFH<int>(1,2,3);
DFFI<int>(1,2,3);
DFFJ<int>(1,2,3);
DFGA<int>(1,2,3);
DFGB<int>(1,2,3);
DFGC<int>(1,2,3);
DFGD<int>(1,2,3);
DFGE<int>(1,2,3);
DFGF<int>(1,2,3);
DFGG<int>(1,2,3);
DFGH<int>(1,2,3);
DFGI<int>(1,2,3);
DFGJ<int>(1,2,3);
DFHA<int>(1,2,3);
DFHB<int>(1,2,3);
DFHC<int>(1,2,3);
DFHD<int>(1,2,3);
DFHE<int>(1,2,3);
DFHF<int>(1,2,3);
DFHG<int>(1,2,3);
DFHH<int>(1,2,3);
DFHI<int>(1,2,3);
DFHJ<int>(1,2,3);
DFIA<int>(1,2,3);
DFIB<int>(1,2,3);
DFIC<int>(1,2,3);
DFID<int>(1,2,3);
DFIE<int>(1,2,3);
DFIF<int>(1,2,3);
DFIG<int>(1,2,3);
DFIH<int>(1,2,3);
DFII<int>(1,2,3);
DFIJ<int>(1,2,3);
DFJA<int>(1,2,3);
DFJB<int>(1,2,3);
DFJC<int>(1,2,3);
DFJD<int>(1,2,3);
DFJE<int>(1,2,3);
DFJF<int>(1,2,3);
DFJG<int>(1,2,3);
DFJH<int>(1,2,3);
DFJI<int>(1,2,3);
DFJJ<int>(1,2,3);
DGAA<int>(1,2,3);
DGAB<int>(1,2,3);
DGAC<int>(1,2,3);
DGAD<int>(1,2,3);
DGAE<int>(1,2,3);
DGAF<int>(1,2,3);
DGAG<int>(1,2,3);
DGAH<int>(1,2,3);
DGAI<int>(1,2,3);
DGAJ<int>(1,2,3);
DGBA<int>(1,2,3);
DGBB<int>(1,2,3);
DGBC<int>(1,2,3);
DGBD<int>(1,2,3);
DGBE<int>(1,2,3);
DGBF<int>(1,2,3);
DGBG<int>(1,2,3);
DGBH<int>(1,2,3);
DGBI<int>(1,2,3);
DGBJ<int>(1,2,3);
DGCA<int>(1,2,3);
DGCB<int>(1,2,3);
DGCC<int>(1,2,3);
DGCD<int>(1,2,3);
DGCE<int>(1,2,3);
DGCF<int>(1,2,3);
DGCG<int>(1,2,3);
DGCH<int>(1,2,3);
DGCI<int>(1,2,3);
DGCJ<int>(1,2,3);
DGDA<int>(1,2,3);
DGDB<int>(1,2,3);
DGDC<int>(1,2,3);
DGDD<int>(1,2,3);
DGDE<int>(1,2,3);
DGDF<int>(1,2,3);
DGDG<int>(1,2,3);
DGDH<int>(1,2,3);
DGDI<int>(1,2,3);
DGDJ<int>(1,2,3);
DGEA<int>(1,2,3);
DGEB<int>(1,2,3);
DGEC<int>(1,2,3);
DGED<int>(1,2,3);
DGEE<int>(1,2,3);
DGEF<int>(1,2,3);
DGEG<int>(1,2,3);
DGEH<int>(1,2,3);
DGEI<int>(1,2,3);
DGEJ<int>(1,2,3);
DGFA<int>(1,2,3);
DGFB<int>(1,2,3);
DGFC<int>(1,2,3);
DGFD<int>(1,2,3);
DGFE<int>(1,2,3);
DGFF<int>(1,2,3);
DGFG<int>(1,2,3);
DGFH<int>(1,2,3);
DGFI<int>(1,2,3);
DGFJ<int>(1,2,3);
DGGA<int>(1,2,3);
DGGB<int>(1,2,3);
DGGC<int>(1,2,3);
DGGD<int>(1,2,3);
DGGE<int>(1,2,3);
DGGF<int>(1,2,3);
DGGG<int>(1,2,3);
DGGH<int>(1,2,3);
DGGI<int>(1,2,3);
DGGJ<int>(1,2,3);
DGHA<int>(1,2,3);
DGHB<int>(1,2,3);
DGHC<int>(1,2,3);
DGHD<int>(1,2,3);
DGHE<int>(1,2,3);
DGHF<int>(1,2,3);
DGHG<int>(1,2,3);
DGHH<int>(1,2,3);
DGHI<int>(1,2,3);
DGHJ<int>(1,2,3);
DGIA<int>(1,2,3);
DGIB<int>(1,2,3);
DGIC<int>(1,2,3);
DGID<int>(1,2,3);
DGIE<int>(1,2,3);
DGIF<int>(1,2,3);
DGIG<int>(1,2,3);
DGIH<int>(1,2,3);
DGII<int>(1,2,3);
DGIJ<int>(1,2,3);
DGJA<int>(1,2,3);
DGJB<int>(1,2,3);
DGJC<int>(1,2,3);
DGJD<int>(1,2,3);
DGJE<int>(1,2,3);
DGJF<int>(1,2,3);
DGJG<int>(1,2,3);
DGJH<int>(1,2,3);
DGJI<int>(1,2,3);
DGJJ<int>(1,2,3);
DHAA<int>(1,2,3);
DHAB<int>(1,2,3);
DHAC<int>(1,2,3);
DHAD<int>(1,2,3);
DHAE<int>(1,2,3);
DHAF<int>(1,2,3);
DHAG<int>(1,2,3);
DHAH<int>(1,2,3);
DHAI<int>(1,2,3);
DHAJ<int>(1,2,3);
DHBA<int>(1,2,3);
DHBB<int>(1,2,3);
DHBC<int>(1,2,3);
DHBD<int>(1,2,3);
DHBE<int>(1,2,3);
DHBF<int>(1,2,3);
DHBG<int>(1,2,3);
DHBH<int>(1,2,3);
DHBI<int>(1,2,3);
DHBJ<int>(1,2,3);
DHCA<int>(1,2,3);
DHCB<int>(1,2,3);
DHCC<int>(1,2,3);
DHCD<int>(1,2,3);
DHCE<int>(1,2,3);
DHCF<int>(1,2,3);
DHCG<int>(1,2,3);
DHCH<int>(1,2,3);
DHCI<int>(1,2,3);
DHCJ<int>(1,2,3);
DHDA<int>(1,2,3);
DHDB<int>(1,2,3);
DHDC<int>(1,2,3);
DHDD<int>(1,2,3);
DHDE<int>(1,2,3);
DHDF<int>(1,2,3);
DHDG<int>(1,2,3);
DHDH<int>(1,2,3);
DHDI<int>(1,2,3);
DHDJ<int>(1,2,3);
DHEA<int>(1,2,3);
DHEB<int>(1,2,3);
DHEC<int>(1,2,3);
DHED<int>(1,2,3);
DHEE<int>(1,2,3);
DHEF<int>(1,2,3);
DHEG<int>(1,2,3);
DHEH<int>(1,2,3);
DHEI<int>(1,2,3);
DHEJ<int>(1,2,3);
DHFA<int>(1,2,3);
DHFB<int>(1,2,3);
DHFC<int>(1,2,3);
DHFD<int>(1,2,3);
DHFE<int>(1,2,3);
DHFF<int>(1,2,3);
DHFG<int>(1,2,3);
DHFH<int>(1,2,3);
DHFI<int>(1,2,3);
DHFJ<int>(1,2,3);
DHGA<int>(1,2,3);
DHGB<int>(1,2,3);
DHGC<int>(1,2,3);
DHGD<int>(1,2,3);
DHGE<int>(1,2,3);
DHGF<int>(1,2,3);
DHGG<int>(1,2,3);
DHGH<int>(1,2,3);
DHGI<int>(1,2,3);
DHGJ<int>(1,2,3);
DHHA<int>(1,2,3);
DHHB<int>(1,2,3);
DHHC<int>(1,2,3);
DHHD<int>(1,2,3);
DHHE<int>(1,2,3);
DHHF<int>(1,2,3);
DHHG<int>(1,2,3);
DHHH<int>(1,2,3);
DHHI<int>(1,2,3);
DHHJ<int>(1,2,3);
DHIA<int>(1,2,3);
DHIB<int>(1,2,3);
DHIC<int>(1,2,3);
DHID<int>(1,2,3);
DHIE<int>(1,2,3);
DHIF<int>(1,2,3);
DHIG<int>(1,2,3);
DHIH<int>(1,2,3);
DHII<int>(1,2,3);
DHIJ<int>(1,2,3);
DHJA<int>(1,2,3);
DHJB<int>(1,2,3);
DHJC<int>(1,2,3);
DHJD<int>(1,2,3);
DHJE<int>(1,2,3);
DHJF<int>(1,2,3);
DHJG<int>(1,2,3);
DHJH<int>(1,2,3);
DHJI<int>(1,2,3);
DHJJ<int>(1,2,3);
DIAA<int>(1,2,3);
DIAB<int>(1,2,3);
DIAC<int>(1,2,3);
DIAD<int>(1,2,3);
DIAE<int>(1,2,3);
DIAF<int>(1,2,3);
DIAG<int>(1,2,3);
DIAH<int>(1,2,3);
DIAI<int>(1,2,3);
DIAJ<int>(1,2,3);
DIBA<int>(1,2,3);
DIBB<int>(1,2,3);
DIBC<int>(1,2,3);
DIBD<int>(1,2,3);
DIBE<int>(1,2,3);
DIBF<int>(1,2,3);
DIBG<int>(1,2,3);
DIBH<int>(1,2,3);
DIBI<int>(1,2,3);
DIBJ<int>(1,2,3);
DICA<int>(1,2,3);
DICB<int>(1,2,3);
DICC<int>(1,2,3);
DICD<int>(1,2,3);
DICE<int>(1,2,3);
DICF<int>(1,2,3);
DICG<int>(1,2,3);
DICH<int>(1,2,3);
DICI<int>(1,2,3);
DICJ<int>(1,2,3);
DIDA<int>(1,2,3);
DIDB<int>(1,2,3);
DIDC<int>(1,2,3);
DIDD<int>(1,2,3);
DIDE<int>(1,2,3);
DIDF<int>(1,2,3);
DIDG<int>(1,2,3);
DIDH<int>(1,2,3);
DIDI<int>(1,2,3);
DIDJ<int>(1,2,3);
DIEA<int>(1,2,3);
DIEB<int>(1,2,3);
DIEC<int>(1,2,3);
DIED<int>(1,2,3);
DIEE<int>(1,2,3);
DIEF<int>(1,2,3);
DIEG<int>(1,2,3);
DIEH<int>(1,2,3);
DIEI<int>(1,2,3);
DIEJ<int>(1,2,3);
DIFA<int>(1,2,3);
DIFB<int>(1,2,3);
DIFC<int>(1,2,3);
DIFD<int>(1,2,3);
DIFE<int>(1,2,3);
DIFF<int>(1,2,3);
DIFG<int>(1,2,3);
DIFH<int>(1,2,3);
DIFI<int>(1,2,3);
DIFJ<int>(1,2,3);
DIGA<int>(1,2,3);
DIGB<int>(1,2,3);
DIGC<int>(1,2,3);
DIGD<int>(1,2,3);
DIGE<int>(1,2,3);
DIGF<int>(1,2,3);
DIGG<int>(1,2,3);
DIGH<int>(1,2,3);
DIGI<int>(1,2,3);
DIGJ<int>(1,2,3);
DIHA<int>(1,2,3);
DIHB<int>(1,2,3);
DIHC<int>(1,2,3);
DIHD<int>(1,2,3);
DIHE<int>(1,2,3);
DIHF<int>(1,2,3);
DIHG<int>(1,2,3);
DIHH<int>(1,2,3);
DIHI<int>(1,2,3);
DIHJ<int>(1,2,3);
DIIA<int>(1,2,3);
DIIB<int>(1,2,3);
DIIC<int>(1,2,3);
DIID<int>(1,2,3);
DIIE<int>(1,2,3);
DIIF<int>(1,2,3);
DIIG<int>(1,2,3);
DIIH<int>(1,2,3);
DIII<int>(1,2,3);
DIIJ<int>(1,2,3);
DIJA<int>(1,2,3);
DIJB<int>(1,2,3);
DIJC<int>(1,2,3);
DIJD<int>(1,2,3);
DIJE<int>(1,2,3);
DIJF<int>(1,2,3);
DIJG<int>(1,2,3);
DIJH<int>(1,2,3);
DIJI<int>(1,2,3);
DIJJ<int>(1,2,3);
DJAA<int>(1,2,3);
DJAB<int>(1,2,3);
DJAC<int>(1,2,3);
DJAD<int>(1,2,3);
DJAE<int>(1,2,3);
DJAF<int>(1,2,3);
DJAG<int>(1,2,3);
DJAH<int>(1,2,3);
DJAI<int>(1,2,3);
DJAJ<int>(1,2,3);
DJBA<int>(1,2,3);
DJBB<int>(1,2,3);
DJBC<int>(1,2,3);
DJBD<int>(1,2,3);
DJBE<int>(1,2,3);
DJBF<int>(1,2,3);
DJBG<int>(1,2,3);
DJBH<int>(1,2,3);
DJBI<int>(1,2,3);
DJBJ<int>(1,2,3);
DJCA<int>(1,2,3);
DJCB<int>(1,2,3);
DJCC<int>(1,2,3);
DJCD<int>(1,2,3);
DJCE<int>(1,2,3);
DJCF<int>(1,2,3);
DJCG<int>(1,2,3);
DJCH<int>(1,2,3);
DJCI<int>(1,2,3);
DJCJ<int>(1,2,3);
DJDA<int>(1,2,3);
DJDB<int>(1,2,3);
DJDC<int>(1,2,3);
DJDD<int>(1,2,3);
DJDE<int>(1,2,3);
DJDF<int>(1,2,3);
DJDG<int>(1,2,3);
DJDH<int>(1,2,3);
DJDI<int>(1,2,3);
DJDJ<int>(1,2,3);
DJEA<int>(1,2,3);
DJEB<int>(1,2,3);
DJEC<int>(1,2,3);
DJED<int>(1,2,3);
DJEE<int>(1,2,3);
DJEF<int>(1,2,3);
DJEG<int>(1,2,3);
DJEH<int>(1,2,3);
DJEI<int>(1,2,3);
DJEJ<int>(1,2,3);
DJFA<int>(1,2,3);
DJFB<int>(1,2,3);
DJFC<int>(1,2,3);
DJFD<int>(1,2,3);
DJFE<int>(1,2,3);
DJFF<int>(1,2,3);
DJFG<int>(1,2,3);
DJFH<int>(1,2,3);
DJFI<int>(1,2,3);
DJFJ<int>(1,2,3);
DJGA<int>(1,2,3);
DJGB<int>(1,2,3);
DJGC<int>(1,2,3);
DJGD<int>(1,2,3);
DJGE<int>(1,2,3);
DJGF<int>(1,2,3);
DJGG<int>(1,2,3);
DJGH<int>(1,2,3);
DJGI<int>(1,2,3);
DJGJ<int>(1,2,3);
DJHA<int>(1,2,3);
DJHB<int>(1,2,3);
DJHC<int>(1,2,3);
DJHD<int>(1,2,3);
DJHE<int>(1,2,3);
DJHF<int>(1,2,3);
DJHG<int>(1,2,3);
DJHH<int>(1,2,3);
DJHI<int>(1,2,3);
DJHJ<int>(1,2,3);
DJIA<int>(1,2,3);
DJIB<int>(1,2,3);
DJIC<int>(1,2,3);
DJID<int>(1,2,3);
DJIE<int>(1,2,3);
DJIF<int>(1,2,3);
DJIG<int>(1,2,3);
DJIH<int>(1,2,3);
DJII<int>(1,2,3);
DJIJ<int>(1,2,3);
DJJA<int>(1,2,3);
DJJB<int>(1,2,3);
DJJC<int>(1,2,3);
DJJD<int>(1,2,3);
DJJE<int>(1,2,3);
DJJF<int>(1,2,3);
DJJG<int>(1,2,3);
DJJH<int>(1,2,3);
DJJI<int>(1,2,3);
DJJJ<int>(1,2,3);
EAAA<int>(1,2,3);
EAAB<int>(1,2,3);
EAAC<int>(1,2,3);
EAAD<int>(1,2,3);
EAAE<int>(1,2,3);
EAAF<int>(1,2,3);
EAAG<int>(1,2,3);
EAAH<int>(1,2,3);
EAAI<int>(1,2,3);
EAAJ<int>(1,2,3);
EABA<int>(1,2,3);
EABB<int>(1,2,3);
EABC<int>(1,2,3);
EABD<int>(1,2,3);
EABE<int>(1,2,3);
EABF<int>(1,2,3);
EABG<int>(1,2,3);
EABH<int>(1,2,3);
EABI<int>(1,2,3);
EABJ<int>(1,2,3);
EACA<int>(1,2,3);
EACB<int>(1,2,3);
EACC<int>(1,2,3);
EACD<int>(1,2,3);
EACE<int>(1,2,3);
EACF<int>(1,2,3);
EACG<int>(1,2,3);
EACH<int>(1,2,3);
EACI<int>(1,2,3);
EACJ<int>(1,2,3);
EADA<int>(1,2,3);
EADB<int>(1,2,3);
EADC<int>(1,2,3);
EADD<int>(1,2,3);
EADE<int>(1,2,3);
EADF<int>(1,2,3);
EADG<int>(1,2,3);
EADH<int>(1,2,3);
EADI<int>(1,2,3);
EADJ<int>(1,2,3);
EAEA<int>(1,2,3);
EAEB<int>(1,2,3);
EAEC<int>(1,2,3);
EAED<int>(1,2,3);
EAEE<int>(1,2,3);
EAEF<int>(1,2,3);
EAEG<int>(1,2,3);
EAEH<int>(1,2,3);
EAEI<int>(1,2,3);
EAEJ<int>(1,2,3);
EAFA<int>(1,2,3);
EAFB<int>(1,2,3);
EAFC<int>(1,2,3);
EAFD<int>(1,2,3);
EAFE<int>(1,2,3);
EAFF<int>(1,2,3);
EAFG<int>(1,2,3);
EAFH<int>(1,2,3);
EAFI<int>(1,2,3);
EAFJ<int>(1,2,3);
EAGA<int>(1,2,3);
EAGB<int>(1,2,3);
EAGC<int>(1,2,3);
EAGD<int>(1,2,3);
EAGE<int>(1,2,3);
EAGF<int>(1,2,3);
EAGG<int>(1,2,3);
EAGH<int>(1,2,3);
EAGI<int>(1,2,3);
EAGJ<int>(1,2,3);
EAHA<int>(1,2,3);
EAHB<int>(1,2,3);
EAHC<int>(1,2,3);
EAHD<int>(1,2,3);
EAHE<int>(1,2,3);
EAHF<int>(1,2,3);
EAHG<int>(1,2,3);
EAHH<int>(1,2,3);
EAHI<int>(1,2,3);
EAHJ<int>(1,2,3);
EAIA<int>(1,2,3);
EAIB<int>(1,2,3);
EAIC<int>(1,2,3);
EAID<int>(1,2,3);
EAIE<int>(1,2,3);
EAIF<int>(1,2,3);
EAIG<int>(1,2,3);
EAIH<int>(1,2,3);
EAII<int>(1,2,3);
EAIJ<int>(1,2,3);
EAJA<int>(1,2,3);
EAJB<int>(1,2,3);
EAJC<int>(1,2,3);
EAJD<int>(1,2,3);
EAJE<int>(1,2,3);
EAJF<int>(1,2,3);
EAJG<int>(1,2,3);
EAJH<int>(1,2,3);
EAJI<int>(1,2,3);
EAJJ<int>(1,2,3);
EBAA<int>(1,2,3);
EBAB<int>(1,2,3);
EBAC<int>(1,2,3);
EBAD<int>(1,2,3);
EBAE<int>(1,2,3);
EBAF<int>(1,2,3);
EBAG<int>(1,2,3);
EBAH<int>(1,2,3);
EBAI<int>(1,2,3);
EBAJ<int>(1,2,3);
EBBA<int>(1,2,3);
EBBB<int>(1,2,3);
EBBC<int>(1,2,3);
EBBD<int>(1,2,3);
EBBE<int>(1,2,3);
EBBF<int>(1,2,3);
EBBG<int>(1,2,3);
EBBH<int>(1,2,3);
EBBI<int>(1,2,3);
EBBJ<int>(1,2,3);
EBCA<int>(1,2,3);
EBCB<int>(1,2,3);
EBCC<int>(1,2,3);
EBCD<int>(1,2,3);
EBCE<int>(1,2,3);
EBCF<int>(1,2,3);
EBCG<int>(1,2,3);
EBCH<int>(1,2,3);
EBCI<int>(1,2,3);
EBCJ<int>(1,2,3);
EBDA<int>(1,2,3);
EBDB<int>(1,2,3);
EBDC<int>(1,2,3);
EBDD<int>(1,2,3);
EBDE<int>(1,2,3);
EBDF<int>(1,2,3);
EBDG<int>(1,2,3);
EBDH<int>(1,2,3);
EBDI<int>(1,2,3);
EBDJ<int>(1,2,3);
EBEA<int>(1,2,3);
EBEB<int>(1,2,3);
EBEC<int>(1,2,3);
EBED<int>(1,2,3);
EBEE<int>(1,2,3);
EBEF<int>(1,2,3);
EBEG<int>(1,2,3);
EBEH<int>(1,2,3);
EBEI<int>(1,2,3);
EBEJ<int>(1,2,3);
EBFA<int>(1,2,3);
EBFB<int>(1,2,3);
EBFC<int>(1,2,3);
EBFD<int>(1,2,3);
EBFE<int>(1,2,3);
EBFF<int>(1,2,3);
EBFG<int>(1,2,3);
EBFH<int>(1,2,3);
EBFI<int>(1,2,3);
EBFJ<int>(1,2,3);
EBGA<int>(1,2,3);
EBGB<int>(1,2,3);
EBGC<int>(1,2,3);
EBGD<int>(1,2,3);
EBGE<int>(1,2,3);
EBGF<int>(1,2,3);
EBGG<int>(1,2,3);
EBGH<int>(1,2,3);
EBGI<int>(1,2,3);
EBGJ<int>(1,2,3);
EBHA<int>(1,2,3);
EBHB<int>(1,2,3);
EBHC<int>(1,2,3);
EBHD<int>(1,2,3);
EBHE<int>(1,2,3);
EBHF<int>(1,2,3);
EBHG<int>(1,2,3);
EBHH<int>(1,2,3);
EBHI<int>(1,2,3);
EBHJ<int>(1,2,3);
EBIA<int>(1,2,3);
EBIB<int>(1,2,3);
EBIC<int>(1,2,3);
EBID<int>(1,2,3);
EBIE<int>(1,2,3);
EBIF<int>(1,2,3);
EBIG<int>(1,2,3);
EBIH<int>(1,2,3);
EBII<int>(1,2,3);
EBIJ<int>(1,2,3);
EBJA<int>(1,2,3);
EBJB<int>(1,2,3);
EBJC<int>(1,2,3);
EBJD<int>(1,2,3);
EBJE<int>(1,2,3);
EBJF<int>(1,2,3);
EBJG<int>(1,2,3);
EBJH<int>(1,2,3);
EBJI<int>(1,2,3);
EBJJ<int>(1,2,3);
ECAA<int>(1,2,3);
ECAB<int>(1,2,3);
ECAC<int>(1,2,3);
ECAD<int>(1,2,3);
ECAE<int>(1,2,3);
ECAF<int>(1,2,3);
ECAG<int>(1,2,3);
ECAH<int>(1,2,3);
ECAI<int>(1,2,3);
ECAJ<int>(1,2,3);
ECBA<int>(1,2,3);
ECBB<int>(1,2,3);
ECBC<int>(1,2,3);
ECBD<int>(1,2,3);
ECBE<int>(1,2,3);
ECBF<int>(1,2,3);
ECBG<int>(1,2,3);
ECBH<int>(1,2,3);
ECBI<int>(1,2,3);
ECBJ<int>(1,2,3);
ECCA<int>(1,2,3);
ECCB<int>(1,2,3);
ECCC<int>(1,2,3);
ECCD<int>(1,2,3);
ECCE<int>(1,2,3);
ECCF<int>(1,2,3);
ECCG<int>(1,2,3);
ECCH<int>(1,2,3);
ECCI<int>(1,2,3);
ECCJ<int>(1,2,3);
ECDA<int>(1,2,3);
ECDB<int>(1,2,3);
ECDC<int>(1,2,3);
ECDD<int>(1,2,3);
ECDE<int>(1,2,3);
ECDF<int>(1,2,3);
ECDG<int>(1,2,3);
ECDH<int>(1,2,3);
ECDI<int>(1,2,3);
ECDJ<int>(1,2,3);
ECEA<int>(1,2,3);
ECEB<int>(1,2,3);
ECEC<int>(1,2,3);
ECED<int>(1,2,3);
ECEE<int>(1,2,3);
ECEF<int>(1,2,3);
ECEG<int>(1,2,3);
ECEH<int>(1,2,3);
ECEI<int>(1,2,3);
ECEJ<int>(1,2,3);
ECFA<int>(1,2,3);
ECFB<int>(1,2,3);
ECFC<int>(1,2,3);
ECFD<int>(1,2,3);
ECFE<int>(1,2,3);
ECFF<int>(1,2,3);
ECFG<int>(1,2,3);
ECFH<int>(1,2,3);
ECFI<int>(1,2,3);
ECFJ<int>(1,2,3);
ECGA<int>(1,2,3);
ECGB<int>(1,2,3);
ECGC<int>(1,2,3);
ECGD<int>(1,2,3);
ECGE<int>(1,2,3);
ECGF<int>(1,2,3);
ECGG<int>(1,2,3);
ECGH<int>(1,2,3);
ECGI<int>(1,2,3);
ECGJ<int>(1,2,3);
ECHA<int>(1,2,3);
ECHB<int>(1,2,3);
ECHC<int>(1,2,3);
ECHD<int>(1,2,3);
ECHE<int>(1,2,3);
ECHF<int>(1,2,3);
ECHG<int>(1,2,3);
ECHH<int>(1,2,3);
ECHI<int>(1,2,3);
ECHJ<int>(1,2,3);
ECIA<int>(1,2,3);
ECIB<int>(1,2,3);
ECIC<int>(1,2,3);
ECID<int>(1,2,3);
ECIE<int>(1,2,3);
ECIF<int>(1,2,3);
ECIG<int>(1,2,3);
ECIH<int>(1,2,3);
ECII<int>(1,2,3);
ECIJ<int>(1,2,3);
ECJA<int>(1,2,3);
ECJB<int>(1,2,3);
ECJC<int>(1,2,3);
ECJD<int>(1,2,3);
ECJE<int>(1,2,3);
ECJF<int>(1,2,3);
ECJG<int>(1,2,3);
ECJH<int>(1,2,3);
ECJI<int>(1,2,3);
ECJJ<int>(1,2,3);
EDAA<int>(1,2,3);
EDAB<int>(1,2,3);
EDAC<int>(1,2,3);
EDAD<int>(1,2,3);
EDAE<int>(1,2,3);
EDAF<int>(1,2,3);
EDAG<int>(1,2,3);
EDAH<int>(1,2,3);
EDAI<int>(1,2,3);
EDAJ<int>(1,2,3);
EDBA<int>(1,2,3);
EDBB<int>(1,2,3);
EDBC<int>(1,2,3);
EDBD<int>(1,2,3);
EDBE<int>(1,2,3);
EDBF<int>(1,2,3);
EDBG<int>(1,2,3);
EDBH<int>(1,2,3);
EDBI<int>(1,2,3);
EDBJ<int>(1,2,3);
EDCA<int>(1,2,3);
EDCB<int>(1,2,3);
EDCC<int>(1,2,3);
EDCD<int>(1,2,3);
EDCE<int>(1,2,3);
EDCF<int>(1,2,3);
EDCG<int>(1,2,3);
EDCH<int>(1,2,3);
EDCI<int>(1,2,3);
EDCJ<int>(1,2,3);
EDDA<int>(1,2,3);
EDDB<int>(1,2,3);
EDDC<int>(1,2,3);
EDDD<int>(1,2,3);
EDDE<int>(1,2,3);
EDDF<int>(1,2,3);
EDDG<int>(1,2,3);
EDDH<int>(1,2,3);
EDDI<int>(1,2,3);
EDDJ<int>(1,2,3);
EDEA<int>(1,2,3);
EDEB<int>(1,2,3);
EDEC<int>(1,2,3);
EDED<int>(1,2,3);
EDEE<int>(1,2,3);
EDEF<int>(1,2,3);
EDEG<int>(1,2,3);
EDEH<int>(1,2,3);
EDEI<int>(1,2,3);
EDEJ<int>(1,2,3);
EDFA<int>(1,2,3);
EDFB<int>(1,2,3);
EDFC<int>(1,2,3);
EDFD<int>(1,2,3);
EDFE<int>(1,2,3);
EDFF<int>(1,2,3);
EDFG<int>(1,2,3);
EDFH<int>(1,2,3);
EDFI<int>(1,2,3);
EDFJ<int>(1,2,3);
EDGA<int>(1,2,3);
EDGB<int>(1,2,3);
EDGC<int>(1,2,3);
EDGD<int>(1,2,3);
EDGE<int>(1,2,3);
EDGF<int>(1,2,3);
EDGG<int>(1,2,3);
EDGH<int>(1,2,3);
EDGI<int>(1,2,3);
EDGJ<int>(1,2,3);
EDHA<int>(1,2,3);
EDHB<int>(1,2,3);
EDHC<int>(1,2,3);
EDHD<int>(1,2,3);
EDHE<int>(1,2,3);
EDHF<int>(1,2,3);
EDHG<int>(1,2,3);
EDHH<int>(1,2,3);
EDHI<int>(1,2,3);
EDHJ<int>(1,2,3);
EDIA<int>(1,2,3);
EDIB<int>(1,2,3);
EDIC<int>(1,2,3);
EDID<int>(1,2,3);
EDIE<int>(1,2,3);
EDIF<int>(1,2,3);
EDIG<int>(1,2,3);
EDIH<int>(1,2,3);
EDII<int>(1,2,3);
EDIJ<int>(1,2,3);
EDJA<int>(1,2,3);
EDJB<int>(1,2,3);
EDJC<int>(1,2,3);
EDJD<int>(1,2,3);
EDJE<int>(1,2,3);
EDJF<int>(1,2,3);
EDJG<int>(1,2,3);
EDJH<int>(1,2,3);
EDJI<int>(1,2,3);
EDJJ<int>(1,2,3);
EEAA<int>(1,2,3);
EEAB<int>(1,2,3);
EEAC<int>(1,2,3);
EEAD<int>(1,2,3);
EEAE<int>(1,2,3);
EEAF<int>(1,2,3);
EEAG<int>(1,2,3);
EEAH<int>(1,2,3);
EEAI<int>(1,2,3);
EEAJ<int>(1,2,3);
EEBA<int>(1,2,3);
EEBB<int>(1,2,3);
EEBC<int>(1,2,3);
EEBD<int>(1,2,3);
EEBE<int>(1,2,3);
EEBF<int>(1,2,3);
EEBG<int>(1,2,3);
EEBH<int>(1,2,3);
EEBI<int>(1,2,3);
EEBJ<int>(1,2,3);
EECA<int>(1,2,3);
EECB<int>(1,2,3);
EECC<int>(1,2,3);
EECD<int>(1,2,3);
EECE<int>(1,2,3);
EECF<int>(1,2,3);
EECG<int>(1,2,3);
EECH<int>(1,2,3);
EECI<int>(1,2,3);
EECJ<int>(1,2,3);
EEDA<int>(1,2,3);
EEDB<int>(1,2,3);
EEDC<int>(1,2,3);
EEDD<int>(1,2,3);
EEDE<int>(1,2,3);
EEDF<int>(1,2,3);
EEDG<int>(1,2,3);
EEDH<int>(1,2,3);
EEDI<int>(1,2,3);
EEDJ<int>(1,2,3);
EEEA<int>(1,2,3);
EEEB<int>(1,2,3);
EEEC<int>(1,2,3);
EEED<int>(1,2,3);
EEEE<int>(1,2,3);
EEEF<int>(1,2,3);
EEEG<int>(1,2,3);
EEEH<int>(1,2,3);
EEEI<int>(1,2,3);
EEEJ<int>(1,2,3);
EEFA<int>(1,2,3);
EEFB<int>(1,2,3);
EEFC<int>(1,2,3);
EEFD<int>(1,2,3);
EEFE<int>(1,2,3);
EEFF<int>(1,2,3);
EEFG<int>(1,2,3);
EEFH<int>(1,2,3);
EEFI<int>(1,2,3);
EEFJ<int>(1,2,3);
EEGA<int>(1,2,3);
EEGB<int>(1,2,3);
EEGC<int>(1,2,3);
EEGD<int>(1,2,3);
EEGE<int>(1,2,3);
EEGF<int>(1,2,3);
EEGG<int>(1,2,3);
EEGH<int>(1,2,3);
EEGI<int>(1,2,3);
EEGJ<int>(1,2,3);
EEHA<int>(1,2,3);
EEHB<int>(1,2,3);
EEHC<int>(1,2,3);
EEHD<int>(1,2,3);
EEHE<int>(1,2,3);
EEHF<int>(1,2,3);
EEHG<int>(1,2,3);
EEHH<int>(1,2,3);
EEHI<int>(1,2,3);
EEHJ<int>(1,2,3);
EEIA<int>(1,2,3);
EEIB<int>(1,2,3);
EEIC<int>(1,2,3);
EEID<int>(1,2,3);
EEIE<int>(1,2,3);
EEIF<int>(1,2,3);
EEIG<int>(1,2,3);
EEIH<int>(1,2,3);
EEII<int>(1,2,3);
EEIJ<int>(1,2,3);
EEJA<int>(1,2,3);
EEJB<int>(1,2,3);
EEJC<int>(1,2,3);
EEJD<int>(1,2,3);
EEJE<int>(1,2,3);
EEJF<int>(1,2,3);
EEJG<int>(1,2,3);
EEJH<int>(1,2,3);
EEJI<int>(1,2,3);
EEJJ<int>(1,2,3);
EFAA<int>(1,2,3);
EFAB<int>(1,2,3);
EFAC<int>(1,2,3);
EFAD<int>(1,2,3);
EFAE<int>(1,2,3);
EFAF<int>(1,2,3);
EFAG<int>(1,2,3);
EFAH<int>(1,2,3);
EFAI<int>(1,2,3);
EFAJ<int>(1,2,3);
EFBA<int>(1,2,3);
EFBB<int>(1,2,3);
EFBC<int>(1,2,3);
EFBD<int>(1,2,3);
EFBE<int>(1,2,3);
EFBF<int>(1,2,3);
EFBG<int>(1,2,3);
EFBH<int>(1,2,3);
EFBI<int>(1,2,3);
EFBJ<int>(1,2,3);
EFCA<int>(1,2,3);
EFCB<int>(1,2,3);
EFCC<int>(1,2,3);
EFCD<int>(1,2,3);
EFCE<int>(1,2,3);
EFCF<int>(1,2,3);
EFCG<int>(1,2,3);
EFCH<int>(1,2,3);
EFCI<int>(1,2,3);
EFCJ<int>(1,2,3);
EFDA<int>(1,2,3);
EFDB<int>(1,2,3);
EFDC<int>(1,2,3);
EFDD<int>(1,2,3);
EFDE<int>(1,2,3);
EFDF<int>(1,2,3);
EFDG<int>(1,2,3);
EFDH<int>(1,2,3);
EFDI<int>(1,2,3);
EFDJ<int>(1,2,3);
EFEA<int>(1,2,3);
EFEB<int>(1,2,3);
EFEC<int>(1,2,3);
EFED<int>(1,2,3);
EFEE<int>(1,2,3);
EFEF<int>(1,2,3);
EFEG<int>(1,2,3);
EFEH<int>(1,2,3);
EFEI<int>(1,2,3);
EFEJ<int>(1,2,3);
EFFA<int>(1,2,3);
EFFB<int>(1,2,3);
EFFC<int>(1,2,3);
EFFD<int>(1,2,3);
EFFE<int>(1,2,3);
EFFF<int>(1,2,3);
EFFG<int>(1,2,3);
EFFH<int>(1,2,3);
EFFI<int>(1,2,3);
EFFJ<int>(1,2,3);
EFGA<int>(1,2,3);
EFGB<int>(1,2,3);
EFGC<int>(1,2,3);
EFGD<int>(1,2,3);
EFGE<int>(1,2,3);
EFGF<int>(1,2,3);
EFGG<int>(1,2,3);
EFGH<int>(1,2,3);
EFGI<int>(1,2,3);
EFGJ<int>(1,2,3);
EFHA<int>(1,2,3);
EFHB<int>(1,2,3);
EFHC<int>(1,2,3);
EFHD<int>(1,2,3);
EFHE<int>(1,2,3);
EFHF<int>(1,2,3);
EFHG<int>(1,2,3);
EFHH<int>(1,2,3);
EFHI<int>(1,2,3);
EFHJ<int>(1,2,3);
EFIA<int>(1,2,3);
EFIB<int>(1,2,3);
EFIC<int>(1,2,3);
EFID<int>(1,2,3);
EFIE<int>(1,2,3);
EFIF<int>(1,2,3);
EFIG<int>(1,2,3);
EFIH<int>(1,2,3);
EFII<int>(1,2,3);
EFIJ<int>(1,2,3);
EFJA<int>(1,2,3);
EFJB<int>(1,2,3);
EFJC<int>(1,2,3);
EFJD<int>(1,2,3);
EFJE<int>(1,2,3);
EFJF<int>(1,2,3);
EFJG<int>(1,2,3);
EFJH<int>(1,2,3);
EFJI<int>(1,2,3);
EFJJ<int>(1,2,3);
EGAA<int>(1,2,3);
EGAB<int>(1,2,3);
EGAC<int>(1,2,3);
EGAD<int>(1,2,3);
EGAE<int>(1,2,3);
EGAF<int>(1,2,3);
EGAG<int>(1,2,3);
EGAH<int>(1,2,3);
EGAI<int>(1,2,3);
EGAJ<int>(1,2,3);
EGBA<int>(1,2,3);
EGBB<int>(1,2,3);
EGBC<int>(1,2,3);
EGBD<int>(1,2,3);
EGBE<int>(1,2,3);
EGBF<int>(1,2,3);
EGBG<int>(1,2,3);
EGBH<int>(1,2,3);
EGBI<int>(1,2,3);
EGBJ<int>(1,2,3);
EGCA<int>(1,2,3);
EGCB<int>(1,2,3);
EGCC<int>(1,2,3);
EGCD<int>(1,2,3);
EGCE<int>(1,2,3);
EGCF<int>(1,2,3);
EGCG<int>(1,2,3);
EGCH<int>(1,2,3);
EGCI<int>(1,2,3);
EGCJ<int>(1,2,3);
EGDA<int>(1,2,3);
EGDB<int>(1,2,3);
EGDC<int>(1,2,3);
EGDD<int>(1,2,3);
EGDE<int>(1,2,3);
EGDF<int>(1,2,3);
EGDG<int>(1,2,3);
EGDH<int>(1,2,3);
EGDI<int>(1,2,3);
EGDJ<int>(1,2,3);
EGEA<int>(1,2,3);
EGEB<int>(1,2,3);
EGEC<int>(1,2,3);
EGED<int>(1,2,3);
EGEE<int>(1,2,3);
EGEF<int>(1,2,3);
EGEG<int>(1,2,3);
EGEH<int>(1,2,3);
EGEI<int>(1,2,3);
EGEJ<int>(1,2,3);
EGFA<int>(1,2,3);
EGFB<int>(1,2,3);
EGFC<int>(1,2,3);
EGFD<int>(1,2,3);
EGFE<int>(1,2,3);
EGFF<int>(1,2,3);
EGFG<int>(1,2,3);
EGFH<int>(1,2,3);
EGFI<int>(1,2,3);
EGFJ<int>(1,2,3);
EGGA<int>(1,2,3);
EGGB<int>(1,2,3);
EGGC<int>(1,2,3);
EGGD<int>(1,2,3);
EGGE<int>(1,2,3);
EGGF<int>(1,2,3);
EGGG<int>(1,2,3);
EGGH<int>(1,2,3);
EGGI<int>(1,2,3);
EGGJ<int>(1,2,3);
EGHA<int>(1,2,3);
EGHB<int>(1,2,3);
EGHC<int>(1,2,3);
EGHD<int>(1,2,3);
EGHE<int>(1,2,3);
EGHF<int>(1,2,3);
EGHG<int>(1,2,3);
EGHH<int>(1,2,3);
EGHI<int>(1,2,3);
EGHJ<int>(1,2,3);
EGIA<int>(1,2,3);
EGIB<int>(1,2,3);
EGIC<int>(1,2,3);
EGID<int>(1,2,3);
EGIE<int>(1,2,3);
EGIF<int>(1,2,3);
EGIG<int>(1,2,3);
EGIH<int>(1,2,3);
EGII<int>(1,2,3);
EGIJ<int>(1,2,3);
EGJA<int>(1,2,3);
EGJB<int>(1,2,3);
EGJC<int>(1,2,3);
EGJD<int>(1,2,3);
EGJE<int>(1,2,3);
EGJF<int>(1,2,3);
EGJG<int>(1,2,3);
EGJH<int>(1,2,3);
EGJI<int>(1,2,3);
EGJJ<int>(1,2,3);
EHAA<int>(1,2,3);
EHAB<int>(1,2,3);
EHAC<int>(1,2,3);
EHAD<int>(1,2,3);
EHAE<int>(1,2,3);
EHAF<int>(1,2,3);
EHAG<int>(1,2,3);
EHAH<int>(1,2,3);
EHAI<int>(1,2,3);
EHAJ<int>(1,2,3);
EHBA<int>(1,2,3);
EHBB<int>(1,2,3);
EHBC<int>(1,2,3);
EHBD<int>(1,2,3);
EHBE<int>(1,2,3);
EHBF<int>(1,2,3);
EHBG<int>(1,2,3);
EHBH<int>(1,2,3);
EHBI<int>(1,2,3);
EHBJ<int>(1,2,3);
EHCA<int>(1,2,3);
EHCB<int>(1,2,3);
EHCC<int>(1,2,3);
EHCD<int>(1,2,3);
EHCE<int>(1,2,3);
EHCF<int>(1,2,3);
EHCG<int>(1,2,3);
EHCH<int>(1,2,3);
EHCI<int>(1,2,3);
EHCJ<int>(1,2,3);
EHDA<int>(1,2,3);
EHDB<int>(1,2,3);
EHDC<int>(1,2,3);
EHDD<int>(1,2,3);
EHDE<int>(1,2,3);
EHDF<int>(1,2,3);
EHDG<int>(1,2,3);
EHDH<int>(1,2,3);
EHDI<int>(1,2,3);
EHDJ<int>(1,2,3);
EHEA<int>(1,2,3);
EHEB<int>(1,2,3);
EHEC<int>(1,2,3);
EHED<int>(1,2,3);
EHEE<int>(1,2,3);
EHEF<int>(1,2,3);
EHEG<int>(1,2,3);
EHEH<int>(1,2,3);
EHEI<int>(1,2,3);
EHEJ<int>(1,2,3);
EHFA<int>(1,2,3);
EHFB<int>(1,2,3);
EHFC<int>(1,2,3);
EHFD<int>(1,2,3);
EHFE<int>(1,2,3);
EHFF<int>(1,2,3);
EHFG<int>(1,2,3);
EHFH<int>(1,2,3);
EHFI<int>(1,2,3);
EHFJ<int>(1,2,3);
EHGA<int>(1,2,3);
EHGB<int>(1,2,3);
EHGC<int>(1,2,3);
EHGD<int>(1,2,3);
EHGE<int>(1,2,3);
EHGF<int>(1,2,3);
EHGG<int>(1,2,3);
EHGH<int>(1,2,3);
EHGI<int>(1,2,3);
EHGJ<int>(1,2,3);
EHHA<int>(1,2,3);
EHHB<int>(1,2,3);
EHHC<int>(1,2,3);
EHHD<int>(1,2,3);
EHHE<int>(1,2,3);
EHHF<int>(1,2,3);
EHHG<int>(1,2,3);
EHHH<int>(1,2,3);
EHHI<int>(1,2,3);
EHHJ<int>(1,2,3);
EHIA<int>(1,2,3);
EHIB<int>(1,2,3);
EHIC<int>(1,2,3);
EHID<int>(1,2,3);
EHIE<int>(1,2,3);
EHIF<int>(1,2,3);
EHIG<int>(1,2,3);
EHIH<int>(1,2,3);
EHII<int>(1,2,3);
EHIJ<int>(1,2,3);
EHJA<int>(1,2,3);
EHJB<int>(1,2,3);
EHJC<int>(1,2,3);
EHJD<int>(1,2,3);
EHJE<int>(1,2,3);
EHJF<int>(1,2,3);
EHJG<int>(1,2,3);
EHJH<int>(1,2,3);
EHJI<int>(1,2,3);
EHJJ<int>(1,2,3);
EIAA<int>(1,2,3);
EIAB<int>(1,2,3);
EIAC<int>(1,2,3);
EIAD<int>(1,2,3);
EIAE<int>(1,2,3);
EIAF<int>(1,2,3);
EIAG<int>(1,2,3);
EIAH<int>(1,2,3);
EIAI<int>(1,2,3);
EIAJ<int>(1,2,3);
EIBA<int>(1,2,3);
EIBB<int>(1,2,3);
EIBC<int>(1,2,3);
EIBD<int>(1,2,3);
EIBE<int>(1,2,3);
EIBF<int>(1,2,3);
EIBG<int>(1,2,3);
EIBH<int>(1,2,3);
EIBI<int>(1,2,3);
EIBJ<int>(1,2,3);
EICA<int>(1,2,3);
EICB<int>(1,2,3);
EICC<int>(1,2,3);
EICD<int>(1,2,3);
EICE<int>(1,2,3);
EICF<int>(1,2,3);
EICG<int>(1,2,3);
EICH<int>(1,2,3);
EICI<int>(1,2,3);
EICJ<int>(1,2,3);
EIDA<int>(1,2,3);
EIDB<int>(1,2,3);
EIDC<int>(1,2,3);
EIDD<int>(1,2,3);
EIDE<int>(1,2,3);
EIDF<int>(1,2,3);
EIDG<int>(1,2,3);
EIDH<int>(1,2,3);
EIDI<int>(1,2,3);
EIDJ<int>(1,2,3);
EIEA<int>(1,2,3);
EIEB<int>(1,2,3);
EIEC<int>(1,2,3);
EIED<int>(1,2,3);
EIEE<int>(1,2,3);
EIEF<int>(1,2,3);
EIEG<int>(1,2,3);
EIEH<int>(1,2,3);
EIEI<int>(1,2,3);
EIEJ<int>(1,2,3);
EIFA<int>(1,2,3);
EIFB<int>(1,2,3);
EIFC<int>(1,2,3);
EIFD<int>(1,2,3);
EIFE<int>(1,2,3);
EIFF<int>(1,2,3);
EIFG<int>(1,2,3);
EIFH<int>(1,2,3);
EIFI<int>(1,2,3);
EIFJ<int>(1,2,3);
EIGA<int>(1,2,3);
EIGB<int>(1,2,3);
EIGC<int>(1,2,3);
EIGD<int>(1,2,3);
EIGE<int>(1,2,3);
EIGF<int>(1,2,3);
EIGG<int>(1,2,3);
EIGH<int>(1,2,3);
EIGI<int>(1,2,3);
EIGJ<int>(1,2,3);
EIHA<int>(1,2,3);
EIHB<int>(1,2,3);
EIHC<int>(1,2,3);
EIHD<int>(1,2,3);
EIHE<int>(1,2,3);
EIHF<int>(1,2,3);
EIHG<int>(1,2,3);
EIHH<int>(1,2,3);
EIHI<int>(1,2,3);
EIHJ<int>(1,2,3);
EIIA<int>(1,2,3);
EIIB<int>(1,2,3);
EIIC<int>(1,2,3);
EIID<int>(1,2,3);
EIIE<int>(1,2,3);
EIIF<int>(1,2,3);
EIIG<int>(1,2,3);
EIIH<int>(1,2,3);
EIII<int>(1,2,3);
EIIJ<int>(1,2,3);
EIJA<int>(1,2,3);
EIJB<int>(1,2,3);
EIJC<int>(1,2,3);
EIJD<int>(1,2,3);
EIJE<int>(1,2,3);
EIJF<int>(1,2,3);
EIJG<int>(1,2,3);
EIJH<int>(1,2,3);
EIJI<int>(1,2,3);
EIJJ<int>(1,2,3);
EJAA<int>(1,2,3);
EJAB<int>(1,2,3);
EJAC<int>(1,2,3);
EJAD<int>(1,2,3);
EJAE<int>(1,2,3);
EJAF<int>(1,2,3);
EJAG<int>(1,2,3);
EJAH<int>(1,2,3);
EJAI<int>(1,2,3);
EJAJ<int>(1,2,3);
EJBA<int>(1,2,3);
EJBB<int>(1,2,3);
EJBC<int>(1,2,3);
EJBD<int>(1,2,3);
EJBE<int>(1,2,3);
EJBF<int>(1,2,3);
EJBG<int>(1,2,3);
EJBH<int>(1,2,3);
EJBI<int>(1,2,3);
EJBJ<int>(1,2,3);
EJCA<int>(1,2,3);
EJCB<int>(1,2,3);
EJCC<int>(1,2,3);
EJCD<int>(1,2,3);
EJCE<int>(1,2,3);
EJCF<int>(1,2,3);
EJCG<int>(1,2,3);
EJCH<int>(1,2,3);
EJCI<int>(1,2,3);
EJCJ<int>(1,2,3);
EJDA<int>(1,2,3);
EJDB<int>(1,2,3);
EJDC<int>(1,2,3);
EJDD<int>(1,2,3);
EJDE<int>(1,2,3);
EJDF<int>(1,2,3);
EJDG<int>(1,2,3);
EJDH<int>(1,2,3);
EJDI<int>(1,2,3);
EJDJ<int>(1,2,3);
EJEA<int>(1,2,3);
EJEB<int>(1,2,3);
EJEC<int>(1,2,3);
EJED<int>(1,2,3);
EJEE<int>(1,2,3);
EJEF<int>(1,2,3);
EJEG<int>(1,2,3);
EJEH<int>(1,2,3);
EJEI<int>(1,2,3);
EJEJ<int>(1,2,3);
EJFA<int>(1,2,3);
EJFB<int>(1,2,3);
EJFC<int>(1,2,3);
EJFD<int>(1,2,3);
EJFE<int>(1,2,3);
EJFF<int>(1,2,3);
EJFG<int>(1,2,3);
EJFH<int>(1,2,3);
EJFI<int>(1,2,3);
EJFJ<int>(1,2,3);
EJGA<int>(1,2,3);
EJGB<int>(1,2,3);
EJGC<int>(1,2,3);
EJGD<int>(1,2,3);
EJGE<int>(1,2,3);
EJGF<int>(1,2,3);
EJGG<int>(1,2,3);
EJGH<int>(1,2,3);
EJGI<int>(1,2,3);
EJGJ<int>(1,2,3);
EJHA<int>(1,2,3);
EJHB<int>(1,2,3);
EJHC<int>(1,2,3);
EJHD<int>(1,2,3);
EJHE<int>(1,2,3);
EJHF<int>(1,2,3);
EJHG<int>(1,2,3);
EJHH<int>(1,2,3);
EJHI<int>(1,2,3);
EJHJ<int>(1,2,3);
EJIA<int>(1,2,3);
EJIB<int>(1,2,3);
EJIC<int>(1,2,3);
EJID<int>(1,2,3);
EJIE<int>(1,2,3);
EJIF<int>(1,2,3);
EJIG<int>(1,2,3);
EJIH<int>(1,2,3);
EJII<int>(1,2,3);
EJIJ<int>(1,2,3);
EJJA<int>(1,2,3);
EJJB<int>(1,2,3);
EJJC<int>(1,2,3);
EJJD<int>(1,2,3);
EJJE<int>(1,2,3);
EJJF<int>(1,2,3);
EJJG<int>(1,2,3);
EJJH<int>(1,2,3);
EJJI<int>(1,2,3);
EJJJ<int>(1,2,3);
FAAA<int>(1,2,3);
FAAB<int>(1,2,3);
FAAC<int>(1,2,3);
FAAD<int>(1,2,3);
FAAE<int>(1,2,3);
FAAF<int>(1,2,3);
FAAG<int>(1,2,3);
FAAH<int>(1,2,3);
FAAI<int>(1,2,3);
FAAJ<int>(1,2,3);
FABA<int>(1,2,3);
FABB<int>(1,2,3);
FABC<int>(1,2,3);
FABD<int>(1,2,3);
FABE<int>(1,2,3);
FABF<int>(1,2,3);
FABG<int>(1,2,3);
FABH<int>(1,2,3);
FABI<int>(1,2,3);
FABJ<int>(1,2,3);
FACA<int>(1,2,3);
FACB<int>(1,2,3);
FACC<int>(1,2,3);
FACD<int>(1,2,3);
FACE<int>(1,2,3);
FACF<int>(1,2,3);
FACG<int>(1,2,3);
FACH<int>(1,2,3);
FACI<int>(1,2,3);
FACJ<int>(1,2,3);
FADA<int>(1,2,3);
FADB<int>(1,2,3);
FADC<int>(1,2,3);
FADD<int>(1,2,3);
FADE<int>(1,2,3);
FADF<int>(1,2,3);
FADG<int>(1,2,3);
FADH<int>(1,2,3);
FADI<int>(1,2,3);
FADJ<int>(1,2,3);
FAEA<int>(1,2,3);
FAEB<int>(1,2,3);
FAEC<int>(1,2,3);
FAED<int>(1,2,3);
FAEE<int>(1,2,3);
FAEF<int>(1,2,3);
FAEG<int>(1,2,3);
FAEH<int>(1,2,3);
FAEI<int>(1,2,3);
FAEJ<int>(1,2,3);
FAFA<int>(1,2,3);
FAFB<int>(1,2,3);
FAFC<int>(1,2,3);
FAFD<int>(1,2,3);
FAFE<int>(1,2,3);
FAFF<int>(1,2,3);
FAFG<int>(1,2,3);
FAFH<int>(1,2,3);
FAFI<int>(1,2,3);
FAFJ<int>(1,2,3);
FAGA<int>(1,2,3);
FAGB<int>(1,2,3);
FAGC<int>(1,2,3);
FAGD<int>(1,2,3);
FAGE<int>(1,2,3);
FAGF<int>(1,2,3);
FAGG<int>(1,2,3);
FAGH<int>(1,2,3);
FAGI<int>(1,2,3);
FAGJ<int>(1,2,3);
FAHA<int>(1,2,3);
FAHB<int>(1,2,3);
FAHC<int>(1,2,3);
FAHD<int>(1,2,3);
FAHE<int>(1,2,3);
FAHF<int>(1,2,3);
FAHG<int>(1,2,3);
FAHH<int>(1,2,3);
FAHI<int>(1,2,3);
FAHJ<int>(1,2,3);
FAIA<int>(1,2,3);
FAIB<int>(1,2,3);
FAIC<int>(1,2,3);
FAID<int>(1,2,3);
FAIE<int>(1,2,3);
FAIF<int>(1,2,3);
FAIG<int>(1,2,3);
FAIH<int>(1,2,3);
FAII<int>(1,2,3);
FAIJ<int>(1,2,3);
FAJA<int>(1,2,3);
FAJB<int>(1,2,3);
FAJC<int>(1,2,3);
FAJD<int>(1,2,3);
FAJE<int>(1,2,3);
FAJF<int>(1,2,3);
FAJG<int>(1,2,3);
FAJH<int>(1,2,3);
FAJI<int>(1,2,3);
FAJJ<int>(1,2,3);
FBAA<int>(1,2,3);
FBAB<int>(1,2,3);
FBAC<int>(1,2,3);
FBAD<int>(1,2,3);
FBAE<int>(1,2,3);
FBAF<int>(1,2,3);
FBAG<int>(1,2,3);
FBAH<int>(1,2,3);
FBAI<int>(1,2,3);
FBAJ<int>(1,2,3);
FBBA<int>(1,2,3);
FBBB<int>(1,2,3);
FBBC<int>(1,2,3);
FBBD<int>(1,2,3);
FBBE<int>(1,2,3);
FBBF<int>(1,2,3);
FBBG<int>(1,2,3);
FBBH<int>(1,2,3);
FBBI<int>(1,2,3);
FBBJ<int>(1,2,3);
FBCA<int>(1,2,3);
FBCB<int>(1,2,3);
FBCC<int>(1,2,3);
FBCD<int>(1,2,3);
FBCE<int>(1,2,3);
FBCF<int>(1,2,3);
FBCG<int>(1,2,3);
FBCH<int>(1,2,3);
FBCI<int>(1,2,3);
FBCJ<int>(1,2,3);
FBDA<int>(1,2,3);
FBDB<int>(1,2,3);
FBDC<int>(1,2,3);
FBDD<int>(1,2,3);
FBDE<int>(1,2,3);
FBDF<int>(1,2,3);
FBDG<int>(1,2,3);
FBDH<int>(1,2,3);
FBDI<int>(1,2,3);
FBDJ<int>(1,2,3);
FBEA<int>(1,2,3);
FBEB<int>(1,2,3);
FBEC<int>(1,2,3);
FBED<int>(1,2,3);
FBEE<int>(1,2,3);
FBEF<int>(1,2,3);
FBEG<int>(1,2,3);
FBEH<int>(1,2,3);
FBEI<int>(1,2,3);
FBEJ<int>(1,2,3);
FBFA<int>(1,2,3);
FBFB<int>(1,2,3);
FBFC<int>(1,2,3);
FBFD<int>(1,2,3);
FBFE<int>(1,2,3);
FBFF<int>(1,2,3);
FBFG<int>(1,2,3);
FBFH<int>(1,2,3);
FBFI<int>(1,2,3);
FBFJ<int>(1,2,3);
FBGA<int>(1,2,3);
FBGB<int>(1,2,3);
FBGC<int>(1,2,3);
FBGD<int>(1,2,3);
FBGE<int>(1,2,3);
FBGF<int>(1,2,3);
FBGG<int>(1,2,3);
FBGH<int>(1,2,3);
FBGI<int>(1,2,3);
FBGJ<int>(1,2,3);
FBHA<int>(1,2,3);
FBHB<int>(1,2,3);
FBHC<int>(1,2,3);
FBHD<int>(1,2,3);
FBHE<int>(1,2,3);
FBHF<int>(1,2,3);
FBHG<int>(1,2,3);
FBHH<int>(1,2,3);
FBHI<int>(1,2,3);
FBHJ<int>(1,2,3);
FBIA<int>(1,2,3);
FBIB<int>(1,2,3);
FBIC<int>(1,2,3);
FBID<int>(1,2,3);
FBIE<int>(1,2,3);
FBIF<int>(1,2,3);
FBIG<int>(1,2,3);
FBIH<int>(1,2,3);
FBII<int>(1,2,3);
FBIJ<int>(1,2,3);
FBJA<int>(1,2,3);
FBJB<int>(1,2,3);
FBJC<int>(1,2,3);
FBJD<int>(1,2,3);
FBJE<int>(1,2,3);
FBJF<int>(1,2,3);
FBJG<int>(1,2,3);
FBJH<int>(1,2,3);
FBJI<int>(1,2,3);
FBJJ<int>(1,2,3);
FCAA<int>(1,2,3);
FCAB<int>(1,2,3);
FCAC<int>(1,2,3);
FCAD<int>(1,2,3);
FCAE<int>(1,2,3);
FCAF<int>(1,2,3);
FCAG<int>(1,2,3);
FCAH<int>(1,2,3);
FCAI<int>(1,2,3);
FCAJ<int>(1,2,3);
FCBA<int>(1,2,3);
FCBB<int>(1,2,3);
FCBC<int>(1,2,3);
FCBD<int>(1,2,3);
FCBE<int>(1,2,3);
FCBF<int>(1,2,3);
FCBG<int>(1,2,3);
FCBH<int>(1,2,3);
FCBI<int>(1,2,3);
FCBJ<int>(1,2,3);
FCCA<int>(1,2,3);
FCCB<int>(1,2,3);
FCCC<int>(1,2,3);
FCCD<int>(1,2,3);
FCCE<int>(1,2,3);
FCCF<int>(1,2,3);
FCCG<int>(1,2,3);
FCCH<int>(1,2,3);
FCCI<int>(1,2,3);
FCCJ<int>(1,2,3);
FCDA<int>(1,2,3);
FCDB<int>(1,2,3);
FCDC<int>(1,2,3);
FCDD<int>(1,2,3);
FCDE<int>(1,2,3);
FCDF<int>(1,2,3);
FCDG<int>(1,2,3);
FCDH<int>(1,2,3);
FCDI<int>(1,2,3);
FCDJ<int>(1,2,3);
FCEA<int>(1,2,3);
FCEB<int>(1,2,3);
FCEC<int>(1,2,3);
FCED<int>(1,2,3);
FCEE<int>(1,2,3);
FCEF<int>(1,2,3);
FCEG<int>(1,2,3);
FCEH<int>(1,2,3);
FCEI<int>(1,2,3);
FCEJ<int>(1,2,3);
FCFA<int>(1,2,3);
FCFB<int>(1,2,3);
FCFC<int>(1,2,3);
FCFD<int>(1,2,3);
FCFE<int>(1,2,3);
FCFF<int>(1,2,3);
FCFG<int>(1,2,3);
FCFH<int>(1,2,3);
FCFI<int>(1,2,3);
FCFJ<int>(1,2,3);
FCGA<int>(1,2,3);
FCGB<int>(1,2,3);
FCGC<int>(1,2,3);
FCGD<int>(1,2,3);
FCGE<int>(1,2,3);
FCGF<int>(1,2,3);
FCGG<int>(1,2,3);
FCGH<int>(1,2,3);
FCGI<int>(1,2,3);
FCGJ<int>(1,2,3);
FCHA<int>(1,2,3);
FCHB<int>(1,2,3);
FCHC<int>(1,2,3);
FCHD<int>(1,2,3);
FCHE<int>(1,2,3);
FCHF<int>(1,2,3);
FCHG<int>(1,2,3);
FCHH<int>(1,2,3);
FCHI<int>(1,2,3);
FCHJ<int>(1,2,3);
FCIA<int>(1,2,3);
FCIB<int>(1,2,3);
FCIC<int>(1,2,3);
FCID<int>(1,2,3);
FCIE<int>(1,2,3);
FCIF<int>(1,2,3);
FCIG<int>(1,2,3);
FCIH<int>(1,2,3);
FCII<int>(1,2,3);
FCIJ<int>(1,2,3);
FCJA<int>(1,2,3);
FCJB<int>(1,2,3);
FCJC<int>(1,2,3);
FCJD<int>(1,2,3);
FCJE<int>(1,2,3);
FCJF<int>(1,2,3);
FCJG<int>(1,2,3);
FCJH<int>(1,2,3);
FCJI<int>(1,2,3);
FCJJ<int>(1,2,3);
FDAA<int>(1,2,3);
FDAB<int>(1,2,3);
FDAC<int>(1,2,3);
FDAD<int>(1,2,3);
FDAE<int>(1,2,3);
FDAF<int>(1,2,3);
FDAG<int>(1,2,3);
FDAH<int>(1,2,3);
FDAI<int>(1,2,3);
FDAJ<int>(1,2,3);
FDBA<int>(1,2,3);
FDBB<int>(1,2,3);
FDBC<int>(1,2,3);
FDBD<int>(1,2,3);
FDBE<int>(1,2,3);
FDBF<int>(1,2,3);
FDBG<int>(1,2,3);
FDBH<int>(1,2,3);
FDBI<int>(1,2,3);
FDBJ<int>(1,2,3);
FDCA<int>(1,2,3);
FDCB<int>(1,2,3);
FDCC<int>(1,2,3);
FDCD<int>(1,2,3);
FDCE<int>(1,2,3);
FDCF<int>(1,2,3);
FDCG<int>(1,2,3);
FDCH<int>(1,2,3);
FDCI<int>(1,2,3);
FDCJ<int>(1,2,3);
FDDA<int>(1,2,3);
FDDB<int>(1,2,3);
FDDC<int>(1,2,3);
FDDD<int>(1,2,3);
FDDE<int>(1,2,3);
FDDF<int>(1,2,3);
FDDG<int>(1,2,3);
FDDH<int>(1,2,3);
FDDI<int>(1,2,3);
FDDJ<int>(1,2,3);
FDEA<int>(1,2,3);
FDEB<int>(1,2,3);
FDEC<int>(1,2,3);
FDED<int>(1,2,3);
FDEE<int>(1,2,3);
FDEF<int>(1,2,3);
FDEG<int>(1,2,3);
FDEH<int>(1,2,3);
FDEI<int>(1,2,3);
FDEJ<int>(1,2,3);
FDFA<int>(1,2,3);
FDFB<int>(1,2,3);
FDFC<int>(1,2,3);
FDFD<int>(1,2,3);
FDFE<int>(1,2,3);
FDFF<int>(1,2,3);
FDFG<int>(1,2,3);
FDFH<int>(1,2,3);
FDFI<int>(1,2,3);
FDFJ<int>(1,2,3);
FDGA<int>(1,2,3);
FDGB<int>(1,2,3);
FDGC<int>(1,2,3);
FDGD<int>(1,2,3);
FDGE<int>(1,2,3);
FDGF<int>(1,2,3);
FDGG<int>(1,2,3);
FDGH<int>(1,2,3);
FDGI<int>(1,2,3);
FDGJ<int>(1,2,3);
FDHA<int>(1,2,3);
FDHB<int>(1,2,3);
FDHC<int>(1,2,3);
FDHD<int>(1,2,3);
FDHE<int>(1,2,3);
FDHF<int>(1,2,3);
FDHG<int>(1,2,3);
FDHH<int>(1,2,3);
FDHI<int>(1,2,3);
FDHJ<int>(1,2,3);
FDIA<int>(1,2,3);
FDIB<int>(1,2,3);
FDIC<int>(1,2,3);
FDID<int>(1,2,3);
FDIE<int>(1,2,3);
FDIF<int>(1,2,3);
FDIG<int>(1,2,3);
FDIH<int>(1,2,3);
FDII<int>(1,2,3);
FDIJ<int>(1,2,3);
FDJA<int>(1,2,3);
FDJB<int>(1,2,3);
FDJC<int>(1,2,3);
FDJD<int>(1,2,3);
FDJE<int>(1,2,3);
FDJF<int>(1,2,3);
FDJG<int>(1,2,3);
FDJH<int>(1,2,3);
FDJI<int>(1,2,3);
FDJJ<int>(1,2,3);
FEAA<int>(1,2,3);
FEAB<int>(1,2,3);
FEAC<int>(1,2,3);
FEAD<int>(1,2,3);
FEAE<int>(1,2,3);
FEAF<int>(1,2,3);
FEAG<int>(1,2,3);
FEAH<int>(1,2,3);
FEAI<int>(1,2,3);
FEAJ<int>(1,2,3);
FEBA<int>(1,2,3);
FEBB<int>(1,2,3);
FEBC<int>(1,2,3);
FEBD<int>(1,2,3);
FEBE<int>(1,2,3);
FEBF<int>(1,2,3);
FEBG<int>(1,2,3);
FEBH<int>(1,2,3);
FEBI<int>(1,2,3);
FEBJ<int>(1,2,3);
FECA<int>(1,2,3);
FECB<int>(1,2,3);
FECC<int>(1,2,3);
FECD<int>(1,2,3);
FECE<int>(1,2,3);
FECF<int>(1,2,3);
FECG<int>(1,2,3);
FECH<int>(1,2,3);
FECI<int>(1,2,3);
FECJ<int>(1,2,3);
FEDA<int>(1,2,3);
FEDB<int>(1,2,3);
FEDC<int>(1,2,3);
FEDD<int>(1,2,3);
FEDE<int>(1,2,3);
FEDF<int>(1,2,3);
FEDG<int>(1,2,3);
FEDH<int>(1,2,3);
FEDI<int>(1,2,3);
FEDJ<int>(1,2,3);
FEEA<int>(1,2,3);
FEEB<int>(1,2,3);
FEEC<int>(1,2,3);
FEED<int>(1,2,3);
FEEE<int>(1,2,3);
FEEF<int>(1,2,3);
FEEG<int>(1,2,3);
FEEH<int>(1,2,3);
FEEI<int>(1,2,3);
FEEJ<int>(1,2,3);
FEFA<int>(1,2,3);
FEFB<int>(1,2,3);
FEFC<int>(1,2,3);
FEFD<int>(1,2,3);
FEFE<int>(1,2,3);
FEFF<int>(1,2,3);
FEFG<int>(1,2,3);
FEFH<int>(1,2,3);
FEFI<int>(1,2,3);
FEFJ<int>(1,2,3);
FEGA<int>(1,2,3);
FEGB<int>(1,2,3);
FEGC<int>(1,2,3);
FEGD<int>(1,2,3);
FEGE<int>(1,2,3);
FEGF<int>(1,2,3);
FEGG<int>(1,2,3);
FEGH<int>(1,2,3);
FEGI<int>(1,2,3);
FEGJ<int>(1,2,3);
FEHA<int>(1,2,3);
FEHB<int>(1,2,3);
FEHC<int>(1,2,3);
FEHD<int>(1,2,3);
FEHE<int>(1,2,3);
FEHF<int>(1,2,3);
FEHG<int>(1,2,3);
FEHH<int>(1,2,3);
FEHI<int>(1,2,3);
FEHJ<int>(1,2,3);
FEIA<int>(1,2,3);
FEIB<int>(1,2,3);
FEIC<int>(1,2,3);
FEID<int>(1,2,3);
FEIE<int>(1,2,3);
FEIF<int>(1,2,3);
FEIG<int>(1,2,3);
FEIH<int>(1,2,3);
FEII<int>(1,2,3);
FEIJ<int>(1,2,3);
FEJA<int>(1,2,3);
FEJB<int>(1,2,3);
FEJC<int>(1,2,3);
FEJD<int>(1,2,3);
FEJE<int>(1,2,3);
FEJF<int>(1,2,3);
FEJG<int>(1,2,3);
FEJH<int>(1,2,3);
FEJI<int>(1,2,3);
FEJJ<int>(1,2,3);
FFAA<int>(1,2,3);
FFAB<int>(1,2,3);
FFAC<int>(1,2,3);
FFAD<int>(1,2,3);
FFAE<int>(1,2,3);
FFAF<int>(1,2,3);
FFAG<int>(1,2,3);
FFAH<int>(1,2,3);
FFAI<int>(1,2,3);
FFAJ<int>(1,2,3);
FFBA<int>(1,2,3);
FFBB<int>(1,2,3);
FFBC<int>(1,2,3);
FFBD<int>(1,2,3);
FFBE<int>(1,2,3);
FFBF<int>(1,2,3);
FFBG<int>(1,2,3);
FFBH<int>(1,2,3);
FFBI<int>(1,2,3);
FFBJ<int>(1,2,3);
FFCA<int>(1,2,3);
FFCB<int>(1,2,3);
FFCC<int>(1,2,3);
FFCD<int>(1,2,3);
FFCE<int>(1,2,3);
FFCF<int>(1,2,3);
FFCG<int>(1,2,3);
FFCH<int>(1,2,3);
FFCI<int>(1,2,3);
FFCJ<int>(1,2,3);
FFDA<int>(1,2,3);
FFDB<int>(1,2,3);
FFDC<int>(1,2,3);
FFDD<int>(1,2,3);
FFDE<int>(1,2,3);
FFDF<int>(1,2,3);
FFDG<int>(1,2,3);
FFDH<int>(1,2,3);
FFDI<int>(1,2,3);
FFDJ<int>(1,2,3);
FFEA<int>(1,2,3);
FFEB<int>(1,2,3);
FFEC<int>(1,2,3);
FFED<int>(1,2,3);
FFEE<int>(1,2,3);
FFEF<int>(1,2,3);
FFEG<int>(1,2,3);
FFEH<int>(1,2,3);
FFEI<int>(1,2,3);
FFEJ<int>(1,2,3);
FFFA<int>(1,2,3);
FFFB<int>(1,2,3);
FFFC<int>(1,2,3);
FFFD<int>(1,2,3);
FFFE<int>(1,2,3);
FFFF<int>(1,2,3);
FFFG<int>(1,2,3);
FFFH<int>(1,2,3);
FFFI<int>(1,2,3);
FFFJ<int>(1,2,3);
FFGA<int>(1,2,3);
FFGB<int>(1,2,3);
FFGC<int>(1,2,3);
FFGD<int>(1,2,3);
FFGE<int>(1,2,3);
FFGF<int>(1,2,3);
FFGG<int>(1,2,3);
FFGH<int>(1,2,3);
FFGI<int>(1,2,3);
FFGJ<int>(1,2,3);
FFHA<int>(1,2,3);
FFHB<int>(1,2,3);
FFHC<int>(1,2,3);
FFHD<int>(1,2,3);
FFHE<int>(1,2,3);
FFHF<int>(1,2,3);
FFHG<int>(1,2,3);
FFHH<int>(1,2,3);
FFHI<int>(1,2,3);
FFHJ<int>(1,2,3);
FFIA<int>(1,2,3);
FFIB<int>(1,2,3);
FFIC<int>(1,2,3);
FFID<int>(1,2,3);
FFIE<int>(1,2,3);
FFIF<int>(1,2,3);
FFIG<int>(1,2,3);
FFIH<int>(1,2,3);
FFII<int>(1,2,3);
FFIJ<int>(1,2,3);
FFJA<int>(1,2,3);
FFJB<int>(1,2,3);
FFJC<int>(1,2,3);
FFJD<int>(1,2,3);
FFJE<int>(1,2,3);
FFJF<int>(1,2,3);
FFJG<int>(1,2,3);
FFJH<int>(1,2,3);
FFJI<int>(1,2,3);
FFJJ<int>(1,2,3);
FGAA<int>(1,2,3);
FGAB<int>(1,2,3);
FGAC<int>(1,2,3);
FGAD<int>(1,2,3);
FGAE<int>(1,2,3);
FGAF<int>(1,2,3);
FGAG<int>(1,2,3);
FGAH<int>(1,2,3);
FGAI<int>(1,2,3);
FGAJ<int>(1,2,3);
FGBA<int>(1,2,3);
FGBB<int>(1,2,3);
FGBC<int>(1,2,3);
FGBD<int>(1,2,3);
FGBE<int>(1,2,3);
FGBF<int>(1,2,3);
FGBG<int>(1,2,3);
FGBH<int>(1,2,3);
FGBI<int>(1,2,3);
FGBJ<int>(1,2,3);
FGCA<int>(1,2,3);
FGCB<int>(1,2,3);
FGCC<int>(1,2,3);
FGCD<int>(1,2,3);
FGCE<int>(1,2,3);
FGCF<int>(1,2,3);
FGCG<int>(1,2,3);
FGCH<int>(1,2,3);
FGCI<int>(1,2,3);
FGCJ<int>(1,2,3);
FGDA<int>(1,2,3);
FGDB<int>(1,2,3);
FGDC<int>(1,2,3);
FGDD<int>(1,2,3);
FGDE<int>(1,2,3);
FGDF<int>(1,2,3);
FGDG<int>(1,2,3);
FGDH<int>(1,2,3);
FGDI<int>(1,2,3);
FGDJ<int>(1,2,3);
FGEA<int>(1,2,3);
FGEB<int>(1,2,3);
FGEC<int>(1,2,3);
FGED<int>(1,2,3);
FGEE<int>(1,2,3);
FGEF<int>(1,2,3);
FGEG<int>(1,2,3);
FGEH<int>(1,2,3);
FGEI<int>(1,2,3);
FGEJ<int>(1,2,3);
FGFA<int>(1,2,3);
FGFB<int>(1,2,3);
FGFC<int>(1,2,3);
FGFD<int>(1,2,3);
FGFE<int>(1,2,3);
FGFF<int>(1,2,3);
FGFG<int>(1,2,3);
FGFH<int>(1,2,3);
FGFI<int>(1,2,3);
FGFJ<int>(1,2,3);
FGGA<int>(1,2,3);
FGGB<int>(1,2,3);
FGGC<int>(1,2,3);
FGGD<int>(1,2,3);
FGGE<int>(1,2,3);
FGGF<int>(1,2,3);
FGGG<int>(1,2,3);
FGGH<int>(1,2,3);
FGGI<int>(1,2,3);
FGGJ<int>(1,2,3);
FGHA<int>(1,2,3);
FGHB<int>(1,2,3);
FGHC<int>(1,2,3);
FGHD<int>(1,2,3);
FGHE<int>(1,2,3);
FGHF<int>(1,2,3);
FGHG<int>(1,2,3);
FGHH<int>(1,2,3);
FGHI<int>(1,2,3);
FGHJ<int>(1,2,3);
FGIA<int>(1,2,3);
FGIB<int>(1,2,3);
FGIC<int>(1,2,3);
FGID<int>(1,2,3);
FGIE<int>(1,2,3);
FGIF<int>(1,2,3);
FGIG<int>(1,2,3);
FGIH<int>(1,2,3);
FGII<int>(1,2,3);
FGIJ<int>(1,2,3);
FGJA<int>(1,2,3);
FGJB<int>(1,2,3);
FGJC<int>(1,2,3);
FGJD<int>(1,2,3);
FGJE<int>(1,2,3);
FGJF<int>(1,2,3);
FGJG<int>(1,2,3);
FGJH<int>(1,2,3);
FGJI<int>(1,2,3);
FGJJ<int>(1,2,3);
FHAA<int>(1,2,3);
FHAB<int>(1,2,3);
FHAC<int>(1,2,3);
FHAD<int>(1,2,3);
FHAE<int>(1,2,3);
FHAF<int>(1,2,3);
FHAG<int>(1,2,3);
FHAH<int>(1,2,3);
FHAI<int>(1,2,3);
FHAJ<int>(1,2,3);
FHBA<int>(1,2,3);
FHBB<int>(1,2,3);
FHBC<int>(1,2,3);
FHBD<int>(1,2,3);
FHBE<int>(1,2,3);
FHBF<int>(1,2,3);
FHBG<int>(1,2,3);
FHBH<int>(1,2,3);
FHBI<int>(1,2,3);
FHBJ<int>(1,2,3);
FHCA<int>(1,2,3);
FHCB<int>(1,2,3);
FHCC<int>(1,2,3);
FHCD<int>(1,2,3);
FHCE<int>(1,2,3);
FHCF<int>(1,2,3);
FHCG<int>(1,2,3);
FHCH<int>(1,2,3);
FHCI<int>(1,2,3);
FHCJ<int>(1,2,3);
FHDA<int>(1,2,3);
FHDB<int>(1,2,3);
FHDC<int>(1,2,3);
FHDD<int>(1,2,3);
FHDE<int>(1,2,3);
FHDF<int>(1,2,3);
FHDG<int>(1,2,3);
FHDH<int>(1,2,3);
FHDI<int>(1,2,3);
FHDJ<int>(1,2,3);
FHEA<int>(1,2,3);
FHEB<int>(1,2,3);
FHEC<int>(1,2,3);
FHED<int>(1,2,3);
FHEE<int>(1,2,3);
FHEF<int>(1,2,3);
FHEG<int>(1,2,3);
FHEH<int>(1,2,3);
FHEI<int>(1,2,3);
FHEJ<int>(1,2,3);
FHFA<int>(1,2,3);
FHFB<int>(1,2,3);
FHFC<int>(1,2,3);
FHFD<int>(1,2,3);
FHFE<int>(1,2,3);
FHFF<int>(1,2,3);
FHFG<int>(1,2,3);
FHFH<int>(1,2,3);
FHFI<int>(1,2,3);
FHFJ<int>(1,2,3);
FHGA<int>(1,2,3);
FHGB<int>(1,2,3);
FHGC<int>(1,2,3);
FHGD<int>(1,2,3);
FHGE<int>(1,2,3);
FHGF<int>(1,2,3);
FHGG<int>(1,2,3);
FHGH<int>(1,2,3);
FHGI<int>(1,2,3);
FHGJ<int>(1,2,3);
FHHA<int>(1,2,3);
FHHB<int>(1,2,3);
FHHC<int>(1,2,3);
FHHD<int>(1,2,3);
FHHE<int>(1,2,3);
FHHF<int>(1,2,3);
FHHG<int>(1,2,3);
FHHH<int>(1,2,3);
FHHI<int>(1,2,3);
FHHJ<int>(1,2,3);
FHIA<int>(1,2,3);
FHIB<int>(1,2,3);
FHIC<int>(1,2,3);
FHID<int>(1,2,3);
FHIE<int>(1,2,3);
FHIF<int>(1,2,3);
FHIG<int>(1,2,3);
FHIH<int>(1,2,3);
FHII<int>(1,2,3);
FHIJ<int>(1,2,3);
FHJA<int>(1,2,3);
FHJB<int>(1,2,3);
FHJC<int>(1,2,3);
FHJD<int>(1,2,3);
FHJE<int>(1,2,3);
FHJF<int>(1,2,3);
FHJG<int>(1,2,3);
FHJH<int>(1,2,3);
FHJI<int>(1,2,3);
FHJJ<int>(1,2,3);
FIAA<int>(1,2,3);
FIAB<int>(1,2,3);
FIAC<int>(1,2,3);
FIAD<int>(1,2,3);
FIAE<int>(1,2,3);
FIAF<int>(1,2,3);
FIAG<int>(1,2,3);
FIAH<int>(1,2,3);
FIAI<int>(1,2,3);
FIAJ<int>(1,2,3);
FIBA<int>(1,2,3);
FIBB<int>(1,2,3);
FIBC<int>(1,2,3);
FIBD<int>(1,2,3);
FIBE<int>(1,2,3);
FIBF<int>(1,2,3);
FIBG<int>(1,2,3);
FIBH<int>(1,2,3);
FIBI<int>(1,2,3);
FIBJ<int>(1,2,3);
FICA<int>(1,2,3);
FICB<int>(1,2,3);
FICC<int>(1,2,3);
FICD<int>(1,2,3);
FICE<int>(1,2,3);
FICF<int>(1,2,3);
FICG<int>(1,2,3);
FICH<int>(1,2,3);
FICI<int>(1,2,3);
FICJ<int>(1,2,3);
FIDA<int>(1,2,3);
FIDB<int>(1,2,3);
FIDC<int>(1,2,3);
FIDD<int>(1,2,3);
FIDE<int>(1,2,3);
FIDF<int>(1,2,3);
FIDG<int>(1,2,3);
FIDH<int>(1,2,3);
FIDI<int>(1,2,3);
FIDJ<int>(1,2,3);
FIEA<int>(1,2,3);
FIEB<int>(1,2,3);
FIEC<int>(1,2,3);
FIED<int>(1,2,3);
FIEE<int>(1,2,3);
FIEF<int>(1,2,3);
FIEG<int>(1,2,3);
FIEH<int>(1,2,3);
FIEI<int>(1,2,3);
FIEJ<int>(1,2,3);
FIFA<int>(1,2,3);
FIFB<int>(1,2,3);
FIFC<int>(1,2,3);
FIFD<int>(1,2,3);
FIFE<int>(1,2,3);
FIFF<int>(1,2,3);
FIFG<int>(1,2,3);
FIFH<int>(1,2,3);
FIFI<int>(1,2,3);
FIFJ<int>(1,2,3);
FIGA<int>(1,2,3);
FIGB<int>(1,2,3);
FIGC<int>(1,2,3);
FIGD<int>(1,2,3);
FIGE<int>(1,2,3);
FIGF<int>(1,2,3);
FIGG<int>(1,2,3);
FIGH<int>(1,2,3);
FIGI<int>(1,2,3);
FIGJ<int>(1,2,3);
FIHA<int>(1,2,3);
FIHB<int>(1,2,3);
FIHC<int>(1,2,3);
FIHD<int>(1,2,3);
FIHE<int>(1,2,3);
FIHF<int>(1,2,3);
FIHG<int>(1,2,3);
FIHH<int>(1,2,3);
FIHI<int>(1,2,3);
FIHJ<int>(1,2,3);
FIIA<int>(1,2,3);
FIIB<int>(1,2,3);
FIIC<int>(1,2,3);
FIID<int>(1,2,3);
FIIE<int>(1,2,3);
FIIF<int>(1,2,3);
FIIG<int>(1,2,3);
FIIH<int>(1,2,3);
FIII<int>(1,2,3);
FIIJ<int>(1,2,3);
FIJA<int>(1,2,3);
FIJB<int>(1,2,3);
FIJC<int>(1,2,3);
FIJD<int>(1,2,3);
FIJE<int>(1,2,3);
FIJF<int>(1,2,3);
FIJG<int>(1,2,3);
FIJH<int>(1,2,3);
FIJI<int>(1,2,3);
FIJJ<int>(1,2,3);
FJAA<int>(1,2,3);
FJAB<int>(1,2,3);
FJAC<int>(1,2,3);
FJAD<int>(1,2,3);
FJAE<int>(1,2,3);
FJAF<int>(1,2,3);
FJAG<int>(1,2,3);
FJAH<int>(1,2,3);
FJAI<int>(1,2,3);
FJAJ<int>(1,2,3);
FJBA<int>(1,2,3);
FJBB<int>(1,2,3);
FJBC<int>(1,2,3);
FJBD<int>(1,2,3);
FJBE<int>(1,2,3);
FJBF<int>(1,2,3);
FJBG<int>(1,2,3);
FJBH<int>(1,2,3);
FJBI<int>(1,2,3);
FJBJ<int>(1,2,3);
FJCA<int>(1,2,3);
FJCB<int>(1,2,3);
FJCC<int>(1,2,3);
FJCD<int>(1,2,3);
FJCE<int>(1,2,3);
FJCF<int>(1,2,3);
FJCG<int>(1,2,3);
FJCH<int>(1,2,3);
FJCI<int>(1,2,3);
FJCJ<int>(1,2,3);
FJDA<int>(1,2,3);
FJDB<int>(1,2,3);
FJDC<int>(1,2,3);
FJDD<int>(1,2,3);
FJDE<int>(1,2,3);
FJDF<int>(1,2,3);
FJDG<int>(1,2,3);
FJDH<int>(1,2,3);
FJDI<int>(1,2,3);
FJDJ<int>(1,2,3);
FJEA<int>(1,2,3);
FJEB<int>(1,2,3);
FJEC<int>(1,2,3);
FJED<int>(1,2,3);
FJEE<int>(1,2,3);
FJEF<int>(1,2,3);
FJEG<int>(1,2,3);
FJEH<int>(1,2,3);
FJEI<int>(1,2,3);
FJEJ<int>(1,2,3);
FJFA<int>(1,2,3);
FJFB<int>(1,2,3);
FJFC<int>(1,2,3);
FJFD<int>(1,2,3);
FJFE<int>(1,2,3);
FJFF<int>(1,2,3);
FJFG<int>(1,2,3);
FJFH<int>(1,2,3);
FJFI<int>(1,2,3);
FJFJ<int>(1,2,3);
FJGA<int>(1,2,3);
FJGB<int>(1,2,3);
FJGC<int>(1,2,3);
FJGD<int>(1,2,3);
FJGE<int>(1,2,3);
FJGF<int>(1,2,3);
FJGG<int>(1,2,3);
FJGH<int>(1,2,3);
FJGI<int>(1,2,3);
FJGJ<int>(1,2,3);
FJHA<int>(1,2,3);
FJHB<int>(1,2,3);
FJHC<int>(1,2,3);
FJHD<int>(1,2,3);
FJHE<int>(1,2,3);
FJHF<int>(1,2,3);
FJHG<int>(1,2,3);
FJHH<int>(1,2,3);
FJHI<int>(1,2,3);
FJHJ<int>(1,2,3);
FJIA<int>(1,2,3);
FJIB<int>(1,2,3);
FJIC<int>(1,2,3);
FJID<int>(1,2,3);
FJIE<int>(1,2,3);
FJIF<int>(1,2,3);
FJIG<int>(1,2,3);
FJIH<int>(1,2,3);
FJII<int>(1,2,3);
FJIJ<int>(1,2,3);
FJJA<int>(1,2,3);
FJJB<int>(1,2,3);
FJJC<int>(1,2,3);
FJJD<int>(1,2,3);
FJJE<int>(1,2,3);
FJJF<int>(1,2,3);
FJJG<int>(1,2,3);
FJJH<int>(1,2,3);
FJJI<int>(1,2,3);
FJJJ<int>(1,2,3);
GAAA<int>(1,2,3);
GAAB<int>(1,2,3);
GAAC<int>(1,2,3);
GAAD<int>(1,2,3);
GAAE<int>(1,2,3);
GAAF<int>(1,2,3);
GAAG<int>(1,2,3);
GAAH<int>(1,2,3);
GAAI<int>(1,2,3);
GAAJ<int>(1,2,3);
GABA<int>(1,2,3);
GABB<int>(1,2,3);
GABC<int>(1,2,3);
GABD<int>(1,2,3);
GABE<int>(1,2,3);
GABF<int>(1,2,3);
GABG<int>(1,2,3);
GABH<int>(1,2,3);
GABI<int>(1,2,3);
GABJ<int>(1,2,3);
GACA<int>(1,2,3);
GACB<int>(1,2,3);
GACC<int>(1,2,3);
GACD<int>(1,2,3);
GACE<int>(1,2,3);
GACF<int>(1,2,3);
GACG<int>(1,2,3);
GACH<int>(1,2,3);
GACI<int>(1,2,3);
GACJ<int>(1,2,3);
GADA<int>(1,2,3);
GADB<int>(1,2,3);
GADC<int>(1,2,3);
GADD<int>(1,2,3);
GADE<int>(1,2,3);
GADF<int>(1,2,3);
GADG<int>(1,2,3);
GADH<int>(1,2,3);
GADI<int>(1,2,3);
GADJ<int>(1,2,3);
GAEA<int>(1,2,3);
GAEB<int>(1,2,3);
GAEC<int>(1,2,3);
GAED<int>(1,2,3);
GAEE<int>(1,2,3);
GAEF<int>(1,2,3);
GAEG<int>(1,2,3);
GAEH<int>(1,2,3);
GAEI<int>(1,2,3);
GAEJ<int>(1,2,3);
GAFA<int>(1,2,3);
GAFB<int>(1,2,3);
GAFC<int>(1,2,3);
GAFD<int>(1,2,3);
GAFE<int>(1,2,3);
GAFF<int>(1,2,3);
GAFG<int>(1,2,3);
GAFH<int>(1,2,3);
GAFI<int>(1,2,3);
GAFJ<int>(1,2,3);
GAGA<int>(1,2,3);
GAGB<int>(1,2,3);
GAGC<int>(1,2,3);
GAGD<int>(1,2,3);
GAGE<int>(1,2,3);
GAGF<int>(1,2,3);
GAGG<int>(1,2,3);
GAGH<int>(1,2,3);
GAGI<int>(1,2,3);
GAGJ<int>(1,2,3);
GAHA<int>(1,2,3);
GAHB<int>(1,2,3);
GAHC<int>(1,2,3);
GAHD<int>(1,2,3);
GAHE<int>(1,2,3);
GAHF<int>(1,2,3);
GAHG<int>(1,2,3);
GAHH<int>(1,2,3);
GAHI<int>(1,2,3);
GAHJ<int>(1,2,3);
GAIA<int>(1,2,3);
GAIB<int>(1,2,3);
GAIC<int>(1,2,3);
GAID<int>(1,2,3);
GAIE<int>(1,2,3);
GAIF<int>(1,2,3);
GAIG<int>(1,2,3);
GAIH<int>(1,2,3);
GAII<int>(1,2,3);
GAIJ<int>(1,2,3);
GAJA<int>(1,2,3);
GAJB<int>(1,2,3);
GAJC<int>(1,2,3);
GAJD<int>(1,2,3);
GAJE<int>(1,2,3);
GAJF<int>(1,2,3);
GAJG<int>(1,2,3);
GAJH<int>(1,2,3);
GAJI<int>(1,2,3);
GAJJ<int>(1,2,3);
GBAA<int>(1,2,3);
GBAB<int>(1,2,3);
GBAC<int>(1,2,3);
GBAD<int>(1,2,3);
GBAE<int>(1,2,3);
GBAF<int>(1,2,3);
GBAG<int>(1,2,3);
GBAH<int>(1,2,3);
GBAI<int>(1,2,3);
GBAJ<int>(1,2,3);
GBBA<int>(1,2,3);
GBBB<int>(1,2,3);
GBBC<int>(1,2,3);
GBBD<int>(1,2,3);
GBBE<int>(1,2,3);
GBBF<int>(1,2,3);
GBBG<int>(1,2,3);
GBBH<int>(1,2,3);
GBBI<int>(1,2,3);
GBBJ<int>(1,2,3);
GBCA<int>(1,2,3);
GBCB<int>(1,2,3);
GBCC<int>(1,2,3);
GBCD<int>(1,2,3);
GBCE<int>(1,2,3);
GBCF<int>(1,2,3);
GBCG<int>(1,2,3);
GBCH<int>(1,2,3);
GBCI<int>(1,2,3);
GBCJ<int>(1,2,3);
GBDA<int>(1,2,3);
GBDB<int>(1,2,3);
GBDC<int>(1,2,3);
GBDD<int>(1,2,3);
GBDE<int>(1,2,3);
GBDF<int>(1,2,3);
GBDG<int>(1,2,3);
GBDH<int>(1,2,3);
GBDI<int>(1,2,3);
GBDJ<int>(1,2,3);
GBEA<int>(1,2,3);
GBEB<int>(1,2,3);
GBEC<int>(1,2,3);
GBED<int>(1,2,3);
GBEE<int>(1,2,3);
GBEF<int>(1,2,3);
GBEG<int>(1,2,3);
GBEH<int>(1,2,3);
GBEI<int>(1,2,3);
GBEJ<int>(1,2,3);
GBFA<int>(1,2,3);
GBFB<int>(1,2,3);
GBFC<int>(1,2,3);
GBFD<int>(1,2,3);
GBFE<int>(1,2,3);
GBFF<int>(1,2,3);
GBFG<int>(1,2,3);
GBFH<int>(1,2,3);
GBFI<int>(1,2,3);
GBFJ<int>(1,2,3);
GBGA<int>(1,2,3);
GBGB<int>(1,2,3);
GBGC<int>(1,2,3);
GBGD<int>(1,2,3);
GBGE<int>(1,2,3);
GBGF<int>(1,2,3);
GBGG<int>(1,2,3);
GBGH<int>(1,2,3);
GBGI<int>(1,2,3);
GBGJ<int>(1,2,3);
GBHA<int>(1,2,3);
GBHB<int>(1,2,3);
GBHC<int>(1,2,3);
GBHD<int>(1,2,3);
GBHE<int>(1,2,3);
GBHF<int>(1,2,3);
GBHG<int>(1,2,3);
GBHH<int>(1,2,3);
GBHI<int>(1,2,3);
GBHJ<int>(1,2,3);
GBIA<int>(1,2,3);
GBIB<int>(1,2,3);
GBIC<int>(1,2,3);
GBID<int>(1,2,3);
GBIE<int>(1,2,3);
GBIF<int>(1,2,3);
GBIG<int>(1,2,3);
GBIH<int>(1,2,3);
GBII<int>(1,2,3);
GBIJ<int>(1,2,3);
GBJA<int>(1,2,3);
GBJB<int>(1,2,3);
GBJC<int>(1,2,3);
GBJD<int>(1,2,3);
GBJE<int>(1,2,3);
GBJF<int>(1,2,3);
GBJG<int>(1,2,3);
GBJH<int>(1,2,3);
GBJI<int>(1,2,3);
GBJJ<int>(1,2,3);
GCAA<int>(1,2,3);
GCAB<int>(1,2,3);
GCAC<int>(1,2,3);
GCAD<int>(1,2,3);
GCAE<int>(1,2,3);
GCAF<int>(1,2,3);
GCAG<int>(1,2,3);
GCAH<int>(1,2,3);
GCAI<int>(1,2,3);
GCAJ<int>(1,2,3);
GCBA<int>(1,2,3);
GCBB<int>(1,2,3);
GCBC<int>(1,2,3);
GCBD<int>(1,2,3);
GCBE<int>(1,2,3);
GCBF<int>(1,2,3);
GCBG<int>(1,2,3);
GCBH<int>(1,2,3);
GCBI<int>(1,2,3);
GCBJ<int>(1,2,3);
GCCA<int>(1,2,3);
GCCB<int>(1,2,3);
GCCC<int>(1,2,3);
GCCD<int>(1,2,3);
GCCE<int>(1,2,3);
GCCF<int>(1,2,3);
GCCG<int>(1,2,3);
GCCH<int>(1,2,3);
GCCI<int>(1,2,3);
GCCJ<int>(1,2,3);
GCDA<int>(1,2,3);
GCDB<int>(1,2,3);
GCDC<int>(1,2,3);
GCDD<int>(1,2,3);
GCDE<int>(1,2,3);
GCDF<int>(1,2,3);
GCDG<int>(1,2,3);
GCDH<int>(1,2,3);
GCDI<int>(1,2,3);
GCDJ<int>(1,2,3);
GCEA<int>(1,2,3);
GCEB<int>(1,2,3);
GCEC<int>(1,2,3);
GCED<int>(1,2,3);
GCEE<int>(1,2,3);
GCEF<int>(1,2,3);
GCEG<int>(1,2,3);
GCEH<int>(1,2,3);
GCEI<int>(1,2,3);
GCEJ<int>(1,2,3);
GCFA<int>(1,2,3);
GCFB<int>(1,2,3);
GCFC<int>(1,2,3);
GCFD<int>(1,2,3);
GCFE<int>(1,2,3);
GCFF<int>(1,2,3);
GCFG<int>(1,2,3);
GCFH<int>(1,2,3);
GCFI<int>(1,2,3);
GCFJ<int>(1,2,3);
GCGA<int>(1,2,3);
GCGB<int>(1,2,3);
GCGC<int>(1,2,3);
GCGD<int>(1,2,3);
GCGE<int>(1,2,3);
GCGF<int>(1,2,3);
GCGG<int>(1,2,3);
GCGH<int>(1,2,3);
GCGI<int>(1,2,3);
GCGJ<int>(1,2,3);
GCHA<int>(1,2,3);
GCHB<int>(1,2,3);
GCHC<int>(1,2,3);
GCHD<int>(1,2,3);
GCHE<int>(1,2,3);
GCHF<int>(1,2,3);
GCHG<int>(1,2,3);
GCHH<int>(1,2,3);
GCHI<int>(1,2,3);
GCHJ<int>(1,2,3);
GCIA<int>(1,2,3);
GCIB<int>(1,2,3);
GCIC<int>(1,2,3);
GCID<int>(1,2,3);
GCIE<int>(1,2,3);
GCIF<int>(1,2,3);
GCIG<int>(1,2,3);
GCIH<int>(1,2,3);
GCII<int>(1,2,3);
GCIJ<int>(1,2,3);
GCJA<int>(1,2,3);
GCJB<int>(1,2,3);
GCJC<int>(1,2,3);
GCJD<int>(1,2,3);
GCJE<int>(1,2,3);
GCJF<int>(1,2,3);
GCJG<int>(1,2,3);
GCJH<int>(1,2,3);
GCJI<int>(1,2,3);
GCJJ<int>(1,2,3);
GDAA<int>(1,2,3);
GDAB<int>(1,2,3);
GDAC<int>(1,2,3);
GDAD<int>(1,2,3);
GDAE<int>(1,2,3);
GDAF<int>(1,2,3);
GDAG<int>(1,2,3);
GDAH<int>(1,2,3);
GDAI<int>(1,2,3);
GDAJ<int>(1,2,3);
GDBA<int>(1,2,3);
GDBB<int>(1,2,3);
GDBC<int>(1,2,3);
GDBD<int>(1,2,3);
GDBE<int>(1,2,3);
GDBF<int>(1,2,3);
GDBG<int>(1,2,3);
GDBH<int>(1,2,3);
GDBI<int>(1,2,3);
GDBJ<int>(1,2,3);
GDCA<int>(1,2,3);
GDCB<int>(1,2,3);
GDCC<int>(1,2,3);
GDCD<int>(1,2,3);
GDCE<int>(1,2,3);
GDCF<int>(1,2,3);
GDCG<int>(1,2,3);
GDCH<int>(1,2,3);
GDCI<int>(1,2,3);
GDCJ<int>(1,2,3);
GDDA<int>(1,2,3);
GDDB<int>(1,2,3);
GDDC<int>(1,2,3);
GDDD<int>(1,2,3);
GDDE<int>(1,2,3);
GDDF<int>(1,2,3);
GDDG<int>(1,2,3);
GDDH<int>(1,2,3);
GDDI<int>(1,2,3);
GDDJ<int>(1,2,3);
GDEA<int>(1,2,3);
GDEB<int>(1,2,3);
GDEC<int>(1,2,3);
GDED<int>(1,2,3);
GDEE<int>(1,2,3);
GDEF<int>(1,2,3);
GDEG<int>(1,2,3);
GDEH<int>(1,2,3);
GDEI<int>(1,2,3);
GDEJ<int>(1,2,3);
GDFA<int>(1,2,3);
GDFB<int>(1,2,3);
GDFC<int>(1,2,3);
GDFD<int>(1,2,3);
GDFE<int>(1,2,3);
GDFF<int>(1,2,3);
GDFG<int>(1,2,3);
GDFH<int>(1,2,3);
GDFI<int>(1,2,3);
GDFJ<int>(1,2,3);
GDGA<int>(1,2,3);
GDGB<int>(1,2,3);
GDGC<int>(1,2,3);
GDGD<int>(1,2,3);
GDGE<int>(1,2,3);
GDGF<int>(1,2,3);
GDGG<int>(1,2,3);
GDGH<int>(1,2,3);
GDGI<int>(1,2,3);
GDGJ<int>(1,2,3);
GDHA<int>(1,2,3);
GDHB<int>(1,2,3);
GDHC<int>(1,2,3);
GDHD<int>(1,2,3);
GDHE<int>(1,2,3);
GDHF<int>(1,2,3);
GDHG<int>(1,2,3);
GDHH<int>(1,2,3);
GDHI<int>(1,2,3);
GDHJ<int>(1,2,3);
GDIA<int>(1,2,3);
GDIB<int>(1,2,3);
GDIC<int>(1,2,3);
GDID<int>(1,2,3);
GDIE<int>(1,2,3);
GDIF<int>(1,2,3);
GDIG<int>(1,2,3);
GDIH<int>(1,2,3);
GDII<int>(1,2,3);
GDIJ<int>(1,2,3);
GDJA<int>(1,2,3);
GDJB<int>(1,2,3);
GDJC<int>(1,2,3);
GDJD<int>(1,2,3);
GDJE<int>(1,2,3);
GDJF<int>(1,2,3);
GDJG<int>(1,2,3);
GDJH<int>(1,2,3);
GDJI<int>(1,2,3);
GDJJ<int>(1,2,3);
GEAA<int>(1,2,3);
GEAB<int>(1,2,3);
GEAC<int>(1,2,3);
GEAD<int>(1,2,3);
GEAE<int>(1,2,3);
GEAF<int>(1,2,3);
GEAG<int>(1,2,3);
GEAH<int>(1,2,3);
GEAI<int>(1,2,3);
GEAJ<int>(1,2,3);
GEBA<int>(1,2,3);
GEBB<int>(1,2,3);
GEBC<int>(1,2,3);
GEBD<int>(1,2,3);
GEBE<int>(1,2,3);
GEBF<int>(1,2,3);
GEBG<int>(1,2,3);
GEBH<int>(1,2,3);
GEBI<int>(1,2,3);
GEBJ<int>(1,2,3);
GECA<int>(1,2,3);
GECB<int>(1,2,3);
GECC<int>(1,2,3);
GECD<int>(1,2,3);
GECE<int>(1,2,3);
GECF<int>(1,2,3);
GECG<int>(1,2,3);
GECH<int>(1,2,3);
GECI<int>(1,2,3);
GECJ<int>(1,2,3);
GEDA<int>(1,2,3);
GEDB<int>(1,2,3);
GEDC<int>(1,2,3);
GEDD<int>(1,2,3);
GEDE<int>(1,2,3);
GEDF<int>(1,2,3);
GEDG<int>(1,2,3);
GEDH<int>(1,2,3);
GEDI<int>(1,2,3);
GEDJ<int>(1,2,3);
GEEA<int>(1,2,3);
GEEB<int>(1,2,3);
GEEC<int>(1,2,3);
GEED<int>(1,2,3);
GEEE<int>(1,2,3);
GEEF<int>(1,2,3);
GEEG<int>(1,2,3);
GEEH<int>(1,2,3);
GEEI<int>(1,2,3);
GEEJ<int>(1,2,3);
GEFA<int>(1,2,3);
GEFB<int>(1,2,3);
GEFC<int>(1,2,3);
GEFD<int>(1,2,3);
GEFE<int>(1,2,3);
GEFF<int>(1,2,3);
GEFG<int>(1,2,3);
GEFH<int>(1,2,3);
GEFI<int>(1,2,3);
GEFJ<int>(1,2,3);
GEGA<int>(1,2,3);
GEGB<int>(1,2,3);
GEGC<int>(1,2,3);
GEGD<int>(1,2,3);
GEGE<int>(1,2,3);
GEGF<int>(1,2,3);
GEGG<int>(1,2,3);
GEGH<int>(1,2,3);
GEGI<int>(1,2,3);
GEGJ<int>(1,2,3);
GEHA<int>(1,2,3);
GEHB<int>(1,2,3);
GEHC<int>(1,2,3);
GEHD<int>(1,2,3);
GEHE<int>(1,2,3);
GEHF<int>(1,2,3);
GEHG<int>(1,2,3);
GEHH<int>(1,2,3);
GEHI<int>(1,2,3);
GEHJ<int>(1,2,3);
GEIA<int>(1,2,3);
GEIB<int>(1,2,3);
GEIC<int>(1,2,3);
GEID<int>(1,2,3);
GEIE<int>(1,2,3);
GEIF<int>(1,2,3);
GEIG<int>(1,2,3);
GEIH<int>(1,2,3);
GEII<int>(1,2,3);
GEIJ<int>(1,2,3);
GEJA<int>(1,2,3);
GEJB<int>(1,2,3);
GEJC<int>(1,2,3);
GEJD<int>(1,2,3);
GEJE<int>(1,2,3);
GEJF<int>(1,2,3);
GEJG<int>(1,2,3);
GEJH<int>(1,2,3);
GEJI<int>(1,2,3);
GEJJ<int>(1,2,3);
GFAA<int>(1,2,3);
GFAB<int>(1,2,3);
GFAC<int>(1,2,3);
GFAD<int>(1,2,3);
GFAE<int>(1,2,3);
GFAF<int>(1,2,3);
GFAG<int>(1,2,3);
GFAH<int>(1,2,3);
GFAI<int>(1,2,3);
GFAJ<int>(1,2,3);
GFBA<int>(1,2,3);
GFBB<int>(1,2,3);
GFBC<int>(1,2,3);
GFBD<int>(1,2,3);
GFBE<int>(1,2,3);
GFBF<int>(1,2,3);
GFBG<int>(1,2,3);
GFBH<int>(1,2,3);
GFBI<int>(1,2,3);
GFBJ<int>(1,2,3);
GFCA<int>(1,2,3);
GFCB<int>(1,2,3);
GFCC<int>(1,2,3);
GFCD<int>(1,2,3);
GFCE<int>(1,2,3);
GFCF<int>(1,2,3);
GFCG<int>(1,2,3);
GFCH<int>(1,2,3);
GFCI<int>(1,2,3);
GFCJ<int>(1,2,3);
GFDA<int>(1,2,3);
GFDB<int>(1,2,3);
GFDC<int>(1,2,3);
GFDD<int>(1,2,3);
GFDE<int>(1,2,3);
GFDF<int>(1,2,3);
GFDG<int>(1,2,3);
GFDH<int>(1,2,3);
GFDI<int>(1,2,3);
GFDJ<int>(1,2,3);
GFEA<int>(1,2,3);
GFEB<int>(1,2,3);
GFEC<int>(1,2,3);
GFED<int>(1,2,3);
GFEE<int>(1,2,3);
GFEF<int>(1,2,3);
GFEG<int>(1,2,3);
GFEH<int>(1,2,3);
GFEI<int>(1,2,3);
GFEJ<int>(1,2,3);
GFFA<int>(1,2,3);
GFFB<int>(1,2,3);
GFFC<int>(1,2,3);
GFFD<int>(1,2,3);
GFFE<int>(1,2,3);
GFFF<int>(1,2,3);
GFFG<int>(1,2,3);
GFFH<int>(1,2,3);
GFFI<int>(1,2,3);
GFFJ<int>(1,2,3);
GFGA<int>(1,2,3);
GFGB<int>(1,2,3);
GFGC<int>(1,2,3);
GFGD<int>(1,2,3);
GFGE<int>(1,2,3);
GFGF<int>(1,2,3);
GFGG<int>(1,2,3);
GFGH<int>(1,2,3);
GFGI<int>(1,2,3);
GFGJ<int>(1,2,3);
GFHA<int>(1,2,3);
GFHB<int>(1,2,3);
GFHC<int>(1,2,3);
GFHD<int>(1,2,3);
GFHE<int>(1,2,3);
GFHF<int>(1,2,3);
GFHG<int>(1,2,3);
GFHH<int>(1,2,3);
GFHI<int>(1,2,3);
GFHJ<int>(1,2,3);
GFIA<int>(1,2,3);
GFIB<int>(1,2,3);
GFIC<int>(1,2,3);
GFID<int>(1,2,3);
GFIE<int>(1,2,3);
GFIF<int>(1,2,3);
GFIG<int>(1,2,3);
GFIH<int>(1,2,3);
GFII<int>(1,2,3);
GFIJ<int>(1,2,3);
GFJA<int>(1,2,3);
GFJB<int>(1,2,3);
GFJC<int>(1,2,3);
GFJD<int>(1,2,3);
GFJE<int>(1,2,3);
GFJF<int>(1,2,3);
GFJG<int>(1,2,3);
GFJH<int>(1,2,3);
GFJI<int>(1,2,3);
GFJJ<int>(1,2,3);
GGAA<int>(1,2,3);
GGAB<int>(1,2,3);
GGAC<int>(1,2,3);
GGAD<int>(1,2,3);
GGAE<int>(1,2,3);
GGAF<int>(1,2,3);
GGAG<int>(1,2,3);
GGAH<int>(1,2,3);
GGAI<int>(1,2,3);
GGAJ<int>(1,2,3);
GGBA<int>(1,2,3);
GGBB<int>(1,2,3);
GGBC<int>(1,2,3);
GGBD<int>(1,2,3);
GGBE<int>(1,2,3);
GGBF<int>(1,2,3);
GGBG<int>(1,2,3);
GGBH<int>(1,2,3);
GGBI<int>(1,2,3);
GGBJ<int>(1,2,3);
GGCA<int>(1,2,3);
GGCB<int>(1,2,3);
GGCC<int>(1,2,3);
GGCD<int>(1,2,3);
GGCE<int>(1,2,3);
GGCF<int>(1,2,3);
GGCG<int>(1,2,3);
GGCH<int>(1,2,3);
GGCI<int>(1,2,3);
GGCJ<int>(1,2,3);
GGDA<int>(1,2,3);
GGDB<int>(1,2,3);
GGDC<int>(1,2,3);
GGDD<int>(1,2,3);
GGDE<int>(1,2,3);
GGDF<int>(1,2,3);
GGDG<int>(1,2,3);
GGDH<int>(1,2,3);
GGDI<int>(1,2,3);
GGDJ<int>(1,2,3);
GGEA<int>(1,2,3);
GGEB<int>(1,2,3);
GGEC<int>(1,2,3);
GGED<int>(1,2,3);
GGEE<int>(1,2,3);
GGEF<int>(1,2,3);
GGEG<int>(1,2,3);
GGEH<int>(1,2,3);
GGEI<int>(1,2,3);
GGEJ<int>(1,2,3);
GGFA<int>(1,2,3);
GGFB<int>(1,2,3);
GGFC<int>(1,2,3);
GGFD<int>(1,2,3);
GGFE<int>(1,2,3);
GGFF<int>(1,2,3);
GGFG<int>(1,2,3);
GGFH<int>(1,2,3);
GGFI<int>(1,2,3);
GGFJ<int>(1,2,3);
GGGA<int>(1,2,3);
GGGB<int>(1,2,3);
GGGC<int>(1,2,3);
GGGD<int>(1,2,3);
GGGE<int>(1,2,3);
GGGF<int>(1,2,3);
GGGG<int>(1,2,3);
GGGH<int>(1,2,3);
GGGI<int>(1,2,3);
GGGJ<int>(1,2,3);
GGHA<int>(1,2,3);
GGHB<int>(1,2,3);
GGHC<int>(1,2,3);
GGHD<int>(1,2,3);
GGHE<int>(1,2,3);
GGHF<int>(1,2,3);
GGHG<int>(1,2,3);
GGHH<int>(1,2,3);
GGHI<int>(1,2,3);
GGHJ<int>(1,2,3);
GGIA<int>(1,2,3);
GGIB<int>(1,2,3);
GGIC<int>(1,2,3);
GGID<int>(1,2,3);
GGIE<int>(1,2,3);
GGIF<int>(1,2,3);
GGIG<int>(1,2,3);
GGIH<int>(1,2,3);
GGII<int>(1,2,3);
GGIJ<int>(1,2,3);
GGJA<int>(1,2,3);
GGJB<int>(1,2,3);
GGJC<int>(1,2,3);
GGJD<int>(1,2,3);
GGJE<int>(1,2,3);
GGJF<int>(1,2,3);
GGJG<int>(1,2,3);
GGJH<int>(1,2,3);
GGJI<int>(1,2,3);
GGJJ<int>(1,2,3);
GHAA<int>(1,2,3);
GHAB<int>(1,2,3);
GHAC<int>(1,2,3);
GHAD<int>(1,2,3);
GHAE<int>(1,2,3);
GHAF<int>(1,2,3);
GHAG<int>(1,2,3);
GHAH<int>(1,2,3);
GHAI<int>(1,2,3);
GHAJ<int>(1,2,3);
GHBA<int>(1,2,3);
GHBB<int>(1,2,3);
GHBC<int>(1,2,3);
GHBD<int>(1,2,3);
GHBE<int>(1,2,3);
GHBF<int>(1,2,3);
GHBG<int>(1,2,3);
GHBH<int>(1,2,3);
GHBI<int>(1,2,3);
GHBJ<int>(1,2,3);
GHCA<int>(1,2,3);
GHCB<int>(1,2,3);
GHCC<int>(1,2,3);
GHCD<int>(1,2,3);
GHCE<int>(1,2,3);
GHCF<int>(1,2,3);
GHCG<int>(1,2,3);
GHCH<int>(1,2,3);
GHCI<int>(1,2,3);
GHCJ<int>(1,2,3);
GHDA<int>(1,2,3);
GHDB<int>(1,2,3);
GHDC<int>(1,2,3);
GHDD<int>(1,2,3);
GHDE<int>(1,2,3);
GHDF<int>(1,2,3);
GHDG<int>(1,2,3);
GHDH<int>(1,2,3);
GHDI<int>(1,2,3);
GHDJ<int>(1,2,3);
GHEA<int>(1,2,3);
GHEB<int>(1,2,3);
GHEC<int>(1,2,3);
GHED<int>(1,2,3);
GHEE<int>(1,2,3);
GHEF<int>(1,2,3);
GHEG<int>(1,2,3);
GHEH<int>(1,2,3);
GHEI<int>(1,2,3);
GHEJ<int>(1,2,3);
GHFA<int>(1,2,3);
GHFB<int>(1,2,3);
GHFC<int>(1,2,3);
GHFD<int>(1,2,3);
GHFE<int>(1,2,3);
GHFF<int>(1,2,3);
GHFG<int>(1,2,3);
GHFH<int>(1,2,3);
GHFI<int>(1,2,3);
GHFJ<int>(1,2,3);
GHGA<int>(1,2,3);
GHGB<int>(1,2,3);
GHGC<int>(1,2,3);
GHGD<int>(1,2,3);
GHGE<int>(1,2,3);
GHGF<int>(1,2,3);
GHGG<int>(1,2,3);
GHGH<int>(1,2,3);
GHGI<int>(1,2,3);
GHGJ<int>(1,2,3);
GHHA<int>(1,2,3);
GHHB<int>(1,2,3);
GHHC<int>(1,2,3);
GHHD<int>(1,2,3);
GHHE<int>(1,2,3);
GHHF<int>(1,2,3);
GHHG<int>(1,2,3);
GHHH<int>(1,2,3);
GHHI<int>(1,2,3);
GHHJ<int>(1,2,3);
GHIA<int>(1,2,3);
GHIB<int>(1,2,3);
GHIC<int>(1,2,3);
GHID<int>(1,2,3);
GHIE<int>(1,2,3);
GHIF<int>(1,2,3);
GHIG<int>(1,2,3);
GHIH<int>(1,2,3);
GHII<int>(1,2,3);
GHIJ<int>(1,2,3);
GHJA<int>(1,2,3);
GHJB<int>(1,2,3);
GHJC<int>(1,2,3);
GHJD<int>(1,2,3);
GHJE<int>(1,2,3);
GHJF<int>(1,2,3);
GHJG<int>(1,2,3);
GHJH<int>(1,2,3);
GHJI<int>(1,2,3);
GHJJ<int>(1,2,3);
GIAA<int>(1,2,3);
GIAB<int>(1,2,3);
GIAC<int>(1,2,3);
GIAD<int>(1,2,3);
GIAE<int>(1,2,3);
GIAF<int>(1,2,3);
GIAG<int>(1,2,3);
GIAH<int>(1,2,3);
GIAI<int>(1,2,3);
GIAJ<int>(1,2,3);
GIBA<int>(1,2,3);
GIBB<int>(1,2,3);
GIBC<int>(1,2,3);
GIBD<int>(1,2,3);
GIBE<int>(1,2,3);
GIBF<int>(1,2,3);
GIBG<int>(1,2,3);
GIBH<int>(1,2,3);
GIBI<int>(1,2,3);
GIBJ<int>(1,2,3);
GICA<int>(1,2,3);
GICB<int>(1,2,3);
GICC<int>(1,2,3);
GICD<int>(1,2,3);
GICE<int>(1,2,3);
GICF<int>(1,2,3);
GICG<int>(1,2,3);
GICH<int>(1,2,3);
GICI<int>(1,2,3);
GICJ<int>(1,2,3);
GIDA<int>(1,2,3);
GIDB<int>(1,2,3);
GIDC<int>(1,2,3);
GIDD<int>(1,2,3);
GIDE<int>(1,2,3);
GIDF<int>(1,2,3);
GIDG<int>(1,2,3);
GIDH<int>(1,2,3);
GIDI<int>(1,2,3);
GIDJ<int>(1,2,3);
GIEA<int>(1,2,3);
GIEB<int>(1,2,3);
GIEC<int>(1,2,3);
GIED<int>(1,2,3);
GIEE<int>(1,2,3);
GIEF<int>(1,2,3);
GIEG<int>(1,2,3);
GIEH<int>(1,2,3);
GIEI<int>(1,2,3);
GIEJ<int>(1,2,3);
GIFA<int>(1,2,3);
GIFB<int>(1,2,3);
GIFC<int>(1,2,3);
GIFD<int>(1,2,3);
GIFE<int>(1,2,3);
GIFF<int>(1,2,3);
GIFG<int>(1,2,3);
GIFH<int>(1,2,3);
GIFI<int>(1,2,3);
GIFJ<int>(1,2,3);
GIGA<int>(1,2,3);
GIGB<int>(1,2,3);
GIGC<int>(1,2,3);
GIGD<int>(1,2,3);
GIGE<int>(1,2,3);
GIGF<int>(1,2,3);
GIGG<int>(1,2,3);
GIGH<int>(1,2,3);
GIGI<int>(1,2,3);
GIGJ<int>(1,2,3);
GIHA<int>(1,2,3);
GIHB<int>(1,2,3);
GIHC<int>(1,2,3);
GIHD<int>(1,2,3);
GIHE<int>(1,2,3);
GIHF<int>(1,2,3);
GIHG<int>(1,2,3);
GIHH<int>(1,2,3);
GIHI<int>(1,2,3);
GIHJ<int>(1,2,3);
GIIA<int>(1,2,3);
GIIB<int>(1,2,3);
GIIC<int>(1,2,3);
GIID<int>(1,2,3);
GIIE<int>(1,2,3);
GIIF<int>(1,2,3);
GIIG<int>(1,2,3);
GIIH<int>(1,2,3);
GIII<int>(1,2,3);
GIIJ<int>(1,2,3);
GIJA<int>(1,2,3);
GIJB<int>(1,2,3);
GIJC<int>(1,2,3);
GIJD<int>(1,2,3);
GIJE<int>(1,2,3);
GIJF<int>(1,2,3);
GIJG<int>(1,2,3);
GIJH<int>(1,2,3);
GIJI<int>(1,2,3);
GIJJ<int>(1,2,3);
GJAA<int>(1,2,3);
GJAB<int>(1,2,3);
GJAC<int>(1,2,3);
GJAD<int>(1,2,3);
GJAE<int>(1,2,3);
GJAF<int>(1,2,3);
GJAG<int>(1,2,3);
GJAH<int>(1,2,3);
GJAI<int>(1,2,3);
GJAJ<int>(1,2,3);
GJBA<int>(1,2,3);
GJBB<int>(1,2,3);
GJBC<int>(1,2,3);
GJBD<int>(1,2,3);
GJBE<int>(1,2,3);
GJBF<int>(1,2,3);
GJBG<int>(1,2,3);
GJBH<int>(1,2,3);
GJBI<int>(1,2,3);
GJBJ<int>(1,2,3);
GJCA<int>(1,2,3);
GJCB<int>(1,2,3);
GJCC<int>(1,2,3);
GJCD<int>(1,2,3);
GJCE<int>(1,2,3);
GJCF<int>(1,2,3);
GJCG<int>(1,2,3);
GJCH<int>(1,2,3);
GJCI<int>(1,2,3);
GJCJ<int>(1,2,3);
GJDA<int>(1,2,3);
GJDB<int>(1,2,3);
GJDC<int>(1,2,3);
GJDD<int>(1,2,3);
GJDE<int>(1,2,3);
GJDF<int>(1,2,3);
GJDG<int>(1,2,3);
GJDH<int>(1,2,3);
GJDI<int>(1,2,3);
GJDJ<int>(1,2,3);
GJEA<int>(1,2,3);
GJEB<int>(1,2,3);
GJEC<int>(1,2,3);
GJED<int>(1,2,3);
GJEE<int>(1,2,3);
GJEF<int>(1,2,3);
GJEG<int>(1,2,3);
GJEH<int>(1,2,3);
GJEI<int>(1,2,3);
GJEJ<int>(1,2,3);
GJFA<int>(1,2,3);
GJFB<int>(1,2,3);
GJFC<int>(1,2,3);
GJFD<int>(1,2,3);
GJFE<int>(1,2,3);
GJFF<int>(1,2,3);
GJFG<int>(1,2,3);
GJFH<int>(1,2,3);
GJFI<int>(1,2,3);
GJFJ<int>(1,2,3);
GJGA<int>(1,2,3);
GJGB<int>(1,2,3);
GJGC<int>(1,2,3);
GJGD<int>(1,2,3);
GJGE<int>(1,2,3);
GJGF<int>(1,2,3);
GJGG<int>(1,2,3);
GJGH<int>(1,2,3);
GJGI<int>(1,2,3);
GJGJ<int>(1,2,3);
GJHA<int>(1,2,3);
GJHB<int>(1,2,3);
GJHC<int>(1,2,3);
GJHD<int>(1,2,3);
GJHE<int>(1,2,3);
GJHF<int>(1,2,3);
GJHG<int>(1,2,3);
GJHH<int>(1,2,3);
GJHI<int>(1,2,3);
GJHJ<int>(1,2,3);
GJIA<int>(1,2,3);
GJIB<int>(1,2,3);
GJIC<int>(1,2,3);
GJID<int>(1,2,3);
GJIE<int>(1,2,3);
GJIF<int>(1,2,3);
GJIG<int>(1,2,3);
GJIH<int>(1,2,3);
GJII<int>(1,2,3);
GJIJ<int>(1,2,3);
GJJA<int>(1,2,3);
GJJB<int>(1,2,3);
GJJC<int>(1,2,3);
GJJD<int>(1,2,3);
GJJE<int>(1,2,3);
GJJF<int>(1,2,3);
GJJG<int>(1,2,3);
GJJH<int>(1,2,3);
GJJI<int>(1,2,3);
GJJJ<int>(1,2,3);
HAAA<int>(1,2,3);
HAAB<int>(1,2,3);
HAAC<int>(1,2,3);
HAAD<int>(1,2,3);
HAAE<int>(1,2,3);
HAAF<int>(1,2,3);
HAAG<int>(1,2,3);
HAAH<int>(1,2,3);
HAAI<int>(1,2,3);
HAAJ<int>(1,2,3);
HABA<int>(1,2,3);
HABB<int>(1,2,3);
HABC<int>(1,2,3);
HABD<int>(1,2,3);
HABE<int>(1,2,3);
HABF<int>(1,2,3);
HABG<int>(1,2,3);
HABH<int>(1,2,3);
HABI<int>(1,2,3);
HABJ<int>(1,2,3);
HACA<int>(1,2,3);
HACB<int>(1,2,3);
HACC<int>(1,2,3);
HACD<int>(1,2,3);
HACE<int>(1,2,3);
HACF<int>(1,2,3);
HACG<int>(1,2,3);
HACH<int>(1,2,3);
HACI<int>(1,2,3);
HACJ<int>(1,2,3);
HADA<int>(1,2,3);
HADB<int>(1,2,3);
HADC<int>(1,2,3);
HADD<int>(1,2,3);
HADE<int>(1,2,3);
HADF<int>(1,2,3);
HADG<int>(1,2,3);
HADH<int>(1,2,3);
HADI<int>(1,2,3);
HADJ<int>(1,2,3);
HAEA<int>(1,2,3);
HAEB<int>(1,2,3);
HAEC<int>(1,2,3);
HAED<int>(1,2,3);
HAEE<int>(1,2,3);
HAEF<int>(1,2,3);
HAEG<int>(1,2,3);
HAEH<int>(1,2,3);
HAEI<int>(1,2,3);
HAEJ<int>(1,2,3);
HAFA<int>(1,2,3);
HAFB<int>(1,2,3);
HAFC<int>(1,2,3);
HAFD<int>(1,2,3);
HAFE<int>(1,2,3);
HAFF<int>(1,2,3);
HAFG<int>(1,2,3);
HAFH<int>(1,2,3);
HAFI<int>(1,2,3);
HAFJ<int>(1,2,3);
HAGA<int>(1,2,3);
HAGB<int>(1,2,3);
HAGC<int>(1,2,3);
HAGD<int>(1,2,3);
HAGE<int>(1,2,3);
HAGF<int>(1,2,3);
HAGG<int>(1,2,3);
HAGH<int>(1,2,3);
HAGI<int>(1,2,3);
HAGJ<int>(1,2,3);
HAHA<int>(1,2,3);
HAHB<int>(1,2,3);
HAHC<int>(1,2,3);
HAHD<int>(1,2,3);
HAHE<int>(1,2,3);
HAHF<int>(1,2,3);
HAHG<int>(1,2,3);
HAHH<int>(1,2,3);
HAHI<int>(1,2,3);
HAHJ<int>(1,2,3);
HAIA<int>(1,2,3);
HAIB<int>(1,2,3);
HAIC<int>(1,2,3);
HAID<int>(1,2,3);
HAIE<int>(1,2,3);
HAIF<int>(1,2,3);
HAIG<int>(1,2,3);
HAIH<int>(1,2,3);
HAII<int>(1,2,3);
HAIJ<int>(1,2,3);
HAJA<int>(1,2,3);
HAJB<int>(1,2,3);
HAJC<int>(1,2,3);
HAJD<int>(1,2,3);
HAJE<int>(1,2,3);
HAJF<int>(1,2,3);
HAJG<int>(1,2,3);
HAJH<int>(1,2,3);
HAJI<int>(1,2,3);
HAJJ<int>(1,2,3);
HBAA<int>(1,2,3);
HBAB<int>(1,2,3);
HBAC<int>(1,2,3);
HBAD<int>(1,2,3);
HBAE<int>(1,2,3);
HBAF<int>(1,2,3);
HBAG<int>(1,2,3);
HBAH<int>(1,2,3);
HBAI<int>(1,2,3);
HBAJ<int>(1,2,3);
HBBA<int>(1,2,3);
HBBB<int>(1,2,3);
HBBC<int>(1,2,3);
HBBD<int>(1,2,3);
HBBE<int>(1,2,3);
HBBF<int>(1,2,3);
HBBG<int>(1,2,3);
HBBH<int>(1,2,3);
HBBI<int>(1,2,3);
HBBJ<int>(1,2,3);
HBCA<int>(1,2,3);
HBCB<int>(1,2,3);
HBCC<int>(1,2,3);
HBCD<int>(1,2,3);
HBCE<int>(1,2,3);
HBCF<int>(1,2,3);
HBCG<int>(1,2,3);
HBCH<int>(1,2,3);
HBCI<int>(1,2,3);
HBCJ<int>(1,2,3);
HBDA<int>(1,2,3);
HBDB<int>(1,2,3);
HBDC<int>(1,2,3);
HBDD<int>(1,2,3);
HBDE<int>(1,2,3);
HBDF<int>(1,2,3);
HBDG<int>(1,2,3);
HBDH<int>(1,2,3);
HBDI<int>(1,2,3);
HBDJ<int>(1,2,3);
HBEA<int>(1,2,3);
HBEB<int>(1,2,3);
HBEC<int>(1,2,3);
HBED<int>(1,2,3);
HBEE<int>(1,2,3);
HBEF<int>(1,2,3);
HBEG<int>(1,2,3);
HBEH<int>(1,2,3);
HBEI<int>(1,2,3);
HBEJ<int>(1,2,3);
HBFA<int>(1,2,3);
HBFB<int>(1,2,3);
HBFC<int>(1,2,3);
HBFD<int>(1,2,3);
HBFE<int>(1,2,3);
HBFF<int>(1,2,3);
HBFG<int>(1,2,3);
HBFH<int>(1,2,3);
HBFI<int>(1,2,3);
HBFJ<int>(1,2,3);
HBGA<int>(1,2,3);
HBGB<int>(1,2,3);
HBGC<int>(1,2,3);
HBGD<int>(1,2,3);
HBGE<int>(1,2,3);
HBGF<int>(1,2,3);
HBGG<int>(1,2,3);
HBGH<int>(1,2,3);
HBGI<int>(1,2,3);
HBGJ<int>(1,2,3);
HBHA<int>(1,2,3);
HBHB<int>(1,2,3);
HBHC<int>(1,2,3);
HBHD<int>(1,2,3);
HBHE<int>(1,2,3);
HBHF<int>(1,2,3);
HBHG<int>(1,2,3);
HBHH<int>(1,2,3);
HBHI<int>(1,2,3);
HBHJ<int>(1,2,3);
HBIA<int>(1,2,3);
HBIB<int>(1,2,3);
HBIC<int>(1,2,3);
HBID<int>(1,2,3);
HBIE<int>(1,2,3);
HBIF<int>(1,2,3);
HBIG<int>(1,2,3);
HBIH<int>(1,2,3);
HBII<int>(1,2,3);
HBIJ<int>(1,2,3);
HBJA<int>(1,2,3);
HBJB<int>(1,2,3);
HBJC<int>(1,2,3);
HBJD<int>(1,2,3);
HBJE<int>(1,2,3);
HBJF<int>(1,2,3);
HBJG<int>(1,2,3);
HBJH<int>(1,2,3);
HBJI<int>(1,2,3);
HBJJ<int>(1,2,3);
HCAA<int>(1,2,3);
HCAB<int>(1,2,3);
HCAC<int>(1,2,3);
HCAD<int>(1,2,3);
HCAE<int>(1,2,3);
HCAF<int>(1,2,3);
HCAG<int>(1,2,3);
HCAH<int>(1,2,3);
HCAI<int>(1,2,3);
HCAJ<int>(1,2,3);
HCBA<int>(1,2,3);
HCBB<int>(1,2,3);
HCBC<int>(1,2,3);
HCBD<int>(1,2,3);
HCBE<int>(1,2,3);
HCBF<int>(1,2,3);
HCBG<int>(1,2,3);
HCBH<int>(1,2,3);
HCBI<int>(1,2,3);
HCBJ<int>(1,2,3);
HCCA<int>(1,2,3);
HCCB<int>(1,2,3);
HCCC<int>(1,2,3);
HCCD<int>(1,2,3);
HCCE<int>(1,2,3);
HCCF<int>(1,2,3);
HCCG<int>(1,2,3);
HCCH<int>(1,2,3);
HCCI<int>(1,2,3);
HCCJ<int>(1,2,3);
HCDA<int>(1,2,3);
HCDB<int>(1,2,3);
HCDC<int>(1,2,3);
HCDD<int>(1,2,3);
HCDE<int>(1,2,3);
HCDF<int>(1,2,3);
HCDG<int>(1,2,3);
HCDH<int>(1,2,3);
HCDI<int>(1,2,3);
HCDJ<int>(1,2,3);
HCEA<int>(1,2,3);
HCEB<int>(1,2,3);
HCEC<int>(1,2,3);
HCED<int>(1,2,3);
HCEE<int>(1,2,3);
HCEF<int>(1,2,3);
HCEG<int>(1,2,3);
HCEH<int>(1,2,3);
HCEI<int>(1,2,3);
HCEJ<int>(1,2,3);
HCFA<int>(1,2,3);
HCFB<int>(1,2,3);
HCFC<int>(1,2,3);
HCFD<int>(1,2,3);
HCFE<int>(1,2,3);
HCFF<int>(1,2,3);
HCFG<int>(1,2,3);
HCFH<int>(1,2,3);
HCFI<int>(1,2,3);
HCFJ<int>(1,2,3);
HCGA<int>(1,2,3);
HCGB<int>(1,2,3);
HCGC<int>(1,2,3);
HCGD<int>(1,2,3);
HCGE<int>(1,2,3);
HCGF<int>(1,2,3);
HCGG<int>(1,2,3);
HCGH<int>(1,2,3);
HCGI<int>(1,2,3);
HCGJ<int>(1,2,3);
HCHA<int>(1,2,3);
HCHB<int>(1,2,3);
HCHC<int>(1,2,3);
HCHD<int>(1,2,3);
HCHE<int>(1,2,3);
HCHF<int>(1,2,3);
HCHG<int>(1,2,3);
HCHH<int>(1,2,3);
HCHI<int>(1,2,3);
HCHJ<int>(1,2,3);
HCIA<int>(1,2,3);
HCIB<int>(1,2,3);
HCIC<int>(1,2,3);
HCID<int>(1,2,3);
HCIE<int>(1,2,3);
HCIF<int>(1,2,3);
HCIG<int>(1,2,3);
HCIH<int>(1,2,3);
HCII<int>(1,2,3);
HCIJ<int>(1,2,3);
HCJA<int>(1,2,3);
HCJB<int>(1,2,3);
HCJC<int>(1,2,3);
HCJD<int>(1,2,3);
HCJE<int>(1,2,3);
HCJF<int>(1,2,3);
HCJG<int>(1,2,3);
HCJH<int>(1,2,3);
HCJI<int>(1,2,3);
HCJJ<int>(1,2,3);
HDAA<int>(1,2,3);
HDAB<int>(1,2,3);
HDAC<int>(1,2,3);
HDAD<int>(1,2,3);
HDAE<int>(1,2,3);
HDAF<int>(1,2,3);
HDAG<int>(1,2,3);
HDAH<int>(1,2,3);
HDAI<int>(1,2,3);
HDAJ<int>(1,2,3);
HDBA<int>(1,2,3);
HDBB<int>(1,2,3);
HDBC<int>(1,2,3);
HDBD<int>(1,2,3);
HDBE<int>(1,2,3);
HDBF<int>(1,2,3);
HDBG<int>(1,2,3);
HDBH<int>(1,2,3);
HDBI<int>(1,2,3);
HDBJ<int>(1,2,3);
HDCA<int>(1,2,3);
HDCB<int>(1,2,3);
HDCC<int>(1,2,3);
HDCD<int>(1,2,3);
HDCE<int>(1,2,3);
HDCF<int>(1,2,3);
HDCG<int>(1,2,3);
HDCH<int>(1,2,3);
HDCI<int>(1,2,3);
HDCJ<int>(1,2,3);
HDDA<int>(1,2,3);
HDDB<int>(1,2,3);
HDDC<int>(1,2,3);
HDDD<int>(1,2,3);
HDDE<int>(1,2,3);
HDDF<int>(1,2,3);
HDDG<int>(1,2,3);
HDDH<int>(1,2,3);
HDDI<int>(1,2,3);
HDDJ<int>(1,2,3);
HDEA<int>(1,2,3);
HDEB<int>(1,2,3);
HDEC<int>(1,2,3);
HDED<int>(1,2,3);
HDEE<int>(1,2,3);
HDEF<int>(1,2,3);
HDEG<int>(1,2,3);
HDEH<int>(1,2,3);
HDEI<int>(1,2,3);
HDEJ<int>(1,2,3);
HDFA<int>(1,2,3);
HDFB<int>(1,2,3);
HDFC<int>(1,2,3);
HDFD<int>(1,2,3);
HDFE<int>(1,2,3);
HDFF<int>(1,2,3);
HDFG<int>(1,2,3);
HDFH<int>(1,2,3);
HDFI<int>(1,2,3);
HDFJ<int>(1,2,3);
HDGA<int>(1,2,3);
HDGB<int>(1,2,3);
HDGC<int>(1,2,3);
HDGD<int>(1,2,3);
HDGE<int>(1,2,3);
HDGF<int>(1,2,3);
HDGG<int>(1,2,3);
HDGH<int>(1,2,3);
HDGI<int>(1,2,3);
HDGJ<int>(1,2,3);
HDHA<int>(1,2,3);
HDHB<int>(1,2,3);
HDHC<int>(1,2,3);
HDHD<int>(1,2,3);
HDHE<int>(1,2,3);
HDHF<int>(1,2,3);
HDHG<int>(1,2,3);
HDHH<int>(1,2,3);
HDHI<int>(1,2,3);
HDHJ<int>(1,2,3);
HDIA<int>(1,2,3);
HDIB<int>(1,2,3);
HDIC<int>(1,2,3);
HDID<int>(1,2,3);
HDIE<int>(1,2,3);
HDIF<int>(1,2,3);
HDIG<int>(1,2,3);
HDIH<int>(1,2,3);
HDII<int>(1,2,3);
HDIJ<int>(1,2,3);
HDJA<int>(1,2,3);
HDJB<int>(1,2,3);
HDJC<int>(1,2,3);
HDJD<int>(1,2,3);
HDJE<int>(1,2,3);
HDJF<int>(1,2,3);
HDJG<int>(1,2,3);
HDJH<int>(1,2,3);
HDJI<int>(1,2,3);
HDJJ<int>(1,2,3);
HEAA<int>(1,2,3);
HEAB<int>(1,2,3);
HEAC<int>(1,2,3);
HEAD<int>(1,2,3);
HEAE<int>(1,2,3);
HEAF<int>(1,2,3);
HEAG<int>(1,2,3);
HEAH<int>(1,2,3);
HEAI<int>(1,2,3);
HEAJ<int>(1,2,3);
HEBA<int>(1,2,3);
HEBB<int>(1,2,3);
HEBC<int>(1,2,3);
HEBD<int>(1,2,3);
HEBE<int>(1,2,3);
HEBF<int>(1,2,3);
HEBG<int>(1,2,3);
HEBH<int>(1,2,3);
HEBI<int>(1,2,3);
HEBJ<int>(1,2,3);
HECA<int>(1,2,3);
HECB<int>(1,2,3);
HECC<int>(1,2,3);
HECD<int>(1,2,3);
HECE<int>(1,2,3);
HECF<int>(1,2,3);
HECG<int>(1,2,3);
HECH<int>(1,2,3);
HECI<int>(1,2,3);
HECJ<int>(1,2,3);
HEDA<int>(1,2,3);
HEDB<int>(1,2,3);
HEDC<int>(1,2,3);
HEDD<int>(1,2,3);
HEDE<int>(1,2,3);
HEDF<int>(1,2,3);
HEDG<int>(1,2,3);
HEDH<int>(1,2,3);
HEDI<int>(1,2,3);
HEDJ<int>(1,2,3);
HEEA<int>(1,2,3);
HEEB<int>(1,2,3);
HEEC<int>(1,2,3);
HEED<int>(1,2,3);
HEEE<int>(1,2,3);
HEEF<int>(1,2,3);
HEEG<int>(1,2,3);
HEEH<int>(1,2,3);
HEEI<int>(1,2,3);
HEEJ<int>(1,2,3);
HEFA<int>(1,2,3);
HEFB<int>(1,2,3);
HEFC<int>(1,2,3);
HEFD<int>(1,2,3);
HEFE<int>(1,2,3);
HEFF<int>(1,2,3);
HEFG<int>(1,2,3);
HEFH<int>(1,2,3);
HEFI<int>(1,2,3);
HEFJ<int>(1,2,3);
HEGA<int>(1,2,3);
HEGB<int>(1,2,3);
HEGC<int>(1,2,3);
HEGD<int>(1,2,3);
HEGE<int>(1,2,3);
HEGF<int>(1,2,3);
HEGG<int>(1,2,3);
HEGH<int>(1,2,3);
HEGI<int>(1,2,3);
HEGJ<int>(1,2,3);
HEHA<int>(1,2,3);
HEHB<int>(1,2,3);
HEHC<int>(1,2,3);
HEHD<int>(1,2,3);
HEHE<int>(1,2,3);
HEHF<int>(1,2,3);
HEHG<int>(1,2,3);
HEHH<int>(1,2,3);
HEHI<int>(1,2,3);
HEHJ<int>(1,2,3);
HEIA<int>(1,2,3);
HEIB<int>(1,2,3);
HEIC<int>(1,2,3);
HEID<int>(1,2,3);
HEIE<int>(1,2,3);
HEIF<int>(1,2,3);
HEIG<int>(1,2,3);
HEIH<int>(1,2,3);
HEII<int>(1,2,3);
HEIJ<int>(1,2,3);
HEJA<int>(1,2,3);
HEJB<int>(1,2,3);
HEJC<int>(1,2,3);
HEJD<int>(1,2,3);
HEJE<int>(1,2,3);
HEJF<int>(1,2,3);
HEJG<int>(1,2,3);
HEJH<int>(1,2,3);
HEJI<int>(1,2,3);
HEJJ<int>(1,2,3);
HFAA<int>(1,2,3);
HFAB<int>(1,2,3);
HFAC<int>(1,2,3);
HFAD<int>(1,2,3);
HFAE<int>(1,2,3);
HFAF<int>(1,2,3);
HFAG<int>(1,2,3);
HFAH<int>(1,2,3);
HFAI<int>(1,2,3);
HFAJ<int>(1,2,3);
HFBA<int>(1,2,3);
HFBB<int>(1,2,3);
HFBC<int>(1,2,3);
HFBD<int>(1,2,3);
HFBE<int>(1,2,3);
HFBF<int>(1,2,3);
HFBG<int>(1,2,3);
HFBH<int>(1,2,3);
HFBI<int>(1,2,3);
HFBJ<int>(1,2,3);
HFCA<int>(1,2,3);
HFCB<int>(1,2,3);
HFCC<int>(1,2,3);
HFCD<int>(1,2,3);
HFCE<int>(1,2,3);
HFCF<int>(1,2,3);
HFCG<int>(1,2,3);
HFCH<int>(1,2,3);
HFCI<int>(1,2,3);
HFCJ<int>(1,2,3);
HFDA<int>(1,2,3);
HFDB<int>(1,2,3);
HFDC<int>(1,2,3);
HFDD<int>(1,2,3);
HFDE<int>(1,2,3);
HFDF<int>(1,2,3);
HFDG<int>(1,2,3);
HFDH<int>(1,2,3);
HFDI<int>(1,2,3);
HFDJ<int>(1,2,3);
HFEA<int>(1,2,3);
HFEB<int>(1,2,3);
HFEC<int>(1,2,3);
HFED<int>(1,2,3);
HFEE<int>(1,2,3);
HFEF<int>(1,2,3);
HFEG<int>(1,2,3);
HFEH<int>(1,2,3);
HFEI<int>(1,2,3);
HFEJ<int>(1,2,3);
HFFA<int>(1,2,3);
HFFB<int>(1,2,3);
HFFC<int>(1,2,3);
HFFD<int>(1,2,3);
HFFE<int>(1,2,3);
HFFF<int>(1,2,3);
HFFG<int>(1,2,3);
HFFH<int>(1,2,3);
HFFI<int>(1,2,3);
HFFJ<int>(1,2,3);
HFGA<int>(1,2,3);
HFGB<int>(1,2,3);
HFGC<int>(1,2,3);
HFGD<int>(1,2,3);
HFGE<int>(1,2,3);
HFGF<int>(1,2,3);
HFGG<int>(1,2,3);
HFGH<int>(1,2,3);
HFGI<int>(1,2,3);
HFGJ<int>(1,2,3);
HFHA<int>(1,2,3);
HFHB<int>(1,2,3);
HFHC<int>(1,2,3);
HFHD<int>(1,2,3);
HFHE<int>(1,2,3);
HFHF<int>(1,2,3);
HFHG<int>(1,2,3);
HFHH<int>(1,2,3);
HFHI<int>(1,2,3);
HFHJ<int>(1,2,3);
HFIA<int>(1,2,3);
HFIB<int>(1,2,3);
HFIC<int>(1,2,3);
HFID<int>(1,2,3);
HFIE<int>(1,2,3);
HFIF<int>(1,2,3);
HFIG<int>(1,2,3);
HFIH<int>(1,2,3);
HFII<int>(1,2,3);
HFIJ<int>(1,2,3);
HFJA<int>(1,2,3);
HFJB<int>(1,2,3);
HFJC<int>(1,2,3);
HFJD<int>(1,2,3);
HFJE<int>(1,2,3);
HFJF<int>(1,2,3);
HFJG<int>(1,2,3);
HFJH<int>(1,2,3);
HFJI<int>(1,2,3);
HFJJ<int>(1,2,3);
HGAA<int>(1,2,3);
HGAB<int>(1,2,3);
HGAC<int>(1,2,3);
HGAD<int>(1,2,3);
HGAE<int>(1,2,3);
HGAF<int>(1,2,3);
HGAG<int>(1,2,3);
HGAH<int>(1,2,3);
HGAI<int>(1,2,3);
HGAJ<int>(1,2,3);
HGBA<int>(1,2,3);
HGBB<int>(1,2,3);
HGBC<int>(1,2,3);
HGBD<int>(1,2,3);
HGBE<int>(1,2,3);
HGBF<int>(1,2,3);
HGBG<int>(1,2,3);
HGBH<int>(1,2,3);
HGBI<int>(1,2,3);
HGBJ<int>(1,2,3);
HGCA<int>(1,2,3);
HGCB<int>(1,2,3);
HGCC<int>(1,2,3);
HGCD<int>(1,2,3);
HGCE<int>(1,2,3);
HGCF<int>(1,2,3);
HGCG<int>(1,2,3);
HGCH<int>(1,2,3);
HGCI<int>(1,2,3);
HGCJ<int>(1,2,3);
HGDA<int>(1,2,3);
HGDB<int>(1,2,3);
HGDC<int>(1,2,3);
HGDD<int>(1,2,3);
HGDE<int>(1,2,3);
HGDF<int>(1,2,3);
HGDG<int>(1,2,3);
HGDH<int>(1,2,3);
HGDI<int>(1,2,3);
HGDJ<int>(1,2,3);
HGEA<int>(1,2,3);
HGEB<int>(1,2,3);
HGEC<int>(1,2,3);
HGED<int>(1,2,3);
HGEE<int>(1,2,3);
HGEF<int>(1,2,3);
HGEG<int>(1,2,3);
HGEH<int>(1,2,3);
HGEI<int>(1,2,3);
HGEJ<int>(1,2,3);
HGFA<int>(1,2,3);
HGFB<int>(1,2,3);
HGFC<int>(1,2,3);
HGFD<int>(1,2,3);
HGFE<int>(1,2,3);
HGFF<int>(1,2,3);
HGFG<int>(1,2,3);
HGFH<int>(1,2,3);
HGFI<int>(1,2,3);
HGFJ<int>(1,2,3);
HGGA<int>(1,2,3);
HGGB<int>(1,2,3);
HGGC<int>(1,2,3);
HGGD<int>(1,2,3);
HGGE<int>(1,2,3);
HGGF<int>(1,2,3);
HGGG<int>(1,2,3);
HGGH<int>(1,2,3);
HGGI<int>(1,2,3);
HGGJ<int>(1,2,3);
HGHA<int>(1,2,3);
HGHB<int>(1,2,3);
HGHC<int>(1,2,3);
HGHD<int>(1,2,3);
HGHE<int>(1,2,3);
HGHF<int>(1,2,3);
HGHG<int>(1,2,3);
HGHH<int>(1,2,3);
HGHI<int>(1,2,3);
HGHJ<int>(1,2,3);
HGIA<int>(1,2,3);
HGIB<int>(1,2,3);
HGIC<int>(1,2,3);
HGID<int>(1,2,3);
HGIE<int>(1,2,3);
HGIF<int>(1,2,3);
HGIG<int>(1,2,3);
HGIH<int>(1,2,3);
HGII<int>(1,2,3);
HGIJ<int>(1,2,3);
HGJA<int>(1,2,3);
HGJB<int>(1,2,3);
HGJC<int>(1,2,3);
HGJD<int>(1,2,3);
HGJE<int>(1,2,3);
HGJF<int>(1,2,3);
HGJG<int>(1,2,3);
HGJH<int>(1,2,3);
HGJI<int>(1,2,3);
HGJJ<int>(1,2,3);
HHAA<int>(1,2,3);
HHAB<int>(1,2,3);
HHAC<int>(1,2,3);
HHAD<int>(1,2,3);
HHAE<int>(1,2,3);
HHAF<int>(1,2,3);
HHAG<int>(1,2,3);
HHAH<int>(1,2,3);
HHAI<int>(1,2,3);
HHAJ<int>(1,2,3);
HHBA<int>(1,2,3);
HHBB<int>(1,2,3);
HHBC<int>(1,2,3);
HHBD<int>(1,2,3);
HHBE<int>(1,2,3);
HHBF<int>(1,2,3);
HHBG<int>(1,2,3);
HHBH<int>(1,2,3);
HHBI<int>(1,2,3);
HHBJ<int>(1,2,3);
HHCA<int>(1,2,3);
HHCB<int>(1,2,3);
HHCC<int>(1,2,3);
HHCD<int>(1,2,3);
HHCE<int>(1,2,3);
HHCF<int>(1,2,3);
HHCG<int>(1,2,3);
HHCH<int>(1,2,3);
HHCI<int>(1,2,3);
HHCJ<int>(1,2,3);
HHDA<int>(1,2,3);
HHDB<int>(1,2,3);
HHDC<int>(1,2,3);
HHDD<int>(1,2,3);
HHDE<int>(1,2,3);
HHDF<int>(1,2,3);
HHDG<int>(1,2,3);
HHDH<int>(1,2,3);
HHDI<int>(1,2,3);
HHDJ<int>(1,2,3);
HHEA<int>(1,2,3);
HHEB<int>(1,2,3);
HHEC<int>(1,2,3);
HHED<int>(1,2,3);
HHEE<int>(1,2,3);
HHEF<int>(1,2,3);
HHEG<int>(1,2,3);
HHEH<int>(1,2,3);
HHEI<int>(1,2,3);
HHEJ<int>(1,2,3);
HHFA<int>(1,2,3);
HHFB<int>(1,2,3);
HHFC<int>(1,2,3);
HHFD<int>(1,2,3);
HHFE<int>(1,2,3);
HHFF<int>(1,2,3);
HHFG<int>(1,2,3);
HHFH<int>(1,2,3);
HHFI<int>(1,2,3);
HHFJ<int>(1,2,3);
HHGA<int>(1,2,3);
HHGB<int>(1,2,3);
HHGC<int>(1,2,3);
HHGD<int>(1,2,3);
HHGE<int>(1,2,3);
HHGF<int>(1,2,3);
HHGG<int>(1,2,3);
HHGH<int>(1,2,3);
HHGI<int>(1,2,3);
HHGJ<int>(1,2,3);
HHHA<int>(1,2,3);
HHHB<int>(1,2,3);
HHHC<int>(1,2,3);
HHHD<int>(1,2,3);
HHHE<int>(1,2,3);
HHHF<int>(1,2,3);
HHHG<int>(1,2,3);
HHHH<int>(1,2,3);
HHHI<int>(1,2,3);
HHHJ<int>(1,2,3);
HHIA<int>(1,2,3);
HHIB<int>(1,2,3);
HHIC<int>(1,2,3);
HHID<int>(1,2,3);
HHIE<int>(1,2,3);
HHIF<int>(1,2,3);
HHIG<int>(1,2,3);
HHIH<int>(1,2,3);
HHII<int>(1,2,3);
HHIJ<int>(1,2,3);
HHJA<int>(1,2,3);
HHJB<int>(1,2,3);
HHJC<int>(1,2,3);
HHJD<int>(1,2,3);
HHJE<int>(1,2,3);
HHJF<int>(1,2,3);
HHJG<int>(1,2,3);
HHJH<int>(1,2,3);
HHJI<int>(1,2,3);
HHJJ<int>(1,2,3);
HIAA<int>(1,2,3);
HIAB<int>(1,2,3);
HIAC<int>(1,2,3);
HIAD<int>(1,2,3);
HIAE<int>(1,2,3);
HIAF<int>(1,2,3);
HIAG<int>(1,2,3);
HIAH<int>(1,2,3);
HIAI<int>(1,2,3);
HIAJ<int>(1,2,3);
HIBA<int>(1,2,3);
HIBB<int>(1,2,3);
HIBC<int>(1,2,3);
HIBD<int>(1,2,3);
HIBE<int>(1,2,3);
HIBF<int>(1,2,3);
HIBG<int>(1,2,3);
HIBH<int>(1,2,3);
HIBI<int>(1,2,3);
HIBJ<int>(1,2,3);
HICA<int>(1,2,3);
HICB<int>(1,2,3);
HICC<int>(1,2,3);
HICD<int>(1,2,3);
HICE<int>(1,2,3);
HICF<int>(1,2,3);
HICG<int>(1,2,3);
HICH<int>(1,2,3);
HICI<int>(1,2,3);
HICJ<int>(1,2,3);
HIDA<int>(1,2,3);
HIDB<int>(1,2,3);
HIDC<int>(1,2,3);
HIDD<int>(1,2,3);
HIDE<int>(1,2,3);
HIDF<int>(1,2,3);
HIDG<int>(1,2,3);
HIDH<int>(1,2,3);
HIDI<int>(1,2,3);
HIDJ<int>(1,2,3);
HIEA<int>(1,2,3);
HIEB<int>(1,2,3);
HIEC<int>(1,2,3);
HIED<int>(1,2,3);
HIEE<int>(1,2,3);
HIEF<int>(1,2,3);
HIEG<int>(1,2,3);
HIEH<int>(1,2,3);
HIEI<int>(1,2,3);
HIEJ<int>(1,2,3);
HIFA<int>(1,2,3);
HIFB<int>(1,2,3);
HIFC<int>(1,2,3);
HIFD<int>(1,2,3);
HIFE<int>(1,2,3);
HIFF<int>(1,2,3);
HIFG<int>(1,2,3);
HIFH<int>(1,2,3);
HIFI<int>(1,2,3);
HIFJ<int>(1,2,3);
HIGA<int>(1,2,3);
HIGB<int>(1,2,3);
HIGC<int>(1,2,3);
HIGD<int>(1,2,3);
HIGE<int>(1,2,3);
HIGF<int>(1,2,3);
HIGG<int>(1,2,3);
HIGH<int>(1,2,3);
HIGI<int>(1,2,3);
HIGJ<int>(1,2,3);
HIHA<int>(1,2,3);
HIHB<int>(1,2,3);
HIHC<int>(1,2,3);
HIHD<int>(1,2,3);
HIHE<int>(1,2,3);
HIHF<int>(1,2,3);
HIHG<int>(1,2,3);
HIHH<int>(1,2,3);
HIHI<int>(1,2,3);
HIHJ<int>(1,2,3);
HIIA<int>(1,2,3);
HIIB<int>(1,2,3);
HIIC<int>(1,2,3);
HIID<int>(1,2,3);
HIIE<int>(1,2,3);
HIIF<int>(1,2,3);
HIIG<int>(1,2,3);
HIIH<int>(1,2,3);
HIII<int>(1,2,3);
HIIJ<int>(1,2,3);
HIJA<int>(1,2,3);
HIJB<int>(1,2,3);
HIJC<int>(1,2,3);
HIJD<int>(1,2,3);
HIJE<int>(1,2,3);
HIJF<int>(1,2,3);
HIJG<int>(1,2,3);
HIJH<int>(1,2,3);
HIJI<int>(1,2,3);
HIJJ<int>(1,2,3);
HJAA<int>(1,2,3);
HJAB<int>(1,2,3);
HJAC<int>(1,2,3);
HJAD<int>(1,2,3);
HJAE<int>(1,2,3);
HJAF<int>(1,2,3);
HJAG<int>(1,2,3);
HJAH<int>(1,2,3);
HJAI<int>(1,2,3);
HJAJ<int>(1,2,3);
HJBA<int>(1,2,3);
HJBB<int>(1,2,3);
HJBC<int>(1,2,3);
HJBD<int>(1,2,3);
HJBE<int>(1,2,3);
HJBF<int>(1,2,3);
HJBG<int>(1,2,3);
HJBH<int>(1,2,3);
HJBI<int>(1,2,3);
HJBJ<int>(1,2,3);
HJCA<int>(1,2,3);
HJCB<int>(1,2,3);
HJCC<int>(1,2,3);
HJCD<int>(1,2,3);
HJCE<int>(1,2,3);
HJCF<int>(1,2,3);
HJCG<int>(1,2,3);
HJCH<int>(1,2,3);
HJCI<int>(1,2,3);
HJCJ<int>(1,2,3);
HJDA<int>(1,2,3);
HJDB<int>(1,2,3);
HJDC<int>(1,2,3);
HJDD<int>(1,2,3);
HJDE<int>(1,2,3);
HJDF<int>(1,2,3);
HJDG<int>(1,2,3);
HJDH<int>(1,2,3);
HJDI<int>(1,2,3);
HJDJ<int>(1,2,3);
HJEA<int>(1,2,3);
HJEB<int>(1,2,3);
HJEC<int>(1,2,3);
HJED<int>(1,2,3);
HJEE<int>(1,2,3);
HJEF<int>(1,2,3);
HJEG<int>(1,2,3);
HJEH<int>(1,2,3);
HJEI<int>(1,2,3);
HJEJ<int>(1,2,3);
HJFA<int>(1,2,3);
HJFB<int>(1,2,3);
HJFC<int>(1,2,3);
HJFD<int>(1,2,3);
HJFE<int>(1,2,3);
HJFF<int>(1,2,3);
HJFG<int>(1,2,3);
HJFH<int>(1,2,3);
HJFI<int>(1,2,3);
HJFJ<int>(1,2,3);
HJGA<int>(1,2,3);
HJGB<int>(1,2,3);
HJGC<int>(1,2,3);
HJGD<int>(1,2,3);
HJGE<int>(1,2,3);
HJGF<int>(1,2,3);
HJGG<int>(1,2,3);
HJGH<int>(1,2,3);
HJGI<int>(1,2,3);
HJGJ<int>(1,2,3);
HJHA<int>(1,2,3);
HJHB<int>(1,2,3);
HJHC<int>(1,2,3);
HJHD<int>(1,2,3);
HJHE<int>(1,2,3);
HJHF<int>(1,2,3);
HJHG<int>(1,2,3);
HJHH<int>(1,2,3);
HJHI<int>(1,2,3);
HJHJ<int>(1,2,3);
HJIA<int>(1,2,3);
HJIB<int>(1,2,3);
HJIC<int>(1,2,3);
HJID<int>(1,2,3);
HJIE<int>(1,2,3);
HJIF<int>(1,2,3);
HJIG<int>(1,2,3);
HJIH<int>(1,2,3);
HJII<int>(1,2,3);
HJIJ<int>(1,2,3);
HJJA<int>(1,2,3);
HJJB<int>(1,2,3);
HJJC<int>(1,2,3);
HJJD<int>(1,2,3);
HJJE<int>(1,2,3);
HJJF<int>(1,2,3);
HJJG<int>(1,2,3);
HJJH<int>(1,2,3);
HJJI<int>(1,2,3);
HJJJ<int>(1,2,3);
IAAA<int>(1,2,3);
IAAB<int>(1,2,3);
IAAC<int>(1,2,3);
IAAD<int>(1,2,3);
IAAE<int>(1,2,3);
IAAF<int>(1,2,3);
IAAG<int>(1,2,3);
IAAH<int>(1,2,3);
IAAI<int>(1,2,3);
IAAJ<int>(1,2,3);
IABA<int>(1,2,3);
IABB<int>(1,2,3);
IABC<int>(1,2,3);
IABD<int>(1,2,3);
IABE<int>(1,2,3);
IABF<int>(1,2,3);
IABG<int>(1,2,3);
IABH<int>(1,2,3);
IABI<int>(1,2,3);
IABJ<int>(1,2,3);
IACA<int>(1,2,3);
IACB<int>(1,2,3);
IACC<int>(1,2,3);
IACD<int>(1,2,3);
IACE<int>(1,2,3);
IACF<int>(1,2,3);
IACG<int>(1,2,3);
IACH<int>(1,2,3);
IACI<int>(1,2,3);
IACJ<int>(1,2,3);
IADA<int>(1,2,3);
IADB<int>(1,2,3);
IADC<int>(1,2,3);
IADD<int>(1,2,3);
IADE<int>(1,2,3);
IADF<int>(1,2,3);
IADG<int>(1,2,3);
IADH<int>(1,2,3);
IADI<int>(1,2,3);
IADJ<int>(1,2,3);
IAEA<int>(1,2,3);
IAEB<int>(1,2,3);
IAEC<int>(1,2,3);
IAED<int>(1,2,3);
IAEE<int>(1,2,3);
IAEF<int>(1,2,3);
IAEG<int>(1,2,3);
IAEH<int>(1,2,3);
IAEI<int>(1,2,3);
IAEJ<int>(1,2,3);
IAFA<int>(1,2,3);
IAFB<int>(1,2,3);
IAFC<int>(1,2,3);
IAFD<int>(1,2,3);
IAFE<int>(1,2,3);
IAFF<int>(1,2,3);
IAFG<int>(1,2,3);
IAFH<int>(1,2,3);
IAFI<int>(1,2,3);
IAFJ<int>(1,2,3);
IAGA<int>(1,2,3);
IAGB<int>(1,2,3);
IAGC<int>(1,2,3);
IAGD<int>(1,2,3);
IAGE<int>(1,2,3);
IAGF<int>(1,2,3);
IAGG<int>(1,2,3);
IAGH<int>(1,2,3);
IAGI<int>(1,2,3);
IAGJ<int>(1,2,3);
IAHA<int>(1,2,3);
IAHB<int>(1,2,3);
IAHC<int>(1,2,3);
IAHD<int>(1,2,3);
IAHE<int>(1,2,3);
IAHF<int>(1,2,3);
IAHG<int>(1,2,3);
IAHH<int>(1,2,3);
IAHI<int>(1,2,3);
IAHJ<int>(1,2,3);
IAIA<int>(1,2,3);
IAIB<int>(1,2,3);
IAIC<int>(1,2,3);
IAID<int>(1,2,3);
IAIE<int>(1,2,3);
IAIF<int>(1,2,3);
IAIG<int>(1,2,3);
IAIH<int>(1,2,3);
IAII<int>(1,2,3);
IAIJ<int>(1,2,3);
IAJA<int>(1,2,3);
IAJB<int>(1,2,3);
IAJC<int>(1,2,3);
IAJD<int>(1,2,3);
IAJE<int>(1,2,3);
IAJF<int>(1,2,3);
IAJG<int>(1,2,3);
IAJH<int>(1,2,3);
IAJI<int>(1,2,3);
IAJJ<int>(1,2,3);
IBAA<int>(1,2,3);
IBAB<int>(1,2,3);
IBAC<int>(1,2,3);
IBAD<int>(1,2,3);
IBAE<int>(1,2,3);
IBAF<int>(1,2,3);
IBAG<int>(1,2,3);
IBAH<int>(1,2,3);
IBAI<int>(1,2,3);
IBAJ<int>(1,2,3);
IBBA<int>(1,2,3);
IBBB<int>(1,2,3);
IBBC<int>(1,2,3);
IBBD<int>(1,2,3);
IBBE<int>(1,2,3);
IBBF<int>(1,2,3);
IBBG<int>(1,2,3);
IBBH<int>(1,2,3);
IBBI<int>(1,2,3);
IBBJ<int>(1,2,3);
IBCA<int>(1,2,3);
IBCB<int>(1,2,3);
IBCC<int>(1,2,3);
IBCD<int>(1,2,3);
IBCE<int>(1,2,3);
IBCF<int>(1,2,3);
IBCG<int>(1,2,3);
IBCH<int>(1,2,3);
IBCI<int>(1,2,3);
IBCJ<int>(1,2,3);
IBDA<int>(1,2,3);
IBDB<int>(1,2,3);
IBDC<int>(1,2,3);
IBDD<int>(1,2,3);
IBDE<int>(1,2,3);
IBDF<int>(1,2,3);
IBDG<int>(1,2,3);
IBDH<int>(1,2,3);
IBDI<int>(1,2,3);
IBDJ<int>(1,2,3);
IBEA<int>(1,2,3);
IBEB<int>(1,2,3);
IBEC<int>(1,2,3);
IBED<int>(1,2,3);
IBEE<int>(1,2,3);
IBEF<int>(1,2,3);
IBEG<int>(1,2,3);
IBEH<int>(1,2,3);
IBEI<int>(1,2,3);
IBEJ<int>(1,2,3);
IBFA<int>(1,2,3);
IBFB<int>(1,2,3);
IBFC<int>(1,2,3);
IBFD<int>(1,2,3);
IBFE<int>(1,2,3);
IBFF<int>(1,2,3);
IBFG<int>(1,2,3);
IBFH<int>(1,2,3);
IBFI<int>(1,2,3);
IBFJ<int>(1,2,3);
IBGA<int>(1,2,3);
IBGB<int>(1,2,3);
IBGC<int>(1,2,3);
IBGD<int>(1,2,3);
IBGE<int>(1,2,3);
IBGF<int>(1,2,3);
IBGG<int>(1,2,3);
IBGH<int>(1,2,3);
IBGI<int>(1,2,3);
IBGJ<int>(1,2,3);
IBHA<int>(1,2,3);
IBHB<int>(1,2,3);
IBHC<int>(1,2,3);
IBHD<int>(1,2,3);
IBHE<int>(1,2,3);
IBHF<int>(1,2,3);
IBHG<int>(1,2,3);
IBHH<int>(1,2,3);
IBHI<int>(1,2,3);
IBHJ<int>(1,2,3);
IBIA<int>(1,2,3);
IBIB<int>(1,2,3);
IBIC<int>(1,2,3);
IBID<int>(1,2,3);
IBIE<int>(1,2,3);
IBIF<int>(1,2,3);
IBIG<int>(1,2,3);
IBIH<int>(1,2,3);
IBII<int>(1,2,3);
IBIJ<int>(1,2,3);
IBJA<int>(1,2,3);
IBJB<int>(1,2,3);
IBJC<int>(1,2,3);
IBJD<int>(1,2,3);
IBJE<int>(1,2,3);
IBJF<int>(1,2,3);
IBJG<int>(1,2,3);
IBJH<int>(1,2,3);
IBJI<int>(1,2,3);
IBJJ<int>(1,2,3);
ICAA<int>(1,2,3);
ICAB<int>(1,2,3);
ICAC<int>(1,2,3);
ICAD<int>(1,2,3);
ICAE<int>(1,2,3);
ICAF<int>(1,2,3);
ICAG<int>(1,2,3);
ICAH<int>(1,2,3);
ICAI<int>(1,2,3);
ICAJ<int>(1,2,3);
ICBA<int>(1,2,3);
ICBB<int>(1,2,3);
ICBC<int>(1,2,3);
ICBD<int>(1,2,3);
ICBE<int>(1,2,3);
ICBF<int>(1,2,3);
ICBG<int>(1,2,3);
ICBH<int>(1,2,3);
ICBI<int>(1,2,3);
ICBJ<int>(1,2,3);
ICCA<int>(1,2,3);
ICCB<int>(1,2,3);
ICCC<int>(1,2,3);
ICCD<int>(1,2,3);
ICCE<int>(1,2,3);
ICCF<int>(1,2,3);
ICCG<int>(1,2,3);
ICCH<int>(1,2,3);
ICCI<int>(1,2,3);
ICCJ<int>(1,2,3);
ICDA<int>(1,2,3);
ICDB<int>(1,2,3);
ICDC<int>(1,2,3);
ICDD<int>(1,2,3);
ICDE<int>(1,2,3);
ICDF<int>(1,2,3);
ICDG<int>(1,2,3);
ICDH<int>(1,2,3);
ICDI<int>(1,2,3);
ICDJ<int>(1,2,3);
ICEA<int>(1,2,3);
ICEB<int>(1,2,3);
ICEC<int>(1,2,3);
ICED<int>(1,2,3);
ICEE<int>(1,2,3);
ICEF<int>(1,2,3);
ICEG<int>(1,2,3);
ICEH<int>(1,2,3);
ICEI<int>(1,2,3);
ICEJ<int>(1,2,3);
ICFA<int>(1,2,3);
ICFB<int>(1,2,3);
ICFC<int>(1,2,3);
ICFD<int>(1,2,3);
ICFE<int>(1,2,3);
ICFF<int>(1,2,3);
ICFG<int>(1,2,3);
ICFH<int>(1,2,3);
ICFI<int>(1,2,3);
ICFJ<int>(1,2,3);
ICGA<int>(1,2,3);
ICGB<int>(1,2,3);
ICGC<int>(1,2,3);
ICGD<int>(1,2,3);
ICGE<int>(1,2,3);
ICGF<int>(1,2,3);
ICGG<int>(1,2,3);
ICGH<int>(1,2,3);
ICGI<int>(1,2,3);
ICGJ<int>(1,2,3);
ICHA<int>(1,2,3);
ICHB<int>(1,2,3);
ICHC<int>(1,2,3);
ICHD<int>(1,2,3);
ICHE<int>(1,2,3);
ICHF<int>(1,2,3);
ICHG<int>(1,2,3);
ICHH<int>(1,2,3);
ICHI<int>(1,2,3);
ICHJ<int>(1,2,3);
ICIA<int>(1,2,3);
ICIB<int>(1,2,3);
ICIC<int>(1,2,3);
ICID<int>(1,2,3);
ICIE<int>(1,2,3);
ICIF<int>(1,2,3);
ICIG<int>(1,2,3);
ICIH<int>(1,2,3);
ICII<int>(1,2,3);
ICIJ<int>(1,2,3);
ICJA<int>(1,2,3);
ICJB<int>(1,2,3);
ICJC<int>(1,2,3);
ICJD<int>(1,2,3);
ICJE<int>(1,2,3);
ICJF<int>(1,2,3);
ICJG<int>(1,2,3);
ICJH<int>(1,2,3);
ICJI<int>(1,2,3);
ICJJ<int>(1,2,3);
IDAA<int>(1,2,3);
IDAB<int>(1,2,3);
IDAC<int>(1,2,3);
IDAD<int>(1,2,3);
IDAE<int>(1,2,3);
IDAF<int>(1,2,3);
IDAG<int>(1,2,3);
IDAH<int>(1,2,3);
IDAI<int>(1,2,3);
IDAJ<int>(1,2,3);
IDBA<int>(1,2,3);
IDBB<int>(1,2,3);
IDBC<int>(1,2,3);
IDBD<int>(1,2,3);
IDBE<int>(1,2,3);
IDBF<int>(1,2,3);
IDBG<int>(1,2,3);
IDBH<int>(1,2,3);
IDBI<int>(1,2,3);
IDBJ<int>(1,2,3);
IDCA<int>(1,2,3);
IDCB<int>(1,2,3);
IDCC<int>(1,2,3);
IDCD<int>(1,2,3);
IDCE<int>(1,2,3);
IDCF<int>(1,2,3);
IDCG<int>(1,2,3);
IDCH<int>(1,2,3);
IDCI<int>(1,2,3);
IDCJ<int>(1,2,3);
IDDA<int>(1,2,3);
IDDB<int>(1,2,3);
IDDC<int>(1,2,3);
IDDD<int>(1,2,3);
IDDE<int>(1,2,3);
IDDF<int>(1,2,3);
IDDG<int>(1,2,3);
IDDH<int>(1,2,3);
IDDI<int>(1,2,3);
IDDJ<int>(1,2,3);
IDEA<int>(1,2,3);
IDEB<int>(1,2,3);
IDEC<int>(1,2,3);
IDED<int>(1,2,3);
IDEE<int>(1,2,3);
IDEF<int>(1,2,3);
IDEG<int>(1,2,3);
IDEH<int>(1,2,3);
IDEI<int>(1,2,3);
IDEJ<int>(1,2,3);
IDFA<int>(1,2,3);
IDFB<int>(1,2,3);
IDFC<int>(1,2,3);
IDFD<int>(1,2,3);
IDFE<int>(1,2,3);
IDFF<int>(1,2,3);
IDFG<int>(1,2,3);
IDFH<int>(1,2,3);
IDFI<int>(1,2,3);
IDFJ<int>(1,2,3);
IDGA<int>(1,2,3);
IDGB<int>(1,2,3);
IDGC<int>(1,2,3);
IDGD<int>(1,2,3);
IDGE<int>(1,2,3);
IDGF<int>(1,2,3);
IDGG<int>(1,2,3);
IDGH<int>(1,2,3);
IDGI<int>(1,2,3);
IDGJ<int>(1,2,3);
IDHA<int>(1,2,3);
IDHB<int>(1,2,3);
IDHC<int>(1,2,3);
IDHD<int>(1,2,3);
IDHE<int>(1,2,3);
IDHF<int>(1,2,3);
IDHG<int>(1,2,3);
IDHH<int>(1,2,3);
IDHI<int>(1,2,3);
IDHJ<int>(1,2,3);
IDIA<int>(1,2,3);
IDIB<int>(1,2,3);
IDIC<int>(1,2,3);
IDID<int>(1,2,3);
IDIE<int>(1,2,3);
IDIF<int>(1,2,3);
IDIG<int>(1,2,3);
IDIH<int>(1,2,3);
IDII<int>(1,2,3);
IDIJ<int>(1,2,3);
IDJA<int>(1,2,3);
IDJB<int>(1,2,3);
IDJC<int>(1,2,3);
IDJD<int>(1,2,3);
IDJE<int>(1,2,3);
IDJF<int>(1,2,3);
IDJG<int>(1,2,3);
IDJH<int>(1,2,3);
IDJI<int>(1,2,3);
IDJJ<int>(1,2,3);
IEAA<int>(1,2,3);
IEAB<int>(1,2,3);
IEAC<int>(1,2,3);
IEAD<int>(1,2,3);
IEAE<int>(1,2,3);
IEAF<int>(1,2,3);
IEAG<int>(1,2,3);
IEAH<int>(1,2,3);
IEAI<int>(1,2,3);
IEAJ<int>(1,2,3);
IEBA<int>(1,2,3);
IEBB<int>(1,2,3);
IEBC<int>(1,2,3);
IEBD<int>(1,2,3);
IEBE<int>(1,2,3);
IEBF<int>(1,2,3);
IEBG<int>(1,2,3);
IEBH<int>(1,2,3);
IEBI<int>(1,2,3);
IEBJ<int>(1,2,3);
IECA<int>(1,2,3);
IECB<int>(1,2,3);
IECC<int>(1,2,3);
IECD<int>(1,2,3);
IECE<int>(1,2,3);
IECF<int>(1,2,3);
IECG<int>(1,2,3);
IECH<int>(1,2,3);
IECI<int>(1,2,3);
IECJ<int>(1,2,3);
IEDA<int>(1,2,3);
IEDB<int>(1,2,3);
IEDC<int>(1,2,3);
IEDD<int>(1,2,3);
IEDE<int>(1,2,3);
IEDF<int>(1,2,3);
IEDG<int>(1,2,3);
IEDH<int>(1,2,3);
IEDI<int>(1,2,3);
IEDJ<int>(1,2,3);
IEEA<int>(1,2,3);
IEEB<int>(1,2,3);
IEEC<int>(1,2,3);
IEED<int>(1,2,3);
IEEE<int>(1,2,3);
IEEF<int>(1,2,3);
IEEG<int>(1,2,3);
IEEH<int>(1,2,3);
IEEI<int>(1,2,3);
IEEJ<int>(1,2,3);
IEFA<int>(1,2,3);
IEFB<int>(1,2,3);
IEFC<int>(1,2,3);
IEFD<int>(1,2,3);
IEFE<int>(1,2,3);
IEFF<int>(1,2,3);
IEFG<int>(1,2,3);
IEFH<int>(1,2,3);
IEFI<int>(1,2,3);
IEFJ<int>(1,2,3);
IEGA<int>(1,2,3);
IEGB<int>(1,2,3);
IEGC<int>(1,2,3);
IEGD<int>(1,2,3);
IEGE<int>(1,2,3);
IEGF<int>(1,2,3);
IEGG<int>(1,2,3);
IEGH<int>(1,2,3);
IEGI<int>(1,2,3);
IEGJ<int>(1,2,3);
IEHA<int>(1,2,3);
IEHB<int>(1,2,3);
IEHC<int>(1,2,3);
IEHD<int>(1,2,3);
IEHE<int>(1,2,3);
IEHF<int>(1,2,3);
IEHG<int>(1,2,3);
IEHH<int>(1,2,3);
IEHI<int>(1,2,3);
IEHJ<int>(1,2,3);
IEIA<int>(1,2,3);
IEIB<int>(1,2,3);
IEIC<int>(1,2,3);
IEID<int>(1,2,3);
IEIE<int>(1,2,3);
IEIF<int>(1,2,3);
IEIG<int>(1,2,3);
IEIH<int>(1,2,3);
IEII<int>(1,2,3);
IEIJ<int>(1,2,3);
IEJA<int>(1,2,3);
IEJB<int>(1,2,3);
IEJC<int>(1,2,3);
IEJD<int>(1,2,3);
IEJE<int>(1,2,3);
IEJF<int>(1,2,3);
IEJG<int>(1,2,3);
IEJH<int>(1,2,3);
IEJI<int>(1,2,3);
IEJJ<int>(1,2,3);
IFAA<int>(1,2,3);
IFAB<int>(1,2,3);
IFAC<int>(1,2,3);
IFAD<int>(1,2,3);
IFAE<int>(1,2,3);
IFAF<int>(1,2,3);
IFAG<int>(1,2,3);
IFAH<int>(1,2,3);
IFAI<int>(1,2,3);
IFAJ<int>(1,2,3);
IFBA<int>(1,2,3);
IFBB<int>(1,2,3);
IFBC<int>(1,2,3);
IFBD<int>(1,2,3);
IFBE<int>(1,2,3);
IFBF<int>(1,2,3);
IFBG<int>(1,2,3);
IFBH<int>(1,2,3);
IFBI<int>(1,2,3);
IFBJ<int>(1,2,3);
IFCA<int>(1,2,3);
IFCB<int>(1,2,3);
IFCC<int>(1,2,3);
IFCD<int>(1,2,3);
IFCE<int>(1,2,3);
IFCF<int>(1,2,3);
IFCG<int>(1,2,3);
IFCH<int>(1,2,3);
IFCI<int>(1,2,3);
IFCJ<int>(1,2,3);
IFDA<int>(1,2,3);
IFDB<int>(1,2,3);
IFDC<int>(1,2,3);
IFDD<int>(1,2,3);
IFDE<int>(1,2,3);
IFDF<int>(1,2,3);
IFDG<int>(1,2,3);
IFDH<int>(1,2,3);
IFDI<int>(1,2,3);
IFDJ<int>(1,2,3);
IFEA<int>(1,2,3);
IFEB<int>(1,2,3);
IFEC<int>(1,2,3);
IFED<int>(1,2,3);
IFEE<int>(1,2,3);
IFEF<int>(1,2,3);
IFEG<int>(1,2,3);
IFEH<int>(1,2,3);
IFEI<int>(1,2,3);
IFEJ<int>(1,2,3);
IFFA<int>(1,2,3);
IFFB<int>(1,2,3);
IFFC<int>(1,2,3);
IFFD<int>(1,2,3);
IFFE<int>(1,2,3);
IFFF<int>(1,2,3);
IFFG<int>(1,2,3);
IFFH<int>(1,2,3);
IFFI<int>(1,2,3);
IFFJ<int>(1,2,3);
IFGA<int>(1,2,3);
IFGB<int>(1,2,3);
IFGC<int>(1,2,3);
IFGD<int>(1,2,3);
IFGE<int>(1,2,3);
IFGF<int>(1,2,3);
IFGG<int>(1,2,3);
IFGH<int>(1,2,3);
IFGI<int>(1,2,3);
IFGJ<int>(1,2,3);
IFHA<int>(1,2,3);
IFHB<int>(1,2,3);
IFHC<int>(1,2,3);
IFHD<int>(1,2,3);
IFHE<int>(1,2,3);
IFHF<int>(1,2,3);
IFHG<int>(1,2,3);
IFHH<int>(1,2,3);
IFHI<int>(1,2,3);
IFHJ<int>(1,2,3);
IFIA<int>(1,2,3);
IFIB<int>(1,2,3);
IFIC<int>(1,2,3);
IFID<int>(1,2,3);
IFIE<int>(1,2,3);
IFIF<int>(1,2,3);
IFIG<int>(1,2,3);
IFIH<int>(1,2,3);
IFII<int>(1,2,3);
IFIJ<int>(1,2,3);
IFJA<int>(1,2,3);
IFJB<int>(1,2,3);
IFJC<int>(1,2,3);
IFJD<int>(1,2,3);
IFJE<int>(1,2,3);
IFJF<int>(1,2,3);
IFJG<int>(1,2,3);
IFJH<int>(1,2,3);
IFJI<int>(1,2,3);
IFJJ<int>(1,2,3);
IGAA<int>(1,2,3);
IGAB<int>(1,2,3);
IGAC<int>(1,2,3);
IGAD<int>(1,2,3);
IGAE<int>(1,2,3);
IGAF<int>(1,2,3);
IGAG<int>(1,2,3);
IGAH<int>(1,2,3);
IGAI<int>(1,2,3);
IGAJ<int>(1,2,3);
IGBA<int>(1,2,3);
IGBB<int>(1,2,3);
IGBC<int>(1,2,3);
IGBD<int>(1,2,3);
IGBE<int>(1,2,3);
IGBF<int>(1,2,3);
IGBG<int>(1,2,3);
IGBH<int>(1,2,3);
IGBI<int>(1,2,3);
IGBJ<int>(1,2,3);
IGCA<int>(1,2,3);
IGCB<int>(1,2,3);
IGCC<int>(1,2,3);
IGCD<int>(1,2,3);
IGCE<int>(1,2,3);
IGCF<int>(1,2,3);
IGCG<int>(1,2,3);
IGCH<int>(1,2,3);
IGCI<int>(1,2,3);
IGCJ<int>(1,2,3);
IGDA<int>(1,2,3);
IGDB<int>(1,2,3);
IGDC<int>(1,2,3);
IGDD<int>(1,2,3);
IGDE<int>(1,2,3);
IGDF<int>(1,2,3);
IGDG<int>(1,2,3);
IGDH<int>(1,2,3);
IGDI<int>(1,2,3);
IGDJ<int>(1,2,3);
IGEA<int>(1,2,3);
IGEB<int>(1,2,3);
IGEC<int>(1,2,3);
IGED<int>(1,2,3);
IGEE<int>(1,2,3);
IGEF<int>(1,2,3);
IGEG<int>(1,2,3);
IGEH<int>(1,2,3);
IGEI<int>(1,2,3);
IGEJ<int>(1,2,3);
IGFA<int>(1,2,3);
IGFB<int>(1,2,3);
IGFC<int>(1,2,3);
IGFD<int>(1,2,3);
IGFE<int>(1,2,3);
IGFF<int>(1,2,3);
IGFG<int>(1,2,3);
IGFH<int>(1,2,3);
IGFI<int>(1,2,3);
IGFJ<int>(1,2,3);
IGGA<int>(1,2,3);
IGGB<int>(1,2,3);
IGGC<int>(1,2,3);
IGGD<int>(1,2,3);
IGGE<int>(1,2,3);
IGGF<int>(1,2,3);
IGGG<int>(1,2,3);
IGGH<int>(1,2,3);
IGGI<int>(1,2,3);
IGGJ<int>(1,2,3);
IGHA<int>(1,2,3);
IGHB<int>(1,2,3);
IGHC<int>(1,2,3);
IGHD<int>(1,2,3);
IGHE<int>(1,2,3);
IGHF<int>(1,2,3);
IGHG<int>(1,2,3);
IGHH<int>(1,2,3);
IGHI<int>(1,2,3);
IGHJ<int>(1,2,3);
IGIA<int>(1,2,3);
IGIB<int>(1,2,3);
IGIC<int>(1,2,3);
IGID<int>(1,2,3);
IGIE<int>(1,2,3);
IGIF<int>(1,2,3);
IGIG<int>(1,2,3);
IGIH<int>(1,2,3);
IGII<int>(1,2,3);
IGIJ<int>(1,2,3);
IGJA<int>(1,2,3);
IGJB<int>(1,2,3);
IGJC<int>(1,2,3);
IGJD<int>(1,2,3);
IGJE<int>(1,2,3);
IGJF<int>(1,2,3);
IGJG<int>(1,2,3);
IGJH<int>(1,2,3);
IGJI<int>(1,2,3);
IGJJ<int>(1,2,3);
IHAA<int>(1,2,3);
IHAB<int>(1,2,3);
IHAC<int>(1,2,3);
IHAD<int>(1,2,3);
IHAE<int>(1,2,3);
IHAF<int>(1,2,3);
IHAG<int>(1,2,3);
IHAH<int>(1,2,3);
IHAI<int>(1,2,3);
IHAJ<int>(1,2,3);
IHBA<int>(1,2,3);
IHBB<int>(1,2,3);
IHBC<int>(1,2,3);
IHBD<int>(1,2,3);
IHBE<int>(1,2,3);
IHBF<int>(1,2,3);
IHBG<int>(1,2,3);
IHBH<int>(1,2,3);
IHBI<int>(1,2,3);
IHBJ<int>(1,2,3);
IHCA<int>(1,2,3);
IHCB<int>(1,2,3);
IHCC<int>(1,2,3);
IHCD<int>(1,2,3);
IHCE<int>(1,2,3);
IHCF<int>(1,2,3);
IHCG<int>(1,2,3);
IHCH<int>(1,2,3);
IHCI<int>(1,2,3);
IHCJ<int>(1,2,3);
IHDA<int>(1,2,3);
IHDB<int>(1,2,3);
IHDC<int>(1,2,3);
IHDD<int>(1,2,3);
IHDE<int>(1,2,3);
IHDF<int>(1,2,3);
IHDG<int>(1,2,3);
IHDH<int>(1,2,3);
IHDI<int>(1,2,3);
IHDJ<int>(1,2,3);
IHEA<int>(1,2,3);
IHEB<int>(1,2,3);
IHEC<int>(1,2,3);
IHED<int>(1,2,3);
IHEE<int>(1,2,3);
IHEF<int>(1,2,3);
IHEG<int>(1,2,3);
IHEH<int>(1,2,3);
IHEI<int>(1,2,3);
IHEJ<int>(1,2,3);
IHFA<int>(1,2,3);
IHFB<int>(1,2,3);
IHFC<int>(1,2,3);
IHFD<int>(1,2,3);
IHFE<int>(1,2,3);
IHFF<int>(1,2,3);
IHFG<int>(1,2,3);
IHFH<int>(1,2,3);
IHFI<int>(1,2,3);
IHFJ<int>(1,2,3);
IHGA<int>(1,2,3);
IHGB<int>(1,2,3);
IHGC<int>(1,2,3);
IHGD<int>(1,2,3);
IHGE<int>(1,2,3);
IHGF<int>(1,2,3);
IHGG<int>(1,2,3);
IHGH<int>(1,2,3);
IHGI<int>(1,2,3);
IHGJ<int>(1,2,3);
IHHA<int>(1,2,3);
IHHB<int>(1,2,3);
IHHC<int>(1,2,3);
IHHD<int>(1,2,3);
IHHE<int>(1,2,3);
IHHF<int>(1,2,3);
IHHG<int>(1,2,3);
IHHH<int>(1,2,3);
IHHI<int>(1,2,3);
IHHJ<int>(1,2,3);
IHIA<int>(1,2,3);
IHIB<int>(1,2,3);
IHIC<int>(1,2,3);
IHID<int>(1,2,3);
IHIE<int>(1,2,3);
IHIF<int>(1,2,3);
IHIG<int>(1,2,3);
IHIH<int>(1,2,3);
IHII<int>(1,2,3);
IHIJ<int>(1,2,3);
IHJA<int>(1,2,3);
IHJB<int>(1,2,3);
IHJC<int>(1,2,3);
IHJD<int>(1,2,3);
IHJE<int>(1,2,3);
IHJF<int>(1,2,3);
IHJG<int>(1,2,3);
IHJH<int>(1,2,3);
IHJI<int>(1,2,3);
IHJJ<int>(1,2,3);
IIAA<int>(1,2,3);
IIAB<int>(1,2,3);
IIAC<int>(1,2,3);
IIAD<int>(1,2,3);
IIAE<int>(1,2,3);
IIAF<int>(1,2,3);
IIAG<int>(1,2,3);
IIAH<int>(1,2,3);
IIAI<int>(1,2,3);
IIAJ<int>(1,2,3);
IIBA<int>(1,2,3);
IIBB<int>(1,2,3);
IIBC<int>(1,2,3);
IIBD<int>(1,2,3);
IIBE<int>(1,2,3);
IIBF<int>(1,2,3);
IIBG<int>(1,2,3);
IIBH<int>(1,2,3);
IIBI<int>(1,2,3);
IIBJ<int>(1,2,3);
IICA<int>(1,2,3);
IICB<int>(1,2,3);
IICC<int>(1,2,3);
IICD<int>(1,2,3);
IICE<int>(1,2,3);
IICF<int>(1,2,3);
IICG<int>(1,2,3);
IICH<int>(1,2,3);
IICI<int>(1,2,3);
IICJ<int>(1,2,3);
IIDA<int>(1,2,3);
IIDB<int>(1,2,3);
IIDC<int>(1,2,3);
IIDD<int>(1,2,3);
IIDE<int>(1,2,3);
IIDF<int>(1,2,3);
IIDG<int>(1,2,3);
IIDH<int>(1,2,3);
IIDI<int>(1,2,3);
IIDJ<int>(1,2,3);
IIEA<int>(1,2,3);
IIEB<int>(1,2,3);
IIEC<int>(1,2,3);
IIED<int>(1,2,3);
IIEE<int>(1,2,3);
IIEF<int>(1,2,3);
IIEG<int>(1,2,3);
IIEH<int>(1,2,3);
IIEI<int>(1,2,3);
IIEJ<int>(1,2,3);
IIFA<int>(1,2,3);
IIFB<int>(1,2,3);
IIFC<int>(1,2,3);
IIFD<int>(1,2,3);
IIFE<int>(1,2,3);
IIFF<int>(1,2,3);
IIFG<int>(1,2,3);
IIFH<int>(1,2,3);
IIFI<int>(1,2,3);
IIFJ<int>(1,2,3);
IIGA<int>(1,2,3);
IIGB<int>(1,2,3);
IIGC<int>(1,2,3);
IIGD<int>(1,2,3);
IIGE<int>(1,2,3);
IIGF<int>(1,2,3);
IIGG<int>(1,2,3);
IIGH<int>(1,2,3);
IIGI<int>(1,2,3);
IIGJ<int>(1,2,3);
IIHA<int>(1,2,3);
IIHB<int>(1,2,3);
IIHC<int>(1,2,3);
IIHD<int>(1,2,3);
IIHE<int>(1,2,3);
IIHF<int>(1,2,3);
IIHG<int>(1,2,3);
IIHH<int>(1,2,3);
IIHI<int>(1,2,3);
IIHJ<int>(1,2,3);
IIIA<int>(1,2,3);
IIIB<int>(1,2,3);
IIIC<int>(1,2,3);
IIID<int>(1,2,3);
IIIE<int>(1,2,3);
IIIF<int>(1,2,3);
IIIG<int>(1,2,3);
IIIH<int>(1,2,3);
IIII<int>(1,2,3);
IIIJ<int>(1,2,3);
IIJA<int>(1,2,3);
IIJB<int>(1,2,3);
IIJC<int>(1,2,3);
IIJD<int>(1,2,3);
IIJE<int>(1,2,3);
IIJF<int>(1,2,3);
IIJG<int>(1,2,3);
IIJH<int>(1,2,3);
IIJI<int>(1,2,3);
IIJJ<int>(1,2,3);
IJAA<int>(1,2,3);
IJAB<int>(1,2,3);
IJAC<int>(1,2,3);
IJAD<int>(1,2,3);
IJAE<int>(1,2,3);
IJAF<int>(1,2,3);
IJAG<int>(1,2,3);
IJAH<int>(1,2,3);
IJAI<int>(1,2,3);
IJAJ<int>(1,2,3);
IJBA<int>(1,2,3);
IJBB<int>(1,2,3);
IJBC<int>(1,2,3);
IJBD<int>(1,2,3);
IJBE<int>(1,2,3);
IJBF<int>(1,2,3);
IJBG<int>(1,2,3);
IJBH<int>(1,2,3);
IJBI<int>(1,2,3);
IJBJ<int>(1,2,3);
IJCA<int>(1,2,3);
IJCB<int>(1,2,3);
IJCC<int>(1,2,3);
IJCD<int>(1,2,3);
IJCE<int>(1,2,3);
IJCF<int>(1,2,3);
IJCG<int>(1,2,3);
IJCH<int>(1,2,3);
IJCI<int>(1,2,3);
IJCJ<int>(1,2,3);
IJDA<int>(1,2,3);
IJDB<int>(1,2,3);
IJDC<int>(1,2,3);
IJDD<int>(1,2,3);
IJDE<int>(1,2,3);
IJDF<int>(1,2,3);
IJDG<int>(1,2,3);
IJDH<int>(1,2,3);
IJDI<int>(1,2,3);
IJDJ<int>(1,2,3);
IJEA<int>(1,2,3);
IJEB<int>(1,2,3);
IJEC<int>(1,2,3);
IJED<int>(1,2,3);
IJEE<int>(1,2,3);
IJEF<int>(1,2,3);
IJEG<int>(1,2,3);
IJEH<int>(1,2,3);
IJEI<int>(1,2,3);
IJEJ<int>(1,2,3);
IJFA<int>(1,2,3);
IJFB<int>(1,2,3);
IJFC<int>(1,2,3);
IJFD<int>(1,2,3);
IJFE<int>(1,2,3);
IJFF<int>(1,2,3);
IJFG<int>(1,2,3);
IJFH<int>(1,2,3);
IJFI<int>(1,2,3);
IJFJ<int>(1,2,3);
IJGA<int>(1,2,3);
IJGB<int>(1,2,3);
IJGC<int>(1,2,3);
IJGD<int>(1,2,3);
IJGE<int>(1,2,3);
IJGF<int>(1,2,3);
IJGG<int>(1,2,3);
IJGH<int>(1,2,3);
IJGI<int>(1,2,3);
IJGJ<int>(1,2,3);
IJHA<int>(1,2,3);
IJHB<int>(1,2,3);
IJHC<int>(1,2,3);
IJHD<int>(1,2,3);
IJHE<int>(1,2,3);
IJHF<int>(1,2,3);
IJHG<int>(1,2,3);
IJHH<int>(1,2,3);
IJHI<int>(1,2,3);
IJHJ<int>(1,2,3);
IJIA<int>(1,2,3);
IJIB<int>(1,2,3);
IJIC<int>(1,2,3);
IJID<int>(1,2,3);
IJIE<int>(1,2,3);
IJIF<int>(1,2,3);
IJIG<int>(1,2,3);
IJIH<int>(1,2,3);
IJII<int>(1,2,3);
IJIJ<int>(1,2,3);
IJJA<int>(1,2,3);
IJJB<int>(1,2,3);
IJJC<int>(1,2,3);
IJJD<int>(1,2,3);
IJJE<int>(1,2,3);
IJJF<int>(1,2,3);
IJJG<int>(1,2,3);
IJJH<int>(1,2,3);
IJJI<int>(1,2,3);
IJJJ<int>(1,2,3);
JAAA<int>(1,2,3);
JAAB<int>(1,2,3);
JAAC<int>(1,2,3);
JAAD<int>(1,2,3);
JAAE<int>(1,2,3);
JAAF<int>(1,2,3);
JAAG<int>(1,2,3);
JAAH<int>(1,2,3);
JAAI<int>(1,2,3);
JAAJ<int>(1,2,3);
JABA<int>(1,2,3);
JABB<int>(1,2,3);
JABC<int>(1,2,3);
JABD<int>(1,2,3);
JABE<int>(1,2,3);
JABF<int>(1,2,3);
JABG<int>(1,2,3);
JABH<int>(1,2,3);
JABI<int>(1,2,3);
JABJ<int>(1,2,3);
JACA<int>(1,2,3);
JACB<int>(1,2,3);
JACC<int>(1,2,3);
JACD<int>(1,2,3);
JACE<int>(1,2,3);
JACF<int>(1,2,3);
JACG<int>(1,2,3);
JACH<int>(1,2,3);
JACI<int>(1,2,3);
JACJ<int>(1,2,3);
JADA<int>(1,2,3);
JADB<int>(1,2,3);
JADC<int>(1,2,3);
JADD<int>(1,2,3);
JADE<int>(1,2,3);
JADF<int>(1,2,3);
JADG<int>(1,2,3);
JADH<int>(1,2,3);
JADI<int>(1,2,3);
JADJ<int>(1,2,3);
JAEA<int>(1,2,3);
JAEB<int>(1,2,3);
JAEC<int>(1,2,3);
JAED<int>(1,2,3);
JAEE<int>(1,2,3);
JAEF<int>(1,2,3);
JAEG<int>(1,2,3);
JAEH<int>(1,2,3);
JAEI<int>(1,2,3);
JAEJ<int>(1,2,3);
JAFA<int>(1,2,3);
JAFB<int>(1,2,3);
JAFC<int>(1,2,3);
JAFD<int>(1,2,3);
JAFE<int>(1,2,3);
JAFF<int>(1,2,3);
JAFG<int>(1,2,3);
JAFH<int>(1,2,3);
JAFI<int>(1,2,3);
JAFJ<int>(1,2,3);
JAGA<int>(1,2,3);
JAGB<int>(1,2,3);
JAGC<int>(1,2,3);
JAGD<int>(1,2,3);
JAGE<int>(1,2,3);
JAGF<int>(1,2,3);
JAGG<int>(1,2,3);
JAGH<int>(1,2,3);
JAGI<int>(1,2,3);
JAGJ<int>(1,2,3);
JAHA<int>(1,2,3);
JAHB<int>(1,2,3);
JAHC<int>(1,2,3);
JAHD<int>(1,2,3);
JAHE<int>(1,2,3);
JAHF<int>(1,2,3);
JAHG<int>(1,2,3);
JAHH<int>(1,2,3);
JAHI<int>(1,2,3);
JAHJ<int>(1,2,3);
JAIA<int>(1,2,3);
JAIB<int>(1,2,3);
JAIC<int>(1,2,3);
JAID<int>(1,2,3);
JAIE<int>(1,2,3);
JAIF<int>(1,2,3);
JAIG<int>(1,2,3);
JAIH<int>(1,2,3);
JAII<int>(1,2,3);
JAIJ<int>(1,2,3);
JAJA<int>(1,2,3);
JAJB<int>(1,2,3);
JAJC<int>(1,2,3);
JAJD<int>(1,2,3);
JAJE<int>(1,2,3);
JAJF<int>(1,2,3);
JAJG<int>(1,2,3);
JAJH<int>(1,2,3);
JAJI<int>(1,2,3);
JAJJ<int>(1,2,3);
JBAA<int>(1,2,3);
JBAB<int>(1,2,3);
JBAC<int>(1,2,3);
JBAD<int>(1,2,3);
JBAE<int>(1,2,3);
JBAF<int>(1,2,3);
JBAG<int>(1,2,3);
JBAH<int>(1,2,3);
JBAI<int>(1,2,3);
JBAJ<int>(1,2,3);
JBBA<int>(1,2,3);
JBBB<int>(1,2,3);
JBBC<int>(1,2,3);
JBBD<int>(1,2,3);
JBBE<int>(1,2,3);
JBBF<int>(1,2,3);
JBBG<int>(1,2,3);
JBBH<int>(1,2,3);
JBBI<int>(1,2,3);
JBBJ<int>(1,2,3);
JBCA<int>(1,2,3);
JBCB<int>(1,2,3);
JBCC<int>(1,2,3);
JBCD<int>(1,2,3);
JBCE<int>(1,2,3);
JBCF<int>(1,2,3);
JBCG<int>(1,2,3);
JBCH<int>(1,2,3);
JBCI<int>(1,2,3);
JBCJ<int>(1,2,3);
JBDA<int>(1,2,3);
JBDB<int>(1,2,3);
JBDC<int>(1,2,3);
JBDD<int>(1,2,3);
JBDE<int>(1,2,3);
JBDF<int>(1,2,3);
JBDG<int>(1,2,3);
JBDH<int>(1,2,3);
JBDI<int>(1,2,3);
JBDJ<int>(1,2,3);
JBEA<int>(1,2,3);
JBEB<int>(1,2,3);
JBEC<int>(1,2,3);
JBED<int>(1,2,3);
JBEE<int>(1,2,3);
JBEF<int>(1,2,3);
JBEG<int>(1,2,3);
JBEH<int>(1,2,3);
JBEI<int>(1,2,3);
JBEJ<int>(1,2,3);
JBFA<int>(1,2,3);
JBFB<int>(1,2,3);
JBFC<int>(1,2,3);
JBFD<int>(1,2,3);
JBFE<int>(1,2,3);
JBFF<int>(1,2,3);
JBFG<int>(1,2,3);
JBFH<int>(1,2,3);
JBFI<int>(1,2,3);
JBFJ<int>(1,2,3);
JBGA<int>(1,2,3);
JBGB<int>(1,2,3);
JBGC<int>(1,2,3);
JBGD<int>(1,2,3);
JBGE<int>(1,2,3);
JBGF<int>(1,2,3);
JBGG<int>(1,2,3);
JBGH<int>(1,2,3);
JBGI<int>(1,2,3);
JBGJ<int>(1,2,3);
JBHA<int>(1,2,3);
JBHB<int>(1,2,3);
JBHC<int>(1,2,3);
JBHD<int>(1,2,3);
JBHE<int>(1,2,3);
JBHF<int>(1,2,3);
JBHG<int>(1,2,3);
JBHH<int>(1,2,3);
JBHI<int>(1,2,3);
JBHJ<int>(1,2,3);
JBIA<int>(1,2,3);
JBIB<int>(1,2,3);
JBIC<int>(1,2,3);
JBID<int>(1,2,3);
JBIE<int>(1,2,3);
JBIF<int>(1,2,3);
JBIG<int>(1,2,3);
JBIH<int>(1,2,3);
JBII<int>(1,2,3);
JBIJ<int>(1,2,3);
JBJA<int>(1,2,3);
JBJB<int>(1,2,3);
JBJC<int>(1,2,3);
JBJD<int>(1,2,3);
JBJE<int>(1,2,3);
JBJF<int>(1,2,3);
JBJG<int>(1,2,3);
JBJH<int>(1,2,3);
JBJI<int>(1,2,3);
JBJJ<int>(1,2,3);
JCAA<int>(1,2,3);
JCAB<int>(1,2,3);
JCAC<int>(1,2,3);
JCAD<int>(1,2,3);
JCAE<int>(1,2,3);
JCAF<int>(1,2,3);
JCAG<int>(1,2,3);
JCAH<int>(1,2,3);
JCAI<int>(1,2,3);
JCAJ<int>(1,2,3);
JCBA<int>(1,2,3);
JCBB<int>(1,2,3);
JCBC<int>(1,2,3);
JCBD<int>(1,2,3);
JCBE<int>(1,2,3);
JCBF<int>(1,2,3);
JCBG<int>(1,2,3);
JCBH<int>(1,2,3);
JCBI<int>(1,2,3);
JCBJ<int>(1,2,3);
JCCA<int>(1,2,3);
JCCB<int>(1,2,3);
JCCC<int>(1,2,3);
JCCD<int>(1,2,3);
JCCE<int>(1,2,3);
JCCF<int>(1,2,3);
JCCG<int>(1,2,3);
JCCH<int>(1,2,3);
JCCI<int>(1,2,3);
JCCJ<int>(1,2,3);
JCDA<int>(1,2,3);
JCDB<int>(1,2,3);
JCDC<int>(1,2,3);
JCDD<int>(1,2,3);
JCDE<int>(1,2,3);
JCDF<int>(1,2,3);
JCDG<int>(1,2,3);
JCDH<int>(1,2,3);
JCDI<int>(1,2,3);
JCDJ<int>(1,2,3);
JCEA<int>(1,2,3);
JCEB<int>(1,2,3);
JCEC<int>(1,2,3);
JCED<int>(1,2,3);
JCEE<int>(1,2,3);
JCEF<int>(1,2,3);
JCEG<int>(1,2,3);
JCEH<int>(1,2,3);
JCEI<int>(1,2,3);
JCEJ<int>(1,2,3);
JCFA<int>(1,2,3);
JCFB<int>(1,2,3);
JCFC<int>(1,2,3);
JCFD<int>(1,2,3);
JCFE<int>(1,2,3);
JCFF<int>(1,2,3);
JCFG<int>(1,2,3);
JCFH<int>(1,2,3);
JCFI<int>(1,2,3);
JCFJ<int>(1,2,3);
JCGA<int>(1,2,3);
JCGB<int>(1,2,3);
JCGC<int>(1,2,3);
JCGD<int>(1,2,3);
JCGE<int>(1,2,3);
JCGF<int>(1,2,3);
JCGG<int>(1,2,3);
JCGH<int>(1,2,3);
JCGI<int>(1,2,3);
JCGJ<int>(1,2,3);
JCHA<int>(1,2,3);
JCHB<int>(1,2,3);
JCHC<int>(1,2,3);
JCHD<int>(1,2,3);
JCHE<int>(1,2,3);
JCHF<int>(1,2,3);
JCHG<int>(1,2,3);
JCHH<int>(1,2,3);
JCHI<int>(1,2,3);
JCHJ<int>(1,2,3);
JCIA<int>(1,2,3);
JCIB<int>(1,2,3);
JCIC<int>(1,2,3);
JCID<int>(1,2,3);
JCIE<int>(1,2,3);
JCIF<int>(1,2,3);
JCIG<int>(1,2,3);
JCIH<int>(1,2,3);
JCII<int>(1,2,3);
JCIJ<int>(1,2,3);
JCJA<int>(1,2,3);
JCJB<int>(1,2,3);
JCJC<int>(1,2,3);
JCJD<int>(1,2,3);
JCJE<int>(1,2,3);
JCJF<int>(1,2,3);
JCJG<int>(1,2,3);
JCJH<int>(1,2,3);
JCJI<int>(1,2,3);
JCJJ<int>(1,2,3);
JDAA<int>(1,2,3);
JDAB<int>(1,2,3);
JDAC<int>(1,2,3);
JDAD<int>(1,2,3);
JDAE<int>(1,2,3);
JDAF<int>(1,2,3);
JDAG<int>(1,2,3);
JDAH<int>(1,2,3);
JDAI<int>(1,2,3);
JDAJ<int>(1,2,3);
JDBA<int>(1,2,3);
JDBB<int>(1,2,3);
JDBC<int>(1,2,3);
JDBD<int>(1,2,3);
JDBE<int>(1,2,3);
JDBF<int>(1,2,3);
JDBG<int>(1,2,3);
JDBH<int>(1,2,3);
JDBI<int>(1,2,3);
JDBJ<int>(1,2,3);
JDCA<int>(1,2,3);
JDCB<int>(1,2,3);
JDCC<int>(1,2,3);
JDCD<int>(1,2,3);
JDCE<int>(1,2,3);
JDCF<int>(1,2,3);
JDCG<int>(1,2,3);
JDCH<int>(1,2,3);
JDCI<int>(1,2,3);
JDCJ<int>(1,2,3);
JDDA<int>(1,2,3);
JDDB<int>(1,2,3);
JDDC<int>(1,2,3);
JDDD<int>(1,2,3);
JDDE<int>(1,2,3);
JDDF<int>(1,2,3);
JDDG<int>(1,2,3);
JDDH<int>(1,2,3);
JDDI<int>(1,2,3);
JDDJ<int>(1,2,3);
JDEA<int>(1,2,3);
JDEB<int>(1,2,3);
JDEC<int>(1,2,3);
JDED<int>(1,2,3);
JDEE<int>(1,2,3);
JDEF<int>(1,2,3);
JDEG<int>(1,2,3);
JDEH<int>(1,2,3);
JDEI<int>(1,2,3);
JDEJ<int>(1,2,3);
JDFA<int>(1,2,3);
JDFB<int>(1,2,3);
JDFC<int>(1,2,3);
JDFD<int>(1,2,3);
JDFE<int>(1,2,3);
JDFF<int>(1,2,3);
JDFG<int>(1,2,3);
JDFH<int>(1,2,3);
JDFI<int>(1,2,3);
JDFJ<int>(1,2,3);
JDGA<int>(1,2,3);
JDGB<int>(1,2,3);
JDGC<int>(1,2,3);
JDGD<int>(1,2,3);
JDGE<int>(1,2,3);
JDGF<int>(1,2,3);
JDGG<int>(1,2,3);
JDGH<int>(1,2,3);
JDGI<int>(1,2,3);
JDGJ<int>(1,2,3);
JDHA<int>(1,2,3);
JDHB<int>(1,2,3);
JDHC<int>(1,2,3);
JDHD<int>(1,2,3);
JDHE<int>(1,2,3);
JDHF<int>(1,2,3);
JDHG<int>(1,2,3);
JDHH<int>(1,2,3);
JDHI<int>(1,2,3);
JDHJ<int>(1,2,3);
JDIA<int>(1,2,3);
JDIB<int>(1,2,3);
JDIC<int>(1,2,3);
JDID<int>(1,2,3);
JDIE<int>(1,2,3);
JDIF<int>(1,2,3);
JDIG<int>(1,2,3);
JDIH<int>(1,2,3);
JDII<int>(1,2,3);
JDIJ<int>(1,2,3);
JDJA<int>(1,2,3);
JDJB<int>(1,2,3);
JDJC<int>(1,2,3);
JDJD<int>(1,2,3);
JDJE<int>(1,2,3);
JDJF<int>(1,2,3);
JDJG<int>(1,2,3);
JDJH<int>(1,2,3);
JDJI<int>(1,2,3);
JDJJ<int>(1,2,3);
JEAA<int>(1,2,3);
JEAB<int>(1,2,3);
JEAC<int>(1,2,3);
JEAD<int>(1,2,3);
JEAE<int>(1,2,3);
JEAF<int>(1,2,3);
JEAG<int>(1,2,3);
JEAH<int>(1,2,3);
JEAI<int>(1,2,3);
JEAJ<int>(1,2,3);
JEBA<int>(1,2,3);
JEBB<int>(1,2,3);
JEBC<int>(1,2,3);
JEBD<int>(1,2,3);
JEBE<int>(1,2,3);
JEBF<int>(1,2,3);
JEBG<int>(1,2,3);
JEBH<int>(1,2,3);
JEBI<int>(1,2,3);
JEBJ<int>(1,2,3);
JECA<int>(1,2,3);
JECB<int>(1,2,3);
JECC<int>(1,2,3);
JECD<int>(1,2,3);
JECE<int>(1,2,3);
JECF<int>(1,2,3);
JECG<int>(1,2,3);
JECH<int>(1,2,3);
JECI<int>(1,2,3);
JECJ<int>(1,2,3);
JEDA<int>(1,2,3);
JEDB<int>(1,2,3);
JEDC<int>(1,2,3);
JEDD<int>(1,2,3);
JEDE<int>(1,2,3);
JEDF<int>(1,2,3);
JEDG<int>(1,2,3);
JEDH<int>(1,2,3);
JEDI<int>(1,2,3);
JEDJ<int>(1,2,3);
JEEA<int>(1,2,3);
JEEB<int>(1,2,3);
JEEC<int>(1,2,3);
JEED<int>(1,2,3);
JEEE<int>(1,2,3);
JEEF<int>(1,2,3);
JEEG<int>(1,2,3);
JEEH<int>(1,2,3);
JEEI<int>(1,2,3);
JEEJ<int>(1,2,3);
JEFA<int>(1,2,3);
JEFB<int>(1,2,3);
JEFC<int>(1,2,3);
JEFD<int>(1,2,3);
JEFE<int>(1,2,3);
JEFF<int>(1,2,3);
JEFG<int>(1,2,3);
JEFH<int>(1,2,3);
JEFI<int>(1,2,3);
JEFJ<int>(1,2,3);
JEGA<int>(1,2,3);
JEGB<int>(1,2,3);
JEGC<int>(1,2,3);
JEGD<int>(1,2,3);
JEGE<int>(1,2,3);
JEGF<int>(1,2,3);
JEGG<int>(1,2,3);
JEGH<int>(1,2,3);
JEGI<int>(1,2,3);
JEGJ<int>(1,2,3);
JEHA<int>(1,2,3);
JEHB<int>(1,2,3);
JEHC<int>(1,2,3);
JEHD<int>(1,2,3);
JEHE<int>(1,2,3);
JEHF<int>(1,2,3);
JEHG<int>(1,2,3);
JEHH<int>(1,2,3);
JEHI<int>(1,2,3);
JEHJ<int>(1,2,3);
JEIA<int>(1,2,3);
JEIB<int>(1,2,3);
JEIC<int>(1,2,3);
JEID<int>(1,2,3);
JEIE<int>(1,2,3);
JEIF<int>(1,2,3);
JEIG<int>(1,2,3);
JEIH<int>(1,2,3);
JEII<int>(1,2,3);
JEIJ<int>(1,2,3);
JEJA<int>(1,2,3);
JEJB<int>(1,2,3);
JEJC<int>(1,2,3);
JEJD<int>(1,2,3);
JEJE<int>(1,2,3);
JEJF<int>(1,2,3);
JEJG<int>(1,2,3);
JEJH<int>(1,2,3);
JEJI<int>(1,2,3);
JEJJ<int>(1,2,3);
JFAA<int>(1,2,3);
JFAB<int>(1,2,3);
JFAC<int>(1,2,3);
JFAD<int>(1,2,3);
JFAE<int>(1,2,3);
JFAF<int>(1,2,3);
JFAG<int>(1,2,3);
JFAH<int>(1,2,3);
JFAI<int>(1,2,3);
JFAJ<int>(1,2,3);
JFBA<int>(1,2,3);
JFBB<int>(1,2,3);
JFBC<int>(1,2,3);
JFBD<int>(1,2,3);
JFBE<int>(1,2,3);
JFBF<int>(1,2,3);
JFBG<int>(1,2,3);
JFBH<int>(1,2,3);
JFBI<int>(1,2,3);
JFBJ<int>(1,2,3);
JFCA<int>(1,2,3);
JFCB<int>(1,2,3);
JFCC<int>(1,2,3);
JFCD<int>(1,2,3);
JFCE<int>(1,2,3);
JFCF<int>(1,2,3);
JFCG<int>(1,2,3);
JFCH<int>(1,2,3);
JFCI<int>(1,2,3);
JFCJ<int>(1,2,3);
JFDA<int>(1,2,3);
JFDB<int>(1,2,3);
JFDC<int>(1,2,3);
JFDD<int>(1,2,3);
JFDE<int>(1,2,3);
JFDF<int>(1,2,3);
JFDG<int>(1,2,3);
JFDH<int>(1,2,3);
JFDI<int>(1,2,3);
JFDJ<int>(1,2,3);
JFEA<int>(1,2,3);
JFEB<int>(1,2,3);
JFEC<int>(1,2,3);
JFED<int>(1,2,3);
JFEE<int>(1,2,3);
JFEF<int>(1,2,3);
JFEG<int>(1,2,3);
JFEH<int>(1,2,3);
JFEI<int>(1,2,3);
JFEJ<int>(1,2,3);
JFFA<int>(1,2,3);
JFFB<int>(1,2,3);
JFFC<int>(1,2,3);
JFFD<int>(1,2,3);
JFFE<int>(1,2,3);
JFFF<int>(1,2,3);
JFFG<int>(1,2,3);
JFFH<int>(1,2,3);
JFFI<int>(1,2,3);
JFFJ<int>(1,2,3);
JFGA<int>(1,2,3);
JFGB<int>(1,2,3);
JFGC<int>(1,2,3);
JFGD<int>(1,2,3);
JFGE<int>(1,2,3);
JFGF<int>(1,2,3);
JFGG<int>(1,2,3);
JFGH<int>(1,2,3);
JFGI<int>(1,2,3);
JFGJ<int>(1,2,3);
JFHA<int>(1,2,3);
JFHB<int>(1,2,3);
JFHC<int>(1,2,3);
JFHD<int>(1,2,3);
JFHE<int>(1,2,3);
JFHF<int>(1,2,3);
JFHG<int>(1,2,3);
JFHH<int>(1,2,3);
JFHI<int>(1,2,3);
JFHJ<int>(1,2,3);
JFIA<int>(1,2,3);
JFIB<int>(1,2,3);
JFIC<int>(1,2,3);
JFID<int>(1,2,3);
JFIE<int>(1,2,3);
JFIF<int>(1,2,3);
JFIG<int>(1,2,3);
JFIH<int>(1,2,3);
JFII<int>(1,2,3);
JFIJ<int>(1,2,3);
JFJA<int>(1,2,3);
JFJB<int>(1,2,3);
JFJC<int>(1,2,3);
JFJD<int>(1,2,3);
JFJE<int>(1,2,3);
JFJF<int>(1,2,3);
JFJG<int>(1,2,3);
JFJH<int>(1,2,3);
JFJI<int>(1,2,3);
JFJJ<int>(1,2,3);
JGAA<int>(1,2,3);
JGAB<int>(1,2,3);
JGAC<int>(1,2,3);
JGAD<int>(1,2,3);
JGAE<int>(1,2,3);
JGAF<int>(1,2,3);
JGAG<int>(1,2,3);
JGAH<int>(1,2,3);
JGAI<int>(1,2,3);
JGAJ<int>(1,2,3);
JGBA<int>(1,2,3);
JGBB<int>(1,2,3);
JGBC<int>(1,2,3);
JGBD<int>(1,2,3);
JGBE<int>(1,2,3);
JGBF<int>(1,2,3);
JGBG<int>(1,2,3);
JGBH<int>(1,2,3);
JGBI<int>(1,2,3);
JGBJ<int>(1,2,3);
JGCA<int>(1,2,3);
JGCB<int>(1,2,3);
JGCC<int>(1,2,3);
JGCD<int>(1,2,3);
JGCE<int>(1,2,3);
JGCF<int>(1,2,3);
JGCG<int>(1,2,3);
JGCH<int>(1,2,3);
JGCI<int>(1,2,3);
JGCJ<int>(1,2,3);
JGDA<int>(1,2,3);
JGDB<int>(1,2,3);
JGDC<int>(1,2,3);
JGDD<int>(1,2,3);
JGDE<int>(1,2,3);
JGDF<int>(1,2,3);
JGDG<int>(1,2,3);
JGDH<int>(1,2,3);
JGDI<int>(1,2,3);
JGDJ<int>(1,2,3);
JGEA<int>(1,2,3);
JGEB<int>(1,2,3);
JGEC<int>(1,2,3);
JGED<int>(1,2,3);
JGEE<int>(1,2,3);
JGEF<int>(1,2,3);
JGEG<int>(1,2,3);
JGEH<int>(1,2,3);
JGEI<int>(1,2,3);
JGEJ<int>(1,2,3);
JGFA<int>(1,2,3);
JGFB<int>(1,2,3);
JGFC<int>(1,2,3);
JGFD<int>(1,2,3);
JGFE<int>(1,2,3);
JGFF<int>(1,2,3);
JGFG<int>(1,2,3);
JGFH<int>(1,2,3);
JGFI<int>(1,2,3);
JGFJ<int>(1,2,3);
JGGA<int>(1,2,3);
JGGB<int>(1,2,3);
JGGC<int>(1,2,3);
JGGD<int>(1,2,3);
JGGE<int>(1,2,3);
JGGF<int>(1,2,3);
JGGG<int>(1,2,3);
JGGH<int>(1,2,3);
JGGI<int>(1,2,3);
JGGJ<int>(1,2,3);
JGHA<int>(1,2,3);
JGHB<int>(1,2,3);
JGHC<int>(1,2,3);
JGHD<int>(1,2,3);
JGHE<int>(1,2,3);
JGHF<int>(1,2,3);
JGHG<int>(1,2,3);
JGHH<int>(1,2,3);
JGHI<int>(1,2,3);
JGHJ<int>(1,2,3);
JGIA<int>(1,2,3);
JGIB<int>(1,2,3);
JGIC<int>(1,2,3);
JGID<int>(1,2,3);
JGIE<int>(1,2,3);
JGIF<int>(1,2,3);
JGIG<int>(1,2,3);
JGIH<int>(1,2,3);
JGII<int>(1,2,3);
JGIJ<int>(1,2,3);
JGJA<int>(1,2,3);
JGJB<int>(1,2,3);
JGJC<int>(1,2,3);
JGJD<int>(1,2,3);
JGJE<int>(1,2,3);
JGJF<int>(1,2,3);
JGJG<int>(1,2,3);
JGJH<int>(1,2,3);
JGJI<int>(1,2,3);
JGJJ<int>(1,2,3);
JHAA<int>(1,2,3);
JHAB<int>(1,2,3);
JHAC<int>(1,2,3);
JHAD<int>(1,2,3);
JHAE<int>(1,2,3);
JHAF<int>(1,2,3);
JHAG<int>(1,2,3);
JHAH<int>(1,2,3);
JHAI<int>(1,2,3);
JHAJ<int>(1,2,3);
JHBA<int>(1,2,3);
JHBB<int>(1,2,3);
JHBC<int>(1,2,3);
JHBD<int>(1,2,3);
JHBE<int>(1,2,3);
JHBF<int>(1,2,3);
JHBG<int>(1,2,3);
JHBH<int>(1,2,3);
JHBI<int>(1,2,3);
JHBJ<int>(1,2,3);
JHCA<int>(1,2,3);
JHCB<int>(1,2,3);
JHCC<int>(1,2,3);
JHCD<int>(1,2,3);
JHCE<int>(1,2,3);
JHCF<int>(1,2,3);
JHCG<int>(1,2,3);
JHCH<int>(1,2,3);
JHCI<int>(1,2,3);
JHCJ<int>(1,2,3);
JHDA<int>(1,2,3);
JHDB<int>(1,2,3);
JHDC<int>(1,2,3);
JHDD<int>(1,2,3);
JHDE<int>(1,2,3);
JHDF<int>(1,2,3);
JHDG<int>(1,2,3);
JHDH<int>(1,2,3);
JHDI<int>(1,2,3);
JHDJ<int>(1,2,3);
JHEA<int>(1,2,3);
JHEB<int>(1,2,3);
JHEC<int>(1,2,3);
JHED<int>(1,2,3);
JHEE<int>(1,2,3);
JHEF<int>(1,2,3);
JHEG<int>(1,2,3);
JHEH<int>(1,2,3);
JHEI<int>(1,2,3);
JHEJ<int>(1,2,3);
JHFA<int>(1,2,3);
JHFB<int>(1,2,3);
JHFC<int>(1,2,3);
JHFD<int>(1,2,3);
JHFE<int>(1,2,3);
JHFF<int>(1,2,3);
JHFG<int>(1,2,3);
JHFH<int>(1,2,3);
JHFI<int>(1,2,3);
JHFJ<int>(1,2,3);
JHGA<int>(1,2,3);
JHGB<int>(1,2,3);
JHGC<int>(1,2,3);
JHGD<int>(1,2,3);
JHGE<int>(1,2,3);
JHGF<int>(1,2,3);
JHGG<int>(1,2,3);
JHGH<int>(1,2,3);
JHGI<int>(1,2,3);
JHGJ<int>(1,2,3);
JHHA<int>(1,2,3);
JHHB<int>(1,2,3);
JHHC<int>(1,2,3);
JHHD<int>(1,2,3);
JHHE<int>(1,2,3);
JHHF<int>(1,2,3);
JHHG<int>(1,2,3);
JHHH<int>(1,2,3);
JHHI<int>(1,2,3);
JHHJ<int>(1,2,3);
JHIA<int>(1,2,3);
JHIB<int>(1,2,3);
JHIC<int>(1,2,3);
JHID<int>(1,2,3);
JHIE<int>(1,2,3);
JHIF<int>(1,2,3);
JHIG<int>(1,2,3);
JHIH<int>(1,2,3);
JHII<int>(1,2,3);
JHIJ<int>(1,2,3);
JHJA<int>(1,2,3);
JHJB<int>(1,2,3);
JHJC<int>(1,2,3);
JHJD<int>(1,2,3);
JHJE<int>(1,2,3);
JHJF<int>(1,2,3);
JHJG<int>(1,2,3);
JHJH<int>(1,2,3);
JHJI<int>(1,2,3);
JHJJ<int>(1,2,3);
JIAA<int>(1,2,3);
JIAB<int>(1,2,3);
JIAC<int>(1,2,3);
JIAD<int>(1,2,3);
JIAE<int>(1,2,3);
JIAF<int>(1,2,3);
JIAG<int>(1,2,3);
JIAH<int>(1,2,3);
JIAI<int>(1,2,3);
JIAJ<int>(1,2,3);
JIBA<int>(1,2,3);
JIBB<int>(1,2,3);
JIBC<int>(1,2,3);
JIBD<int>(1,2,3);
JIBE<int>(1,2,3);
JIBF<int>(1,2,3);
JIBG<int>(1,2,3);
JIBH<int>(1,2,3);
JIBI<int>(1,2,3);
JIBJ<int>(1,2,3);
JICA<int>(1,2,3);
JICB<int>(1,2,3);
JICC<int>(1,2,3);
JICD<int>(1,2,3);
JICE<int>(1,2,3);
JICF<int>(1,2,3);
JICG<int>(1,2,3);
JICH<int>(1,2,3);
JICI<int>(1,2,3);
JICJ<int>(1,2,3);
JIDA<int>(1,2,3);
JIDB<int>(1,2,3);
JIDC<int>(1,2,3);
JIDD<int>(1,2,3);
JIDE<int>(1,2,3);
JIDF<int>(1,2,3);
JIDG<int>(1,2,3);
JIDH<int>(1,2,3);
JIDI<int>(1,2,3);
JIDJ<int>(1,2,3);
JIEA<int>(1,2,3);
JIEB<int>(1,2,3);
JIEC<int>(1,2,3);
JIED<int>(1,2,3);
JIEE<int>(1,2,3);
JIEF<int>(1,2,3);
JIEG<int>(1,2,3);
JIEH<int>(1,2,3);
JIEI<int>(1,2,3);
JIEJ<int>(1,2,3);
JIFA<int>(1,2,3);
JIFB<int>(1,2,3);
JIFC<int>(1,2,3);
JIFD<int>(1,2,3);
JIFE<int>(1,2,3);
JIFF<int>(1,2,3);
JIFG<int>(1,2,3);
JIFH<int>(1,2,3);
JIFI<int>(1,2,3);
JIFJ<int>(1,2,3);
JIGA<int>(1,2,3);
JIGB<int>(1,2,3);
JIGC<int>(1,2,3);
JIGD<int>(1,2,3);
JIGE<int>(1,2,3);
JIGF<int>(1,2,3);
JIGG<int>(1,2,3);
JIGH<int>(1,2,3);
JIGI<int>(1,2,3);
JIGJ<int>(1,2,3);
JIHA<int>(1,2,3);
JIHB<int>(1,2,3);
JIHC<int>(1,2,3);
JIHD<int>(1,2,3);
JIHE<int>(1,2,3);
JIHF<int>(1,2,3);
JIHG<int>(1,2,3);
JIHH<int>(1,2,3);
JIHI<int>(1,2,3);
JIHJ<int>(1,2,3);
JIIA<int>(1,2,3);
JIIB<int>(1,2,3);
JIIC<int>(1,2,3);
JIID<int>(1,2,3);
JIIE<int>(1,2,3);
JIIF<int>(1,2,3);
JIIG<int>(1,2,3);
JIIH<int>(1,2,3);
JIII<int>(1,2,3);
JIIJ<int>(1,2,3);
JIJA<int>(1,2,3);
JIJB<int>(1,2,3);
JIJC<int>(1,2,3);
JIJD<int>(1,2,3);
JIJE<int>(1,2,3);
JIJF<int>(1,2,3);
JIJG<int>(1,2,3);
JIJH<int>(1,2,3);
JIJI<int>(1,2,3);
JIJJ<int>(1,2,3);
JJAA<int>(1,2,3);
JJAB<int>(1,2,3);
JJAC<int>(1,2,3);
JJAD<int>(1,2,3);
JJAE<int>(1,2,3);
JJAF<int>(1,2,3);
JJAG<int>(1,2,3);
JJAH<int>(1,2,3);
JJAI<int>(1,2,3);
JJAJ<int>(1,2,3);
JJBA<int>(1,2,3);
JJBB<int>(1,2,3);
JJBC<int>(1,2,3);
JJBD<int>(1,2,3);
JJBE<int>(1,2,3);
JJBF<int>(1,2,3);
JJBG<int>(1,2,3);
JJBH<int>(1,2,3);
JJBI<int>(1,2,3);
JJBJ<int>(1,2,3);
JJCA<int>(1,2,3);
JJCB<int>(1,2,3);
JJCC<int>(1,2,3);
JJCD<int>(1,2,3);
JJCE<int>(1,2,3);
JJCF<int>(1,2,3);
JJCG<int>(1,2,3);
JJCH<int>(1,2,3);
JJCI<int>(1,2,3);
JJCJ<int>(1,2,3);
JJDA<int>(1,2,3);
JJDB<int>(1,2,3);
JJDC<int>(1,2,3);
JJDD<int>(1,2,3);
JJDE<int>(1,2,3);
JJDF<int>(1,2,3);
JJDG<int>(1,2,3);
JJDH<int>(1,2,3);
JJDI<int>(1,2,3);
JJDJ<int>(1,2,3);
JJEA<int>(1,2,3);
JJEB<int>(1,2,3);
JJEC<int>(1,2,3);
JJED<int>(1,2,3);
JJEE<int>(1,2,3);
JJEF<int>(1,2,3);
JJEG<int>(1,2,3);
JJEH<int>(1,2,3);
JJEI<int>(1,2,3);
JJEJ<int>(1,2,3);
JJFA<int>(1,2,3);
JJFB<int>(1,2,3);
JJFC<int>(1,2,3);
JJFD<int>(1,2,3);
JJFE<int>(1,2,3);
JJFF<int>(1,2,3);
JJFG<int>(1,2,3);
JJFH<int>(1,2,3);
JJFI<int>(1,2,3);
JJFJ<int>(1,2,3);
JJGA<int>(1,2,3);
JJGB<int>(1,2,3);
JJGC<int>(1,2,3);
JJGD<int>(1,2,3);
JJGE<int>(1,2,3);
JJGF<int>(1,2,3);
JJGG<int>(1,2,3);
JJGH<int>(1,2,3);
JJGI<int>(1,2,3);
JJGJ<int>(1,2,3);
JJHA<int>(1,2,3);
JJHB<int>(1,2,3);
JJHC<int>(1,2,3);
JJHD<int>(1,2,3);
JJHE<int>(1,2,3);
JJHF<int>(1,2,3);
JJHG<int>(1,2,3);
JJHH<int>(1,2,3);
JJHI<int>(1,2,3);
JJHJ<int>(1,2,3);
JJIA<int>(1,2,3);
JJIB<int>(1,2,3);
JJIC<int>(1,2,3);
JJID<int>(1,2,3);
JJIE<int>(1,2,3);
JJIF<int>(1,2,3);
JJIG<int>(1,2,3);
JJIH<int>(1,2,3);
JJII<int>(1,2,3);
JJIJ<int>(1,2,3);
JJJA<int>(1,2,3);
JJJB<int>(1,2,3);
JJJC<int>(1,2,3);
JJJD<int>(1,2,3);
JJJE<int>(1,2,3);
JJJF<int>(1,2,3);
JJJG<int>(1,2,3);
JJJH<int>(1,2,3);
JJJI<int>(1,2,3);
JJJJ<int>(1,2,3);
}